package org.huawei.linkedhashmap;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.lang.Class<?> wildcardClass6 = strComparableMap3.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) 'a', (float) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.Class<?>> strComparableMapMap3 = new java.util.LinkedHashMap<java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.Class<?>>((int) (byte) 10, (float) 0L, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4', (float) 0L, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.lang.Class<?> wildcardClass6 = strComparableMap1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.lang.CharSequence charSequence18 = strComparableMap1.get((java.lang.Object) (-1.0d));
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNull(charSequence18);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Class<?>, java.io.Serializable> wildcardClassMap2 = new java.util.LinkedHashMap<java.lang.Class<?>, java.io.Serializable>((int) (short) 100, (float) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean22 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence25 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int26 = strComparableMap18.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable30 = null;
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent(strComparable30, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence34 = strComparableMap29.get((java.lang.Object) true);
        int int35 = strComparableMap29.size();
        java.lang.CharSequence charSequence37 = strComparableMap29.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence38 = strComparableMap18.get((java.lang.Object) (-1.0f));
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNull(charSequence38);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) 'a', (float) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(strComparableMap0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.Map.size()\" because \"m\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = null;
        // The following exception was thrown during execution in test generation
        try {
            strComparableMap8.putAll(strComparableMap17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.Map.size()\" because \"m\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 100, 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet6 = strComparableMap3.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection7 = strComparableMap3.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap3.keySet();
        java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>> charSequenceIterableMap9 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>>();
        java.lang.CharSequence charSequence10 = strComparableMap3.remove((java.lang.Object) charSequenceIterableMap9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = charSequence10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet6);
        org.junit.Assert.assertNotNull(charSequenceCollection7);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertNull(charSequence10);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.lang.String str35 = strComparableMap3.toString();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Object, java.lang.String> objMap1 = new java.util.LinkedHashMap<java.lang.Object, java.lang.String>((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        java.util.LinkedHashMap<java.lang.Object, java.lang.CharSequence> objMap0 = new java.util.LinkedHashMap<java.lang.Object, java.lang.CharSequence>();
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        java.util.LinkedHashMap<java.lang.Object, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>> objMap0 = new java.util.LinkedHashMap<java.lang.Object, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>>();
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableMapMap3 = new java.util.LinkedHashMap<java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((-1), (float) (-1), true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        java.util.LinkedHashMap<java.lang.String, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strMap1 = new java.util.LinkedHashMap<java.lang.String, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>(100);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Class<?>> charSequenceIterableMap2 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Class<?>>((int) '4', (float) 10);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean18 = strComparableMap17.isEmpty();
        java.lang.Object obj19 = strComparableMap17.clone();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.CharSequence charSequence22 = strComparableMap11.getOrDefault((java.lang.Object) wildcardClass20, (java.lang.CharSequence) "hi!");
        java.lang.Object obj23 = null;
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        boolean boolean28 = strComparableMap11.remove(obj23, (java.lang.Object) false);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) (short) 0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean18 = strComparableMap17.isEmpty();
        java.lang.Object obj19 = strComparableMap17.clone();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.CharSequence charSequence22 = strComparableMap11.getOrDefault((java.lang.Object) wildcardClass20, (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet23 = strComparableMap11.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        java.lang.CharSequence charSequence28 = strComparableMap25.putIfAbsent(strComparable26, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap25.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap25.entrySet();
        java.lang.CharSequence charSequence33 = strComparableMap11.getOrDefault((java.lang.Object) strComparableEntrySet31, (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertNotNull(strComparableSet23);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.constant.Constable, java.lang.CharSequence> constableMap2 = new java.util.LinkedHashMap<java.lang.constant.Constable, java.lang.CharSequence>((int) (short) -1, (float) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        int int17 = strComparableMap9.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = strComparableMap9.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = strComparableMap17.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet23 = strComparableMap17.entrySet();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap17);
        java.lang.Class<?> wildcardClass25 = strComparableMap17.getClass();
        boolean boolean26 = strComparableMap1.containsKey((java.lang.Object) wildcardClass25);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet27 = strComparableMap1.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNotNull(strComparableEntrySet23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet27);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        java.util.LinkedHashMap<java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableMapMap3 = new java.util.LinkedHashMap<java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((int) (byte) 10, (float) '#', false);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        int int8 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        java.lang.Object obj22 = strComparableMap16.clone();
        java.lang.CharSequence charSequence25 = strComparableMap16.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj26 = null;
        java.lang.CharSequence charSequence27 = strComparableMap16.get(obj26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap31.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap31.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet36 = strComparableMap31.keySet();
        boolean boolean37 = strComparableMap16.equals((java.lang.Object) strComparableMap31);
        java.lang.String str38 = strComparableMap16.toString();
        boolean boolean39 = strComparableMap10.equals((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        int int48 = strComparableMap41.size();
        java.lang.CharSequence charSequence49 = strComparableMap10.remove((java.lang.Object) strComparableMap41);
        boolean boolean50 = strComparableMap1.containsKey((java.lang.Object) strComparableMap10);
        java.lang.CharSequence charSequence53 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{null=}");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNotNull(strComparableSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=, =}" + "'", str38, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(charSequence53);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.lang.invoke.TypeDescriptor> annotatedElementMap3 = new java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.lang.invoke.TypeDescriptor>(10, (float) (short) 100, false);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap13.get((java.lang.Object) true);
        int int19 = strComparableMap13.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap13.values();
        boolean boolean21 = strComparableMap6.containsValue((java.lang.Object) strComparableMap13);
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap13);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean25 = strComparableMap24.isEmpty();
        java.lang.Object obj26 = strComparableMap24.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap24.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean30 = strComparableMap29.isEmpty();
        java.lang.Object obj31 = strComparableMap29.clone();
        java.lang.CharSequence charSequence33 = strComparableMap29.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence35 = strComparableMap29.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence37 = strComparableMap24.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence38 = strComparableMap1.remove((java.lang.Object) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int41 = strComparableMap40.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap40.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap45);
        java.lang.CharSequence charSequence49 = strComparableMap40.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence52 = strComparableMap40.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        boolean boolean56 = strComparableMap40.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection57 = strComparableMap40.values();
        java.lang.CharSequence charSequence58 = strComparableMap1.get((java.lang.Object) strComparableMap40);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "" + "'", charSequence37, "");
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection57);
        org.junit.Assert.assertNull(charSequence58);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence34 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap1.remove((java.lang.Object) 1L);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet19 = strComparableMap16.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap16.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet21 = strComparableMap16.keySet();
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap16);
        java.lang.String str23 = strComparableMap1.toString();
        java.lang.CharSequence charSequence26 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        java.lang.Object obj34 = strComparableMap28.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.lang.String str46 = strComparableMap36.toString();
        boolean boolean47 = strComparableMap1.remove(obj34, (java.lang.Object) str46);
        boolean boolean51 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet19);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertNotNull(strComparableSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{null=, =}" + "'", str23, "{null=, =}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{null=}");
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{null=}" + "'", str46, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>> typeDescriptorMap1 = new java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>>((int) (short) 10);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean18 = strComparableMap17.isEmpty();
        java.lang.Object obj19 = strComparableMap17.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap17.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        boolean boolean27 = strComparableMap22.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable30 = null;
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent(strComparable30, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence34 = strComparableMap29.get((java.lang.Object) true);
        int int35 = strComparableMap29.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection36 = strComparableMap29.values();
        boolean boolean37 = strComparableMap22.containsValue((java.lang.Object) strComparableMap29);
        boolean boolean38 = strComparableMap17.equals((java.lang.Object) strComparableMap29);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean41 = strComparableMap40.isEmpty();
        java.lang.Object obj42 = strComparableMap40.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection43 = strComparableMap40.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean46 = strComparableMap45.isEmpty();
        java.lang.Object obj47 = strComparableMap45.clone();
        java.lang.CharSequence charSequence49 = strComparableMap45.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence51 = strComparableMap45.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence53 = strComparableMap40.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence54 = strComparableMap17.remove((java.lang.Object) "");
        boolean boolean55 = strComparableMap11.containsKey((java.lang.Object) charSequence54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass56 = charSequence54.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{}");
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "" + "'", charSequence53, "");
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        java.util.LinkedHashMap<java.lang.reflect.Type, java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> typeMap2 = new java.util.LinkedHashMap<java.lang.reflect.Type, java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((int) ' ', 100.0f);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.invoke.TypeDescriptor> typeMap0 = new java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.invoke.TypeDescriptor>();
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        boolean boolean10 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.lang.CharSequence charSequence10 = strComparableMap6.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence12 = strComparableMap6.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence14 = strComparableMap1.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.lang.Object obj15 = strComparableMap1.clone();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{}");
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet11 = strComparableMap1.keySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableSet11);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.lang.Object> annotatedElementMap2 = new java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.lang.Object>((-1), (float) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        java.util.LinkedHashMap<java.lang.CharSequence, java.lang.Cloneable> charSequenceMap2 = new java.util.LinkedHashMap<java.lang.CharSequence, java.lang.Cloneable>((int) (byte) 1, (float) ' ');
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(10, (float) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap7.get((java.lang.Object) true);
        java.lang.Object obj13 = strComparableMap7.clone();
        java.lang.CharSequence charSequence16 = strComparableMap7.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj17 = null;
        java.lang.CharSequence charSequence18 = strComparableMap7.get(obj17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap22.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap22.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap22.keySet();
        boolean boolean28 = strComparableMap7.equals((java.lang.Object) strComparableMap22);
        java.lang.String str29 = strComparableMap7.toString();
        boolean boolean30 = strComparableMap1.equals((java.lang.Object) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        boolean boolean37 = strComparableMap32.containsValue((java.lang.Object) (short) 100);
        int int38 = strComparableMap32.size();
        int int39 = strComparableMap32.size();
        java.lang.CharSequence charSequence40 = strComparableMap1.remove((java.lang.Object) strComparableMap32);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection41 = strComparableMap1.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertNotNull(strComparableSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{null=, =}" + "'", str29, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNotNull(charSequenceCollection41);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection5 = strComparableMap1.values();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNotNull(charSequenceCollection5);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 0, 0.0f, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.util.Collection<java.lang.CharSequence>, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> charSequenceCollectionMap3 = new java.util.LinkedHashMap<java.util.Collection<java.lang.CharSequence>, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((int) (byte) 100, (float) (byte) -1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean18 = strComparableMap17.isEmpty();
        java.lang.Object obj19 = strComparableMap17.clone();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.CharSequence charSequence22 = strComparableMap11.getOrDefault((java.lang.Object) wildcardClass20, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence25 = strComparableMap11.put((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertNull(charSequence25);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet6 = strComparableMap3.entrySet();
        boolean boolean7 = strComparableMap3.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        int int22 = strComparableMap16.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection23 = strComparableMap16.values();
        boolean boolean24 = strComparableMap9.containsValue((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap26.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        boolean boolean31 = strComparableMap26.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence34 = strComparableMap26.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap26.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = strComparableMap26.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence43 = strComparableMap26.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean44 = strComparableMap9.containsValue((java.lang.Object) "{null=, =}");
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.lang.Class<?> wildcardClass46 = strComparableMap9.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.Class<?>> comparableEntrySetMap2 = new java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.Class<?>>(100, (float) (short) 1);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean20 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection40 = strComparableMap37.values();
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.lang.String str42 = strComparableMap27.toString();
        boolean boolean43 = strComparableMap16.remove((java.lang.Object) strComparableMap25, (java.lang.Object) str42);
        boolean boolean44 = strComparableMap13.equals((java.lang.Object) strComparableMap25);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        boolean boolean51 = strComparableMap46.containsValue((java.lang.Object) (short) 100);
        int int52 = strComparableMap46.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence55 = strComparableMap46.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        java.lang.Object obj59 = strComparableMap57.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection60 = strComparableMap57.values();
        boolean boolean61 = strComparableMap25.remove((java.lang.Object) strComparableMap53, (java.lang.Object) strComparableMap57);
        boolean boolean62 = strComparableMap1.equals((java.lang.Object) strComparableMap57);
        java.lang.Class<?> wildcardClass63 = strComparableMap1.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{null=, =}" + "'", str42, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "" + "'", charSequence55, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.lang.String str4 = strComparableMap3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        boolean boolean17 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean24 = strComparableMap20.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence27 = strComparableMap20.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int28 = strComparableMap20.size();
        boolean boolean32 = strComparableMap20.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence35 = strComparableMap20.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =}");
        java.lang.Object obj36 = null;
        boolean boolean37 = strComparableMap1.remove((java.lang.Object) "{null=, =}", obj36);
        java.lang.Class<?> wildcardClass38 = strComparableMap1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) -1, (float) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap7.get((java.lang.Object) true);
        java.lang.Object obj13 = strComparableMap7.clone();
        java.lang.CharSequence charSequence16 = strComparableMap7.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj17 = null;
        java.lang.CharSequence charSequence18 = strComparableMap7.get(obj17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap22.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap22.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap22.keySet();
        boolean boolean28 = strComparableMap7.equals((java.lang.Object) strComparableMap22);
        java.lang.String str29 = strComparableMap7.toString();
        boolean boolean30 = strComparableMap1.equals((java.lang.Object) strComparableMap7);
        boolean boolean31 = strComparableMap1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertNotNull(strComparableSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{null=, =}" + "'", str29, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(1, 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap1.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.String str14 = strComparableMap1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{null=}" + "'", str14, "{null=}");
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.lang.invoke.TypeDescriptor> constantDescMap2 = new java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.lang.invoke.TypeDescriptor>((int) (byte) -1, (float) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, 10.0f);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap18.values();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap8.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = strComparableMap1.get((java.lang.Object) charSequence14);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap17.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        java.lang.CharSequence charSequence28 = strComparableMap25.putIfAbsent(strComparable26, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap25.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap25.entrySet();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap25);
        java.lang.Class<?> wildcardClass33 = strComparableMap25.getClass();
        boolean boolean34 = strComparableMap1.containsValue((java.lang.Object) wildcardClass33);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "" + "'", charSequence15, "");
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        java.util.LinkedHashMap<java.lang.Class<?>, java.lang.constant.ConstantDesc> wildcardClassMap1 = new java.util.LinkedHashMap<java.lang.Class<?>, java.lang.constant.ConstantDesc>((int) '4');
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Class<?>> charSequenceIterableMap2 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Class<?>>((int) '4', (float) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.Class<?>> genericDeclarationMap3 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.Class<?>>((int) '#', (float) (short) 10, true);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>, java.lang.reflect.Type> wildcardClassOfFieldMap3 = new java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>, java.lang.reflect.Type>((int) '4', 0.0f, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        java.lang.Object obj8 = strComparableMap1.clone();
        int int9 = strComparableMap1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        int int4 = strComparableMap3.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean15 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        boolean boolean27 = strComparableMap22.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence30 = strComparableMap22.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean33 = strComparableMap32.isEmpty();
        java.lang.Object obj34 = strComparableMap32.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap32.values();
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.lang.String str37 = strComparableMap22.toString();
        boolean boolean38 = strComparableMap11.remove((java.lang.Object) strComparableMap20, (java.lang.Object) str37);
        boolean boolean39 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence50 = strComparableMap41.getOrDefault((java.lang.Object) strComparableMap48, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean53 = strComparableMap52.isEmpty();
        java.lang.Object obj54 = strComparableMap52.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection55 = strComparableMap52.values();
        boolean boolean56 = strComparableMap20.remove((java.lang.Object) strComparableMap48, (java.lang.Object) strComparableMap52);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet57 = strComparableMap52.entrySet();
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean61 = strComparableMap60.isEmpty();
        java.lang.Object obj62 = strComparableMap60.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean67 = strComparableMap66.isEmpty();
        strComparableMap64.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap66);
        strComparableMap60.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap66);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap71 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable72 = null;
        java.lang.CharSequence charSequence74 = strComparableMap71.putIfAbsent(strComparable72, (java.lang.CharSequence) "");
        boolean boolean76 = strComparableMap71.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence79 = strComparableMap71.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap81 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap83 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable84 = null;
        java.lang.CharSequence charSequence86 = strComparableMap83.putIfAbsent(strComparable84, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence89 = strComparableMap83.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean90 = strComparableMap71.remove((java.lang.Object) strComparableMap81, (java.lang.Object) "hi!");
        java.lang.CharSequence charSequence92 = strComparableMap60.getOrDefault((java.lang.Object) boolean90, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence93 = strComparableMap52.get((java.lang.Object) "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{null=, =}" + "'", str37, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "" + "'", charSequence50, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertNull(charSequence86);
        org.junit.Assert.assertNull(charSequence89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "" + "'", charSequence92, "");
        org.junit.Assert.assertNull(charSequence93);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap7.get((java.lang.Object) true);
        java.lang.Object obj13 = strComparableMap7.clone();
        java.lang.CharSequence charSequence16 = strComparableMap7.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj17 = null;
        java.lang.CharSequence charSequence18 = strComparableMap7.get(obj17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap22.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap22.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap22.keySet();
        boolean boolean28 = strComparableMap7.equals((java.lang.Object) strComparableMap22);
        java.lang.String str29 = strComparableMap7.toString();
        boolean boolean30 = strComparableMap1.equals((java.lang.Object) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int33 = strComparableMap32.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap32.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.lang.CharSequence charSequence41 = strComparableMap32.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence44 = strComparableMap32.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        boolean boolean48 = strComparableMap32.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean55 = strComparableMap51.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence58 = strComparableMap51.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int59 = strComparableMap51.size();
        boolean boolean63 = strComparableMap51.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence66 = strComparableMap51.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =}");
        java.lang.Object obj67 = null;
        boolean boolean68 = strComparableMap32.remove((java.lang.Object) "{null=, =}", obj67);
        java.lang.CharSequence charSequence69 = strComparableMap1.remove((java.lang.Object) "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertNotNull(strComparableSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{null=, =}" + "'", str29, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(charSequence69);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        int int4 = strComparableMap3.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean15 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        boolean boolean27 = strComparableMap22.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence30 = strComparableMap22.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean33 = strComparableMap32.isEmpty();
        java.lang.Object obj34 = strComparableMap32.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap32.values();
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.lang.String str37 = strComparableMap22.toString();
        boolean boolean38 = strComparableMap11.remove((java.lang.Object) strComparableMap20, (java.lang.Object) str37);
        boolean boolean39 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence50 = strComparableMap41.getOrDefault((java.lang.Object) strComparableMap48, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean53 = strComparableMap52.isEmpty();
        java.lang.Object obj54 = strComparableMap52.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection55 = strComparableMap52.values();
        boolean boolean56 = strComparableMap20.remove((java.lang.Object) strComparableMap48, (java.lang.Object) strComparableMap52);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet57 = strComparableMap52.entrySet();
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean61 = strComparableMap60.isEmpty();
        java.lang.Object obj62 = strComparableMap60.clone();
        java.lang.CharSequence charSequence64 = strComparableMap60.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable67 = null;
        java.lang.CharSequence charSequence69 = strComparableMap66.putIfAbsent(strComparable67, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence71 = strComparableMap66.get((java.lang.Object) true);
        java.lang.Object obj72 = strComparableMap66.clone();
        java.lang.CharSequence charSequence75 = strComparableMap66.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj76 = null;
        java.lang.CharSequence charSequence77 = strComparableMap66.get(obj76);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap79 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap81 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean82 = strComparableMap81.isEmpty();
        strComparableMap79.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap81);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet84 = strComparableMap81.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection85 = strComparableMap81.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet86 = strComparableMap81.keySet();
        boolean boolean87 = strComparableMap66.equals((java.lang.Object) strComparableMap81);
        java.lang.String str88 = strComparableMap66.toString();
        boolean boolean89 = strComparableMap60.equals((java.lang.Object) strComparableMap66);
        java.lang.CharSequence charSequence91 = strComparableMap3.getOrDefault((java.lang.Object) strComparableMap66, (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.CharSequence charSequence94 = strComparableMap66.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{null=, =}" + "'", str37, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "" + "'", charSequence50, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "{null=}");
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "" + "'", charSequence77, "");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet84);
        org.junit.Assert.assertNotNull(charSequenceCollection85);
        org.junit.Assert.assertNotNull(strComparableSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "{null=, =}" + "'", str88, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "{null=, =, hi!=hi!}" + "'", charSequence91, "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence94);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap21.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean28 = strComparableMap9.remove((java.lang.Object) strComparableMap19, (java.lang.Object) "hi!");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        int int37 = strComparableMap31.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        boolean boolean44 = strComparableMap39.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence47 = strComparableMap39.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence57 = strComparableMap51.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean58 = strComparableMap39.remove((java.lang.Object) strComparableMap49, (java.lang.Object) "hi!");
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        strComparableMap19.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        java.lang.Object obj61 = strComparableMap19.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "{}");
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.lang.Object> constantDescMap3 = new java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.lang.Object>(10, (float) (short) -1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        java.util.LinkedHashMap<java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>> strComparableMapMap2 = new java.util.LinkedHashMap<java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>>((int) '4', (float) (short) 100);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.CharSequence, java.lang.Object> charSequenceMap2 = new java.util.LinkedHashMap<java.lang.CharSequence, java.lang.Object>((int) (short) 0, (float) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean15 = strComparableMap14.isEmpty();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap14);
        boolean boolean17 = strComparableMap2.containsKey((java.lang.Object) strComparableMap12);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet18 = strComparableMap2.entrySet();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet18);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.lang.CharSequence charSequence10 = strComparableMap6.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence12 = strComparableMap6.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence14 = strComparableMap1.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet18 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence21 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNotNull(strComparableEntrySet18);
        org.junit.Assert.assertNull(charSequence21);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence34 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean39 = strComparableMap38.isEmpty();
        strComparableMap36.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet41 = strComparableMap38.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection42 = strComparableMap38.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet43 = strComparableMap38.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean46 = strComparableMap45.isEmpty();
        java.lang.Object obj47 = strComparableMap45.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean52 = strComparableMap51.isEmpty();
        strComparableMap49.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        strComparableMap45.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        strComparableMap45.clear();
        strComparableMap38.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap45);
        java.lang.CharSequence charSequence57 = strComparableMap1.get((java.lang.Object) strComparableMap45);
        java.lang.CharSequence charSequence59 = null;
        java.lang.CharSequence charSequence60 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=}", charSequence59);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet41);
        org.junit.Assert.assertNotNull(charSequenceCollection42);
        org.junit.Assert.assertNotNull(strComparableSet43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{}");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertNull(charSequence60);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.io.Serializable, java.lang.reflect.AnnotatedElement> serializableMap3 = new java.util.LinkedHashMap<java.io.Serializable, java.lang.reflect.AnnotatedElement>(10, (-1.0f), false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        boolean boolean18 = strComparableMap10.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean19 = strComparableMap1.equals((java.lang.Object) "");
        java.lang.String str20 = strComparableMap1.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{null=}" + "'", str20, "{null=}");
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 0, (float) (short) 10, false);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable6 = null;
        java.lang.CharSequence charSequence8 = strComparableMap5.putIfAbsent(strComparable6, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence10 = strComparableMap5.get((java.lang.Object) true);
        int int11 = strComparableMap5.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet12 = strComparableMap5.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean17 = strComparableMap5.equals((java.lang.Object) 0);
        java.lang.CharSequence charSequence19 = strComparableMap3.getOrDefault((java.lang.Object) 0, (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence22 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "");
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(strComparableSet12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "{null=, =}" + "'", charSequence19, "{null=, =}");
        org.junit.Assert.assertNull(charSequence22);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        java.lang.String str52 = strComparableMap15.toString();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{}" + "'", str52, "{}");
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable4 = null;
        java.lang.CharSequence charSequence6 = strComparableMap3.putIfAbsent(strComparable4, (java.lang.CharSequence) "");
        boolean boolean8 = strComparableMap3.containsValue((java.lang.Object) (short) 100);
        int int9 = strComparableMap3.size();
        int int10 = strComparableMap3.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        java.lang.Object obj14 = strComparableMap12.clone();
        java.lang.CharSequence charSequence16 = strComparableMap12.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.lang.Object obj24 = strComparableMap18.clone();
        java.lang.CharSequence charSequence27 = strComparableMap18.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj28 = null;
        java.lang.CharSequence charSequence29 = strComparableMap18.get(obj28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean34 = strComparableMap33.isEmpty();
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap33);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet36 = strComparableMap33.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection37 = strComparableMap33.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet38 = strComparableMap33.keySet();
        boolean boolean39 = strComparableMap18.equals((java.lang.Object) strComparableMap33);
        java.lang.String str40 = strComparableMap18.toString();
        boolean boolean41 = strComparableMap12.equals((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable44 = null;
        java.lang.CharSequence charSequence46 = strComparableMap43.putIfAbsent(strComparable44, (java.lang.CharSequence) "");
        boolean boolean48 = strComparableMap43.containsValue((java.lang.Object) (short) 100);
        int int49 = strComparableMap43.size();
        int int50 = strComparableMap43.size();
        java.lang.CharSequence charSequence51 = strComparableMap12.remove((java.lang.Object) strComparableMap43);
        boolean boolean52 = strComparableMap3.containsKey((java.lang.Object) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        boolean boolean59 = strComparableMap54.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence62 = strComparableMap54.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean65 = strComparableMap64.isEmpty();
        java.lang.Object obj66 = strComparableMap64.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection67 = strComparableMap64.values();
        strComparableMap54.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap64);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean71 = strComparableMap70.isEmpty();
        java.lang.Object obj72 = strComparableMap70.clone();
        java.lang.Class<?> wildcardClass73 = obj72.getClass();
        java.lang.CharSequence charSequence75 = strComparableMap64.getOrDefault((java.lang.Object) wildcardClass73, (java.lang.CharSequence) "hi!");
        boolean boolean76 = strComparableMap12.containsValue((java.lang.Object) "hi!");
        java.lang.CharSequence charSequence77 = strComparableMap1.remove((java.lang.Object) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap80 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean84 = strComparableMap80.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap85 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap80);
        java.lang.Object obj86 = strComparableMap80.clone();
        boolean boolean87 = strComparableMap1.containsKey(obj86);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{null=}");
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "" + "'", charSequence29, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet36);
        org.junit.Assert.assertNotNull(charSequenceCollection37);
        org.junit.Assert.assertNotNull(strComparableSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{null=, =}" + "'", str40, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "{}");
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "hi!" + "'", charSequence75, "hi!");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertEquals(obj86.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "{}");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        java.util.LinkedHashMap<java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.Cloneable> strComparableMapMap2 = new java.util.LinkedHashMap<java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.Cloneable>((int) (byte) 100, (float) (short) 10);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.lang.Class<?> wildcardClass11 = strComparableMap1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet8 = strComparableMap1.entrySet();
        java.lang.Class<?> wildcardClass9 = strComparableEntrySet8.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strComparableEntrySet8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 10, (float) '#');
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        java.util.LinkedHashMap<java.lang.Object, java.lang.CharSequence> objMap2 = new java.util.LinkedHashMap<java.lang.Object, java.lang.CharSequence>((int) '4', 100.0f);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        boolean boolean18 = strComparableMap10.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean19 = strComparableMap1.equals((java.lang.Object) "");
        java.lang.CharSequence charSequence22 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(charSequence22);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet10 = strComparableMap2.keySet();
        java.lang.CharSequence charSequence13 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap2.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(strComparableSet10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.lang.constant.ConstantDesc> constantDescMap1 = new java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.lang.constant.ConstantDesc>((int) '4');
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection2 = strComparableMap1.values();
        strComparableMap1.clear();
        java.lang.CharSequence charSequence6 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection2);
        org.junit.Assert.assertNull(charSequence6);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet19 = strComparableMap16.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap16.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet21 = strComparableMap16.keySet();
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap16);
        java.lang.String str23 = strComparableMap1.toString();
        java.lang.CharSequence charSequence26 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        java.lang.Object obj34 = strComparableMap28.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.lang.String str46 = strComparableMap36.toString();
        boolean boolean47 = strComparableMap1.remove(obj34, (java.lang.Object) str46);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap50.get((java.lang.Object) true);
        java.lang.Object obj56 = strComparableMap50.clone();
        java.lang.String str57 = strComparableMap50.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean62 = strComparableMap61.isEmpty();
        strComparableMap59.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap61);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable66 = null;
        java.lang.CharSequence charSequence68 = strComparableMap65.putIfAbsent(strComparable66, (java.lang.CharSequence) "");
        boolean boolean70 = strComparableMap65.containsValue((java.lang.Object) (short) 100);
        int int71 = strComparableMap65.size();
        java.lang.CharSequence charSequence73 = strComparableMap59.getOrDefault((java.lang.Object) strComparableMap65, (java.lang.CharSequence) "hi!");
        boolean boolean74 = strComparableMap50.equals((java.lang.Object) charSequence73);
        java.lang.CharSequence charSequence77 = strComparableMap50.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        boolean boolean78 = strComparableMap1.containsValue((java.lang.Object) charSequence77);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet19);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertNotNull(strComparableSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{null=, =}" + "'", str23, "{null=, =}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{null=}");
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{null=}" + "'", str46, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{null=}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{null=}" + "'", str57, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertEquals("'" + charSequence73 + "' != '" + "hi!" + "'", charSequence73, "hi!");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.CharSequence> cloneableMap1 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.CharSequence>((int) (byte) 10);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean14 = strComparableMap13.isEmpty();
        java.lang.Object obj15 = strComparableMap13.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection16 = strComparableMap13.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        java.lang.CharSequence charSequence28 = strComparableMap25.putIfAbsent(strComparable26, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap25.get((java.lang.Object) true);
        int int31 = strComparableMap25.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection32 = strComparableMap25.values();
        boolean boolean33 = strComparableMap18.containsValue((java.lang.Object) strComparableMap25);
        boolean boolean34 = strComparableMap13.equals((java.lang.Object) strComparableMap25);
        java.lang.CharSequence charSequence35 = strComparableMap1.get((java.lang.Object) strComparableMap13);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection36 = strComparableMap13.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNotNull(charSequenceCollection36);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet52 = strComparableMap47.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence59 = strComparableMap54.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet60 = strComparableMap54.entrySet();
        java.lang.String str61 = strComparableMap54.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean64 = strComparableMap63.isEmpty();
        java.lang.Object obj65 = strComparableMap63.clone();
        java.lang.CharSequence charSequence67 = strComparableMap63.remove((java.lang.Object) true);
        boolean boolean71 = strComparableMap63.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean72 = strComparableMap54.equals((java.lang.Object) "");
        strComparableMap47.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap54);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet74 = strComparableMap47.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap76 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable77 = null;
        java.lang.CharSequence charSequence79 = strComparableMap76.putIfAbsent(strComparable77, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence81 = strComparableMap76.get((java.lang.Object) true);
        int int82 = strComparableMap76.size();
        java.lang.CharSequence charSequence84 = strComparableMap76.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence87 = strComparableMap76.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection88 = strComparableMap76.values();
        boolean boolean89 = strComparableMap47.containsValue((java.lang.Object) charSequenceCollection88);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet52);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertNotNull(strComparableEntrySet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{null=}" + "'", str61, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "{}");
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strComparableSet74);
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertNull(charSequence81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNull(charSequence84);
        org.junit.Assert.assertNull(charSequence87);
        org.junit.Assert.assertNotNull(charSequenceCollection88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet15 = strComparableMap8.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean20 = strComparableMap8.equals((java.lang.Object) 0);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable24 = null;
        java.lang.CharSequence charSequence26 = strComparableMap23.putIfAbsent(strComparable24, (java.lang.CharSequence) "");
        boolean boolean28 = strComparableMap23.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence31 = strComparableMap23.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean33 = strComparableMap23.containsKey((java.lang.Object) 1);
        java.lang.Class<?> wildcardClass34 = strComparableMap23.getClass();
        boolean boolean35 = strComparableMap8.containsKey((java.lang.Object) strComparableMap23);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        boolean boolean42 = strComparableMap37.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence45 = strComparableMap37.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence48 = strComparableMap37.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection49 = strComparableMap37.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence56 = strComparableMap51.get((java.lang.Object) true);
        int int57 = strComparableMap51.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection58 = strComparableMap51.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable61 = null;
        java.lang.CharSequence charSequence63 = strComparableMap60.putIfAbsent(strComparable61, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence66 = strComparableMap60.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable69 = null;
        java.lang.CharSequence charSequence71 = strComparableMap68.putIfAbsent(strComparable69, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence73 = strComparableMap68.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet74 = strComparableMap68.entrySet();
        strComparableMap60.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap68);
        java.lang.CharSequence charSequence77 = strComparableMap51.getOrDefault((java.lang.Object) strComparableMap68, (java.lang.CharSequence) "{null=, =}");
        strComparableMap37.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        strComparableMap8.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        java.lang.Class<?> wildcardClass80 = strComparableMap51.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(strComparableSet15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection49);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection58);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertNotNull(strComparableEntrySet74);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "{null=, =}" + "'", charSequence77, "{null=, =}");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        java.util.LinkedHashMap<java.lang.Cloneable, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> cloneableMap0 = new java.util.LinkedHashMap<java.lang.Cloneable, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>();
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.lang.CharSequence charSequence18 = strComparableMap1.get((java.lang.Object) 'a');
        java.lang.CharSequence charSequence21 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence21);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        boolean boolean29 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "{null=}");
        strComparableMap18.clear();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet31 = strComparableMap18.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strComparableSet31);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        boolean boolean29 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence31 = null;
        java.lang.CharSequence charSequence32 = strComparableMap18.put((java.lang.Comparable<java.lang.String>) "{null=}", charSequence31);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(charSequence32);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap37.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence58 = strComparableMap53.get((java.lang.Object) true);
        int int59 = strComparableMap53.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet60 = strComparableMap53.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean65 = strComparableMap53.equals((java.lang.Object) 0);
        strComparableMap46.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap53);
        java.lang.CharSequence charSequence68 = strComparableMap37.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "{null=}");
        boolean boolean72 = strComparableMap37.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=}", (java.lang.CharSequence) "{}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection73 = strComparableMap37.values();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(strComparableSet60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "{null=}" + "'", charSequence68, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection73);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap13.get((java.lang.Object) true);
        int int19 = strComparableMap13.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap13.values();
        boolean boolean21 = strComparableMap6.containsValue((java.lang.Object) strComparableMap13);
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap13);
        java.lang.CharSequence charSequence24 = strComparableMap13.get((java.lang.Object) 0L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence24);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet4 = strComparableMap3.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        org.junit.Assert.assertNotNull(strComparableEntrySet4);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap2);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean20 = strComparableMap19.isEmpty();
        java.lang.Object obj21 = strComparableMap19.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap19.values();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean30 = strComparableMap26.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = strComparableMap26.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int34 = strComparableMap26.size();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean41 = strComparableMap26.equals((java.lang.Object) charSequence40);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection42 = strComparableMap26.values();
        java.lang.CharSequence charSequence44 = strComparableMap7.getOrDefault((java.lang.Object) charSequenceCollection42, (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean47 = strComparableMap46.isEmpty();
        java.lang.Object obj48 = strComparableMap46.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection49 = strComparableMap46.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        boolean boolean56 = strComparableMap51.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        java.lang.CharSequence charSequence61 = strComparableMap58.putIfAbsent(strComparable59, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence63 = strComparableMap58.get((java.lang.Object) true);
        int int64 = strComparableMap58.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection65 = strComparableMap58.values();
        boolean boolean66 = strComparableMap51.containsValue((java.lang.Object) strComparableMap58);
        boolean boolean67 = strComparableMap46.equals((java.lang.Object) strComparableMap58);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap69 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable70 = null;
        java.lang.CharSequence charSequence72 = strComparableMap69.putIfAbsent(strComparable70, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence74 = strComparableMap69.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap76 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable77 = null;
        java.lang.CharSequence charSequence79 = strComparableMap76.putIfAbsent(strComparable77, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence81 = strComparableMap76.get((java.lang.Object) true);
        int int82 = strComparableMap76.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet83 = strComparableMap76.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap87 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean88 = strComparableMap76.equals((java.lang.Object) 0);
        strComparableMap69.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap76);
        boolean boolean90 = strComparableMap46.containsValue((java.lang.Object) strComparableMap69);
        java.lang.CharSequence charSequence91 = strComparableMap7.get((java.lang.Object) strComparableMap69);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection42);
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "{}" + "'", charSequence44, "{}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection49);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertNull(charSequence81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(strComparableSet83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(charSequence91);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.CharSequence charSequence4 = strComparableMap1.get((java.lang.Object) (byte) 1);
        java.lang.CharSequence charSequence7 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=, =}");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = charSequence7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) (short) 100, true);
        java.lang.CharSequence charSequence6 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertNull(charSequence6);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet10 = strComparableMap2.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10, (float) 1L, false);
        strComparableMap2.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap14);
        strComparableMap2.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(strComparableSet10);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        int int16 = strComparableMap11.size();
        java.lang.CharSequence charSequence19 = strComparableMap11.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        boolean boolean23 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet24 = strComparableMap11.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strComparableSet24);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        java.lang.CharSequence charSequence54 = strComparableMap47.put((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence54);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str13 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean18 = strComparableMap17.isEmpty();
        strComparableMap15.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap17);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet20 = strComparableMap17.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection21 = strComparableMap17.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet22 = strComparableMap17.keySet();
        java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>> charSequenceIterableMap23 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>>();
        java.lang.CharSequence charSequence24 = strComparableMap17.remove((java.lang.Object) charSequenceIterableMap23);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (float) (short) 10);
        java.lang.CharSequence charSequence30 = strComparableMap27.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        boolean boolean31 = strComparableMap17.containsValue((java.lang.Object) charSequence30);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap17);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{null=, =}" + "'", str13, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet20);
        org.junit.Assert.assertNotNull(charSequenceCollection21);
        org.junit.Assert.assertNotNull(strComparableSet22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence26 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap18.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence41 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap39, (java.lang.CharSequence) "{null=}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet42 = strComparableMap1.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=}" + "'", charSequence41, "{null=}");
        org.junit.Assert.assertNotNull(strComparableSet42);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationMap0 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.io.Serializable>();
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap21.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean28 = strComparableMap9.remove((java.lang.Object) strComparableMap19, (java.lang.Object) "hi!");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.lang.CharSequence charSequence31 = strComparableMap19.get((java.lang.Object) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(charSequence31);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection8 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap10.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap18.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.CharSequence charSequence27 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap18, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable30 = null;
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent(strComparable30, (java.lang.CharSequence) "");
        boolean boolean34 = strComparableMap29.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean37 = strComparableMap36.isEmpty();
        java.lang.Object obj38 = strComparableMap36.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection39 = strComparableMap36.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap48.get((java.lang.Object) true);
        int int54 = strComparableMap48.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection55 = strComparableMap48.values();
        boolean boolean56 = strComparableMap41.containsValue((java.lang.Object) strComparableMap48);
        boolean boolean57 = strComparableMap36.equals((java.lang.Object) strComparableMap48);
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet59 = strComparableMap29.entrySet();
        java.lang.CharSequence charSequence62 = strComparableMap29.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean63 = strComparableMap18.equals((java.lang.Object) strComparableMap29);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet64 = strComparableMap29.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection8);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "{null=, =}" + "'", charSequence27, "{null=, =}");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection39);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet59);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strComparableSet64);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap1.containsKey((java.lang.Object) 1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence21 = strComparableMap13.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean24 = strComparableMap23.isEmpty();
        java.lang.Object obj25 = strComparableMap23.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap23.values();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.lang.String str28 = strComparableMap13.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean31 = strComparableMap30.isEmpty();
        java.lang.Object obj32 = strComparableMap30.clone();
        java.lang.CharSequence charSequence34 = strComparableMap30.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence36 = strComparableMap30.get((java.lang.Object) 100L);
        boolean boolean37 = strComparableMap13.containsValue((java.lang.Object) strComparableMap30);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap39.get((java.lang.Object) true);
        int int45 = strComparableMap39.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet46 = strComparableMap39.keySet();
        boolean boolean47 = strComparableMap13.equals((java.lang.Object) strComparableMap39);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable50 = null;
        java.lang.CharSequence charSequence52 = strComparableMap49.putIfAbsent(strComparable50, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence54 = strComparableMap49.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet55 = strComparableMap49.entrySet();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        java.lang.CharSequence charSequence61 = strComparableMap58.putIfAbsent(strComparable59, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence63 = strComparableMap58.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable66 = null;
        java.lang.CharSequence charSequence68 = strComparableMap65.putIfAbsent(strComparable66, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence70 = strComparableMap65.get((java.lang.Object) true);
        int int71 = strComparableMap65.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet72 = strComparableMap65.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap76 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean77 = strComparableMap65.equals((java.lang.Object) 0);
        strComparableMap58.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap65);
        java.lang.CharSequence charSequence80 = strComparableMap49.getOrDefault((java.lang.Object) strComparableMap65, (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence82 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap65, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence84 = strComparableMap1.remove((java.lang.Object) 1L);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{null=, =}" + "'", str28, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(strComparableSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNotNull(strComparableEntrySet55);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(strComparableSet72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "{null=}" + "'", charSequence80, "{null=}");
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "" + "'", charSequence82, "");
        org.junit.Assert.assertNull(charSequence84);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = strComparableMap10.get((java.lang.Object) true);
        int int16 = strComparableMap10.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap18.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap26.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence31 = strComparableMap26.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet32 = strComparableMap26.entrySet();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.lang.Class<?> wildcardClass34 = strComparableMap26.getClass();
        boolean boolean35 = strComparableMap10.containsKey((java.lang.Object) wildcardClass34);
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) strComparableMap10);
        java.lang.CharSequence charSequence38 = strComparableMap10.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.util.Collection<java.lang.CharSequence>, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>> charSequenceCollectionMap39 = new java.util.LinkedHashMap<java.util.Collection<java.lang.CharSequence>, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>>();
        java.lang.CharSequence charSequence40 = strComparableMap10.remove((java.lang.Object) charSequenceCollectionMap39);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNotNull(strComparableEntrySet32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNull(charSequence40);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        java.lang.String str8 = strComparableMap1.toString();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection9 = strComparableMap1.values();
        java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = null;
        // The following exception was thrown during execution in test generation
        try {
            strComparableMap1.putAll(strComparableMap10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.Map.size()\" because \"m\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection9);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        strComparableMap1.clear();
        boolean boolean5 = strComparableMap1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.Cloneable> genericDeclarationMap3 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.Cloneable>((int) (byte) -1, (float) '4', true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet52 = strComparableMap47.entrySet();
        java.lang.CharSequence charSequence55 = strComparableMap47.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet52);
        org.junit.Assert.assertNull(charSequence55);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.String str4 = strComparableMap3.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence10 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence10);
        java.lang.CharSequence charSequence14 = strComparableMap8.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap8.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = strComparableMap17.get((java.lang.Object) true);
        int int23 = strComparableMap17.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        java.lang.CharSequence charSequence28 = strComparableMap25.putIfAbsent(strComparable26, (java.lang.CharSequence) "");
        boolean boolean30 = strComparableMap25.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence33 = strComparableMap25.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence43 = strComparableMap37.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean44 = strComparableMap25.remove((java.lang.Object) strComparableMap35, (java.lang.Object) "hi!");
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap35);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence52 = strComparableMap47.get((java.lang.Object) true);
        int int53 = strComparableMap47.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        boolean boolean60 = strComparableMap55.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence63 = strComparableMap55.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable68 = null;
        java.lang.CharSequence charSequence70 = strComparableMap67.putIfAbsent(strComparable68, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence73 = strComparableMap67.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean74 = strComparableMap55.remove((java.lang.Object) strComparableMap65, (java.lang.Object) "hi!");
        strComparableMap47.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap65);
        strComparableMap35.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap65);
        java.lang.CharSequence charSequence79 = strComparableMap35.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet80 = strComparableMap35.keySet();
        java.lang.CharSequence charSequence82 = strComparableMap8.getOrDefault((java.lang.Object) strComparableSet80, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence84 = strComparableMap3.getOrDefault((java.lang.Object) strComparableSet80, (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertNotNull(strComparableSet80);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence84 + "' != '" + "{{}={null=, =, hi!=hi!}}" + "'", charSequence84, "{{}={null=, =, hi!=hi!}}");
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence6 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.lang.Object obj7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap3.getOrDefault(obj7, (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "{{}={null=, =, hi!=hi!}}" + "'", charSequence9, "{{}={null=, =, hi!=hi!}}");
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        boolean boolean8 = strComparableMap1.isEmpty();
        java.lang.CharSequence charSequence11 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean12 = strComparableMap1.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.lang.CharSequence charSequence5 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence5);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> charSequenceIterableMap1 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        boolean boolean14 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.CharSequence charSequence26 = strComparableMap2.get((java.lang.Object) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean33 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet37 = strComparableMap29.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap39.get((java.lang.Object) true);
        int int45 = strComparableMap39.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap47.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = strComparableMap55.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet61 = strComparableMap55.entrySet();
        strComparableMap47.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap55);
        java.lang.Class<?> wildcardClass63 = strComparableMap55.getClass();
        boolean boolean64 = strComparableMap39.containsKey((java.lang.Object) wildcardClass63);
        boolean boolean65 = strComparableMap29.equals((java.lang.Object) strComparableMap39);
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable69 = null;
        java.lang.CharSequence charSequence71 = strComparableMap68.putIfAbsent(strComparable69, (java.lang.CharSequence) "");
        boolean boolean73 = strComparableMap68.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence76 = strComparableMap68.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap78 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean79 = strComparableMap78.isEmpty();
        java.lang.Object obj80 = strComparableMap78.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection81 = strComparableMap78.values();
        strComparableMap68.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap78);
        java.lang.String str83 = strComparableMap68.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap85 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean86 = strComparableMap85.isEmpty();
        java.lang.Object obj87 = strComparableMap85.clone();
        java.lang.CharSequence charSequence89 = strComparableMap85.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence91 = strComparableMap85.get((java.lang.Object) 100L);
        boolean boolean92 = strComparableMap68.containsValue((java.lang.Object) strComparableMap85);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet93 = strComparableMap85.keySet();
        java.lang.CharSequence charSequence94 = strComparableMap22.remove((java.lang.Object) strComparableSet93);
        java.lang.CharSequence charSequence97 = strComparableMap22.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNotNull(strComparableSet37);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNotNull(strComparableEntrySet61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(charSequence76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{null=, =}" + "'", str83, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "{}");
        org.junit.Assert.assertNull(charSequence89);
        org.junit.Assert.assertNull(charSequence91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strComparableSet93);
        org.junit.Assert.assertNull(charSequence94);
        org.junit.Assert.assertNull(charSequence97);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int15 = strComparableMap14.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        int int21 = strComparableMap19.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection23 = strComparableMap19.values();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(charSequenceCollection23);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.lang.CharSequence charSequence10 = strComparableMap6.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence12 = strComparableMap6.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence14 = strComparableMap1.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet18 = strComparableMap1.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet26 = strComparableMap20.entrySet();
        java.lang.CharSequence charSequence29 = strComparableMap20.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence31 = strComparableMap1.getOrDefault((java.lang.Object) "", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNotNull(strComparableEntrySet18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNotNull(strComparableEntrySet26);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "{null=}" + "'", charSequence31, "{null=}");
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor, java.lang.reflect.AnnotatedElement> typeDescriptorMap2 = new java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor, java.lang.reflect.AnnotatedElement>(100, (float) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.lang.String str8 = strComparableMap1.toString();
        boolean boolean12 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.lang.String str13 = strComparableMap1.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{null=}" + "'", str13, "{null=}");
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.util.Collection<java.lang.CharSequence>> annotatedElementMap2 = new java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.util.Collection<java.lang.CharSequence>>(0, 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> genericDeclarationMap2 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((int) '4', (float) 2);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        int int8 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        java.lang.Object obj22 = strComparableMap16.clone();
        java.lang.CharSequence charSequence25 = strComparableMap16.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj26 = null;
        java.lang.CharSequence charSequence27 = strComparableMap16.get(obj26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap31.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap31.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet36 = strComparableMap31.keySet();
        boolean boolean37 = strComparableMap16.equals((java.lang.Object) strComparableMap31);
        java.lang.String str38 = strComparableMap16.toString();
        boolean boolean39 = strComparableMap10.equals((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        int int48 = strComparableMap41.size();
        java.lang.CharSequence charSequence49 = strComparableMap10.remove((java.lang.Object) strComparableMap41);
        boolean boolean50 = strComparableMap1.containsKey((java.lang.Object) strComparableMap10);
        int int51 = strComparableMap10.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{null=}");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNotNull(strComparableSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=, =}" + "'", str38, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap7.get((java.lang.Object) true);
        java.lang.Object obj13 = strComparableMap7.clone();
        java.lang.CharSequence charSequence16 = strComparableMap7.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj17 = null;
        java.lang.CharSequence charSequence18 = strComparableMap7.get(obj17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap22.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap22.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap22.keySet();
        boolean boolean28 = strComparableMap7.equals((java.lang.Object) strComparableMap22);
        java.lang.String str29 = strComparableMap7.toString();
        boolean boolean30 = strComparableMap1.equals((java.lang.Object) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        boolean boolean37 = strComparableMap32.containsValue((java.lang.Object) (short) 100);
        int int38 = strComparableMap32.size();
        int int39 = strComparableMap32.size();
        java.lang.CharSequence charSequence40 = strComparableMap1.remove((java.lang.Object) strComparableMap32);
        strComparableMap32.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertNotNull(strComparableSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{null=, =}" + "'", str29, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNull(charSequence40);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.lang.Object obj43 = strComparableMap37.clone();
        java.lang.CharSequence charSequence46 = strComparableMap37.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj47 = null;
        java.lang.CharSequence charSequence48 = strComparableMap37.get(obj47);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean53 = strComparableMap52.isEmpty();
        strComparableMap50.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet55 = strComparableMap52.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection56 = strComparableMap52.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet57 = strComparableMap52.keySet();
        boolean boolean58 = strComparableMap37.equals((java.lang.Object) strComparableMap52);
        java.lang.String str59 = strComparableMap37.toString();
        java.lang.CharSequence charSequence62 = strComparableMap37.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable65 = null;
        java.lang.CharSequence charSequence67 = strComparableMap64.putIfAbsent(strComparable65, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence69 = strComparableMap64.get((java.lang.Object) true);
        java.lang.Object obj70 = strComparableMap64.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable73 = null;
        java.lang.CharSequence charSequence75 = strComparableMap72.putIfAbsent(strComparable73, (java.lang.CharSequence) "");
        boolean boolean77 = strComparableMap72.containsValue((java.lang.Object) (short) 100);
        int int78 = strComparableMap72.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap79 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence81 = strComparableMap72.getOrDefault((java.lang.Object) strComparableMap79, (java.lang.CharSequence) "");
        java.lang.String str82 = strComparableMap72.toString();
        boolean boolean83 = strComparableMap37.remove(obj70, (java.lang.Object) str82);
        boolean boolean84 = strComparableMap27.equals((java.lang.Object) boolean83);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap86 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean87 = strComparableMap86.isEmpty();
        java.lang.Object obj88 = strComparableMap86.clone();
        java.lang.CharSequence charSequence90 = strComparableMap86.remove((java.lang.Object) true);
        boolean boolean94 = strComparableMap86.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        strComparableMap86.clear();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet96 = strComparableMap86.keySet();
        boolean boolean97 = strComparableMap27.containsKey((java.lang.Object) strComparableMap86);
        strComparableMap86.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{null=}");
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "" + "'", charSequence48, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet55);
        org.junit.Assert.assertNotNull(charSequenceCollection56);
        org.junit.Assert.assertNotNull(strComparableSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{null=, =}" + "'", str59, "{null=, =}");
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{null=}");
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertEquals("'" + charSequence81 + "' != '" + "" + "'", charSequence81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "{null=}" + "'", str82, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "{}");
        org.junit.Assert.assertNull(charSequence90);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(strComparableSet96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet15 = strComparableMap8.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean20 = strComparableMap8.equals((java.lang.Object) 0);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        strComparableMap8.clear();
        java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = null;
        // The following exception was thrown during execution in test generation
        try {
            strComparableMap8.putAll(strComparableMap23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.Map.size()\" because \"m\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(strComparableSet15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 2);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = strComparableMap17.get((java.lang.Object) true);
        java.lang.Object obj23 = strComparableMap17.clone();
        java.lang.CharSequence charSequence26 = strComparableMap17.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj27 = null;
        java.lang.CharSequence charSequence28 = strComparableMap17.get(obj27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean33 = strComparableMap32.isEmpty();
        strComparableMap30.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet35 = strComparableMap32.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection36 = strComparableMap32.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet37 = strComparableMap32.keySet();
        boolean boolean38 = strComparableMap17.equals((java.lang.Object) strComparableMap32);
        java.lang.String str39 = strComparableMap17.toString();
        java.lang.CharSequence charSequence42 = strComparableMap17.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean47 = strComparableMap46.isEmpty();
        strComparableMap44.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet49 = strComparableMap46.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        boolean boolean55 = strComparableMap46.equals((java.lang.Object) charSequence54);
        boolean boolean56 = strComparableMap11.remove((java.lang.Object) "{null=, =}", (java.lang.Object) charSequence54);
        int int57 = strComparableMap11.size();
        java.lang.CharSequence charSequence59 = strComparableMap11.remove((java.lang.Object) '#');
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{null=}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "" + "'", charSequence28, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet35);
        org.junit.Assert.assertNotNull(charSequenceCollection36);
        org.junit.Assert.assertNotNull(strComparableSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{null=, =}" + "'", str39, "{null=, =}");
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet49);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNull(charSequence59);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        boolean boolean58 = strComparableMap53.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean61 = strComparableMap60.isEmpty();
        java.lang.Object obj62 = strComparableMap60.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection63 = strComparableMap60.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable66 = null;
        java.lang.CharSequence charSequence68 = strComparableMap65.putIfAbsent(strComparable66, (java.lang.CharSequence) "");
        boolean boolean70 = strComparableMap65.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable73 = null;
        java.lang.CharSequence charSequence75 = strComparableMap72.putIfAbsent(strComparable73, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence77 = strComparableMap72.get((java.lang.Object) true);
        int int78 = strComparableMap72.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection79 = strComparableMap72.values();
        boolean boolean80 = strComparableMap65.containsValue((java.lang.Object) strComparableMap72);
        boolean boolean81 = strComparableMap60.equals((java.lang.Object) strComparableMap72);
        strComparableMap53.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap60);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet83 = strComparableMap53.entrySet();
        java.lang.CharSequence charSequence86 = strComparableMap53.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean87 = strComparableMap53.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap89 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap91 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean92 = strComparableMap91.isEmpty();
        strComparableMap89.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap91);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet94 = strComparableMap91.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection95 = strComparableMap91.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet96 = strComparableMap91.entrySet();
        java.lang.Object obj97 = strComparableMap91.clone();
        boolean boolean98 = strComparableMap47.remove((java.lang.Object) strComparableMap53, (java.lang.Object) strComparableMap91);
        strComparableMap53.clear();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection63);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet83);
        org.junit.Assert.assertNull(charSequence86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet94);
        org.junit.Assert.assertNotNull(charSequenceCollection95);
        org.junit.Assert.assertNotNull(strComparableEntrySet96);
        org.junit.Assert.assertNotNull(obj97);
        org.junit.Assert.assertEquals(obj97.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj97), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj97), "{}");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.io.Serializable, java.lang.reflect.AnnotatedElement> serializableMap3 = new java.util.LinkedHashMap<java.io.Serializable, java.lang.reflect.AnnotatedElement>((int) (short) 1, (float) (byte) -1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap21.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean28 = strComparableMap9.remove((java.lang.Object) strComparableMap19, (java.lang.Object) "hi!");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(10, (float) 100L);
        boolean boolean33 = strComparableMap19.equals((java.lang.Object) 100L);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap37.entrySet();
        java.lang.String str44 = strComparableMap37.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean47 = strComparableMap46.isEmpty();
        java.lang.Object obj48 = strComparableMap46.clone();
        java.lang.CharSequence charSequence50 = strComparableMap46.remove((java.lang.Object) true);
        boolean boolean54 = strComparableMap46.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean55 = strComparableMap37.equals((java.lang.Object) "");
        java.lang.CharSequence charSequence56 = strComparableMap1.remove((java.lang.Object) strComparableMap37);
        java.lang.CharSequence charSequence59 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{null=}" + "'", str44, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{}");
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertNull(charSequence59);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence26 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap18.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence41 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap39, (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence44 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap46.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap53);
        strComparableMap53.clear();
        java.lang.CharSequence charSequence56 = strComparableMap1.get((java.lang.Object) strComparableMap53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass57 = charSequence56.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=}" + "'", charSequence41, "{null=}");
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence56);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap13.get((java.lang.Object) true);
        int int19 = strComparableMap13.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap13.values();
        boolean boolean21 = strComparableMap6.containsValue((java.lang.Object) strComparableMap13);
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap13);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap24.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        int int37 = strComparableMap31.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet38 = strComparableMap31.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean43 = strComparableMap31.equals((java.lang.Object) 0);
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        boolean boolean45 = strComparableMap1.containsValue((java.lang.Object) strComparableMap24);
        java.lang.Object obj46 = null;
        boolean boolean47 = strComparableMap24.equals(obj46);
        java.lang.Class<?> wildcardClass48 = strComparableMap24.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(strComparableSet38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap13.get((java.lang.Object) true);
        int int19 = strComparableMap13.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap13.values();
        boolean boolean21 = strComparableMap6.containsValue((java.lang.Object) strComparableMap13);
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap13);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap24.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        int int37 = strComparableMap31.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet38 = strComparableMap31.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean43 = strComparableMap31.equals((java.lang.Object) 0);
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        boolean boolean45 = strComparableMap1.containsValue((java.lang.Object) strComparableMap24);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        boolean boolean50 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean55 = strComparableMap54.isEmpty();
        strComparableMap52.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap54);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet57 = strComparableMap54.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection58 = strComparableMap54.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet59 = strComparableMap54.keySet();
        java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>> charSequenceIterableMap60 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>>();
        java.lang.CharSequence charSequence61 = strComparableMap54.remove((java.lang.Object) charSequenceIterableMap60);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (float) (short) 10);
        java.lang.CharSequence charSequence67 = strComparableMap64.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        boolean boolean68 = strComparableMap54.containsValue((java.lang.Object) charSequence67);
        java.lang.CharSequence charSequence69 = strComparableMap1.remove((java.lang.Object) strComparableMap54);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(strComparableSet38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet57);
        org.junit.Assert.assertNotNull(charSequenceCollection58);
        org.junit.Assert.assertNotNull(strComparableSet59);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(charSequence69);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        int int13 = strComparableMap1.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.io.Serializable> strComparableMapMap3 = new java.util.LinkedHashMap<java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.io.Serializable>((int) (short) 0, (float) (-1), false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) -1, (float) 100, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((-1), (float) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        boolean boolean58 = strComparableMap53.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean61 = strComparableMap60.isEmpty();
        java.lang.Object obj62 = strComparableMap60.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection63 = strComparableMap60.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable66 = null;
        java.lang.CharSequence charSequence68 = strComparableMap65.putIfAbsent(strComparable66, (java.lang.CharSequence) "");
        boolean boolean70 = strComparableMap65.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable73 = null;
        java.lang.CharSequence charSequence75 = strComparableMap72.putIfAbsent(strComparable73, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence77 = strComparableMap72.get((java.lang.Object) true);
        int int78 = strComparableMap72.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection79 = strComparableMap72.values();
        boolean boolean80 = strComparableMap65.containsValue((java.lang.Object) strComparableMap72);
        boolean boolean81 = strComparableMap60.equals((java.lang.Object) strComparableMap72);
        strComparableMap53.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap60);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet83 = strComparableMap53.entrySet();
        java.lang.CharSequence charSequence86 = strComparableMap53.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean87 = strComparableMap53.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap89 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap91 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean92 = strComparableMap91.isEmpty();
        strComparableMap89.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap91);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet94 = strComparableMap91.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection95 = strComparableMap91.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet96 = strComparableMap91.entrySet();
        java.lang.Object obj97 = strComparableMap91.clone();
        boolean boolean98 = strComparableMap47.remove((java.lang.Object) strComparableMap53, (java.lang.Object) strComparableMap91);
        java.lang.Object obj99 = strComparableMap91.clone();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection63);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet83);
        org.junit.Assert.assertNull(charSequence86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet94);
        org.junit.Assert.assertNotNull(charSequenceCollection95);
        org.junit.Assert.assertNotNull(strComparableEntrySet96);
        org.junit.Assert.assertNotNull(obj97);
        org.junit.Assert.assertEquals(obj97.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj97), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj97), "{}");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(obj99);
        org.junit.Assert.assertEquals(obj99.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj99), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj99), "{}");
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet19 = strComparableMap16.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap16.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet21 = strComparableMap16.keySet();
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap16);
        java.lang.String str23 = strComparableMap1.toString();
        java.lang.Object obj24 = strComparableMap1.clone();
        java.lang.Class<?> wildcardClass25 = strComparableMap1.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet19);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertNotNull(strComparableSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{null=, =}" + "'", str23, "{null=, =}");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{null=, =}");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.Constable> comparableEntrySetMap3 = new java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.Constable>((int) (byte) 0, (float) (short) -1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean18 = strComparableMap17.isEmpty();
        java.lang.Object obj19 = strComparableMap17.clone();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.CharSequence charSequence22 = strComparableMap11.getOrDefault((java.lang.Object) wildcardClass20, (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet23 = strComparableMap11.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertNotNull(strComparableEntrySet23);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet52 = strComparableMap47.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence59 = strComparableMap54.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet60 = strComparableMap54.entrySet();
        java.lang.String str61 = strComparableMap54.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean64 = strComparableMap63.isEmpty();
        java.lang.Object obj65 = strComparableMap63.clone();
        java.lang.CharSequence charSequence67 = strComparableMap63.remove((java.lang.Object) true);
        boolean boolean71 = strComparableMap63.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean72 = strComparableMap54.equals((java.lang.Object) "");
        strComparableMap47.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap54);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap75 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable76 = null;
        java.lang.CharSequence charSequence78 = strComparableMap75.putIfAbsent(strComparable76, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence81 = strComparableMap75.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap83 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable84 = null;
        java.lang.CharSequence charSequence86 = strComparableMap83.putIfAbsent(strComparable84, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence88 = strComparableMap83.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet89 = strComparableMap83.entrySet();
        strComparableMap75.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap83);
        java.lang.Class<?> wildcardClass91 = strComparableMap83.getClass();
        boolean boolean92 = strComparableMap47.containsValue((java.lang.Object) wildcardClass91);
        int int93 = strComparableMap47.size();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet52);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertNotNull(strComparableEntrySet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{null=}" + "'", str61, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "{}");
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(charSequence78);
        org.junit.Assert.assertNull(charSequence81);
        org.junit.Assert.assertNull(charSequence86);
        org.junit.Assert.assertNull(charSequence88);
        org.junit.Assert.assertNotNull(strComparableEntrySet89);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        int int16 = strComparableMap11.size();
        java.lang.CharSequence charSequence19 = strComparableMap11.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        boolean boolean20 = strComparableMap11.isEmpty();
        int int21 = strComparableMap11.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence45 = strComparableMap39.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean46 = strComparableMap27.remove((java.lang.Object) strComparableMap37, (java.lang.Object) "hi!");
        boolean boolean47 = strComparableMap1.containsKey((java.lang.Object) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap50.get((java.lang.Object) true);
        int int56 = strComparableMap50.size();
        java.lang.CharSequence charSequence58 = strComparableMap50.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence61 = strComparableMap50.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str62 = strComparableMap50.toString();
        java.lang.CharSequence charSequence63 = strComparableMap48.remove((java.lang.Object) strComparableMap50);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection64 = strComparableMap48.values();
        int int65 = strComparableMap48.size();
        int int66 = strComparableMap48.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{null=, =}" + "'", str62, "{null=, =}");
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNotNull(charSequenceCollection64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable4 = null;
        java.lang.CharSequence charSequence6 = strComparableMap3.putIfAbsent(strComparable4, (java.lang.CharSequence) "");
        boolean boolean8 = strComparableMap3.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence11 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap3.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean21 = strComparableMap1.containsKey((java.lang.Object) charSequence20);
        java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.ConstantDesc> comparableEntrySetMap22 = new java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.ConstantDesc>();
        java.lang.CharSequence charSequence23 = strComparableMap1.get((java.lang.Object) comparableEntrySetMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(1, (float) 1);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet28 = strComparableMap1.entrySet();
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet28);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 0, (float) (short) 10, false);
        strComparableMap3.clear();
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap7.get((java.lang.Object) true);
        java.lang.Object obj13 = strComparableMap7.clone();
        java.lang.CharSequence charSequence16 = strComparableMap7.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj17 = null;
        java.lang.CharSequence charSequence18 = strComparableMap7.get(obj17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap22.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap22.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap22.keySet();
        boolean boolean28 = strComparableMap7.equals((java.lang.Object) strComparableMap22);
        java.lang.String str29 = strComparableMap7.toString();
        boolean boolean30 = strComparableMap1.equals((java.lang.Object) strComparableMap7);
        int int31 = strComparableMap7.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertNotNull(strComparableSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{null=, =}" + "'", str29, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean20 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection40 = strComparableMap37.values();
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.lang.String str42 = strComparableMap27.toString();
        boolean boolean43 = strComparableMap16.remove((java.lang.Object) strComparableMap25, (java.lang.Object) str42);
        boolean boolean44 = strComparableMap13.equals((java.lang.Object) strComparableMap25);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        boolean boolean51 = strComparableMap46.containsValue((java.lang.Object) (short) 100);
        int int52 = strComparableMap46.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence55 = strComparableMap46.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        java.lang.Object obj59 = strComparableMap57.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection60 = strComparableMap57.values();
        boolean boolean61 = strComparableMap25.remove((java.lang.Object) strComparableMap53, (java.lang.Object) strComparableMap57);
        boolean boolean62 = strComparableMap1.equals((java.lang.Object) strComparableMap57);
        boolean boolean66 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "{null=}");
        int int67 = strComparableMap1.size();
        java.lang.CharSequence charSequence70 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{null=, =}" + "'", str42, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "" + "'", charSequence55, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNull(charSequence70);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection8 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap10.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap18.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.CharSequence charSequence27 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap18, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean30 = strComparableMap29.isEmpty();
        java.lang.Object obj31 = strComparableMap29.clone();
        java.lang.CharSequence charSequence33 = strComparableMap29.remove((java.lang.Object) true);
        boolean boolean37 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean38 = strComparableMap1.containsKey((java.lang.Object) strComparableMap29);
        java.lang.CharSequence charSequence41 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection8);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "{null=, =}" + "'", charSequence27, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(charSequence41);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int15 = strComparableMap14.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        int int21 = strComparableMap19.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.lang.CharSequence charSequence25 = strComparableMap19.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap34);
        java.lang.CharSequence charSequence38 = strComparableMap34.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        strComparableMap19.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap34);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence38);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap12.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet26 = strComparableMap20.entrySet();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.lang.CharSequence charSequence29 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap20, (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence31 = null;
        java.lang.CharSequence charSequence32 = strComparableMap20.put((java.lang.Comparable<java.lang.String>) "{null=}", charSequence31);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNotNull(strComparableEntrySet26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "{null=, =}" + "'", charSequence29, "{null=, =}");
        org.junit.Assert.assertNull(charSequence32);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence5 = null;
        java.lang.CharSequence charSequence6 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence5);
        java.lang.CharSequence charSequence9 = strComparableMap3.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet10 = strComparableMap3.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap12.get((java.lang.Object) true);
        int int18 = strComparableMap12.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        boolean boolean25 = strComparableMap20.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence28 = strComparableMap20.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence38 = strComparableMap32.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean39 = strComparableMap20.remove((java.lang.Object) strComparableMap30, (java.lang.Object) "hi!");
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap30);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable43 = null;
        java.lang.CharSequence charSequence45 = strComparableMap42.putIfAbsent(strComparable43, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence47 = strComparableMap42.get((java.lang.Object) true);
        int int48 = strComparableMap42.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        boolean boolean55 = strComparableMap50.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence58 = strComparableMap50.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable63 = null;
        java.lang.CharSequence charSequence65 = strComparableMap62.putIfAbsent(strComparable63, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence68 = strComparableMap62.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean69 = strComparableMap50.remove((java.lang.Object) strComparableMap60, (java.lang.Object) "hi!");
        strComparableMap42.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap60);
        strComparableMap30.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap60);
        java.lang.CharSequence charSequence74 = strComparableMap30.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet75 = strComparableMap30.keySet();
        java.lang.CharSequence charSequence77 = strComparableMap3.getOrDefault((java.lang.Object) strComparableSet75, (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet78 = strComparableMap3.entrySet();
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(strComparableEntrySet10);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertNotNull(strComparableSet75);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertNotNull(strComparableEntrySet78);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean10 = strComparableMap1.isEmpty();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet11 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.ConstantDesc> comparableEntrySetMap12 = new java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.ConstantDesc>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence17 = strComparableMap14.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap21);
        java.lang.CharSequence charSequence25 = strComparableMap21.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        boolean boolean26 = strComparableMap1.remove((java.lang.Object) comparableEntrySetMap12, (java.lang.Object) "{}");
        strComparableMap1.clear();
        java.lang.CharSequence charSequence30 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strComparableSet11);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence30);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection8 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap10.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap18.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.CharSequence charSequence27 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap18, (java.lang.CharSequence) "{null=, =}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet28 = strComparableMap18.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean33 = strComparableMap32.isEmpty();
        strComparableMap30.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet35 = strComparableMap32.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection36 = strComparableMap32.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet37 = strComparableMap32.keySet();
        java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>> charSequenceIterableMap38 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>>();
        java.lang.CharSequence charSequence39 = strComparableMap32.remove((java.lang.Object) charSequenceIterableMap38);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (float) (short) 10);
        java.lang.CharSequence charSequence45 = strComparableMap42.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        boolean boolean46 = strComparableMap32.containsValue((java.lang.Object) charSequence45);
        java.lang.Object obj47 = strComparableMap32.clone();
        java.lang.CharSequence charSequence48 = strComparableMap18.get((java.lang.Object) strComparableMap32);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection8);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "{null=, =}" + "'", charSequence27, "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableSet28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet35);
        org.junit.Assert.assertNotNull(charSequenceCollection36);
        org.junit.Assert.assertNotNull(strComparableSet37);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{}");
        org.junit.Assert.assertNull(charSequence48);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(100);
        java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            strComparableMap1.putAll(strComparableMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.Map.size()\" because \"m\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0);
        boolean boolean2 = strComparableMap1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.io.Serializable> strComparableMapMap2 = new java.util.LinkedHashMap<java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.io.Serializable>((-1), (float) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.CharSequence charSequence4 = strComparableMap1.get((java.lang.Object) (byte) 1);
        java.lang.CharSequence charSequence7 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=, =}");
        java.lang.Class<?> wildcardClass8 = strComparableMap1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet6 = strComparableMap3.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection7 = strComparableMap3.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap3.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        strComparableMap10.clear();
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable24 = null;
        java.lang.CharSequence charSequence26 = strComparableMap23.putIfAbsent(strComparable24, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence28 = strComparableMap23.get((java.lang.Object) true);
        int int29 = strComparableMap23.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap23.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence38 = strComparableMap32.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable41 = null;
        java.lang.CharSequence charSequence43 = strComparableMap40.putIfAbsent(strComparable41, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence45 = strComparableMap40.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet46 = strComparableMap40.entrySet();
        strComparableMap32.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap40);
        java.lang.CharSequence charSequence49 = strComparableMap23.getOrDefault((java.lang.Object) strComparableMap40, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean52 = strComparableMap51.isEmpty();
        java.lang.Object obj53 = strComparableMap51.clone();
        java.lang.CharSequence charSequence55 = strComparableMap51.remove((java.lang.Object) true);
        boolean boolean59 = strComparableMap51.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean61 = strComparableMap51.containsValue((java.lang.Object) (-1));
        strComparableMap23.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        java.lang.CharSequence charSequence63 = strComparableMap3.remove((java.lang.Object) strComparableMap23);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet6);
        org.junit.Assert.assertNotNull(charSequenceCollection7);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertNotNull(strComparableEntrySet46);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "{null=, =}" + "'", charSequence49, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(charSequence63);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence6 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap3.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.lang.Object obj15 = strComparableMap9.clone();
        java.lang.CharSequence charSequence18 = strComparableMap9.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj19 = null;
        java.lang.CharSequence charSequence20 = strComparableMap9.get(obj19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean25 = strComparableMap24.isEmpty();
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap24);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet27 = strComparableMap24.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection28 = strComparableMap24.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet29 = strComparableMap24.keySet();
        boolean boolean30 = strComparableMap9.equals((java.lang.Object) strComparableMap24);
        java.lang.String str31 = strComparableMap9.toString();
        java.lang.CharSequence charSequence34 = strComparableMap9.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence41 = strComparableMap36.get((java.lang.Object) true);
        java.lang.Object obj42 = strComparableMap36.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable45 = null;
        java.lang.CharSequence charSequence47 = strComparableMap44.putIfAbsent(strComparable45, (java.lang.CharSequence) "");
        boolean boolean49 = strComparableMap44.containsValue((java.lang.Object) (short) 100);
        int int50 = strComparableMap44.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence53 = strComparableMap44.getOrDefault((java.lang.Object) strComparableMap51, (java.lang.CharSequence) "");
        java.lang.String str54 = strComparableMap44.toString();
        boolean boolean55 = strComparableMap9.remove(obj42, (java.lang.Object) str54);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        java.lang.CharSequence charSequence61 = strComparableMap58.putIfAbsent(strComparable59, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence63 = strComparableMap58.get((java.lang.Object) true);
        int int64 = strComparableMap58.size();
        java.lang.CharSequence charSequence66 = strComparableMap58.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence69 = strComparableMap58.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj70 = strComparableMap58.clone();
        boolean boolean71 = strComparableMap3.remove((java.lang.Object) strComparableMap56, (java.lang.Object) strComparableMap58);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet72 = strComparableMap56.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap76 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) ' ', (float) 100L, false);
        java.lang.CharSequence charSequence77 = strComparableMap56.remove((java.lang.Object) false);
        java.lang.Class<?> wildcardClass78 = strComparableMap56.getClass();
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{null=}");
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "" + "'", charSequence20, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet27);
        org.junit.Assert.assertNotNull(charSequenceCollection28);
        org.junit.Assert.assertNotNull(strComparableSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{null=, =}" + "'", str31, "{null=, =}");
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{null=}");
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "" + "'", charSequence53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{null=}" + "'", str54, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strComparableSet72);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence21 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> constantDescMap23 = new java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((int) (short) 0);
        java.util.LinkedHashMap<java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.String> strComparableMapMap27 = new java.util.LinkedHashMap<java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.String>((int) (byte) 10, (float) (short) 1, false);
        boolean boolean28 = strComparableMap1.remove((java.lang.Object) (short) 0, (java.lang.Object) false);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "{null=}" + "'", charSequence21, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.constant.ConstantDesc> genericDeclarationMap1 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.constant.ConstantDesc>((int) ' ');
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        boolean boolean58 = strComparableMap53.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean61 = strComparableMap60.isEmpty();
        java.lang.Object obj62 = strComparableMap60.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection63 = strComparableMap60.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable66 = null;
        java.lang.CharSequence charSequence68 = strComparableMap65.putIfAbsent(strComparable66, (java.lang.CharSequence) "");
        boolean boolean70 = strComparableMap65.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable73 = null;
        java.lang.CharSequence charSequence75 = strComparableMap72.putIfAbsent(strComparable73, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence77 = strComparableMap72.get((java.lang.Object) true);
        int int78 = strComparableMap72.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection79 = strComparableMap72.values();
        boolean boolean80 = strComparableMap65.containsValue((java.lang.Object) strComparableMap72);
        boolean boolean81 = strComparableMap60.equals((java.lang.Object) strComparableMap72);
        strComparableMap53.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap60);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet83 = strComparableMap53.entrySet();
        java.lang.CharSequence charSequence86 = strComparableMap53.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean87 = strComparableMap53.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap89 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap91 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean92 = strComparableMap91.isEmpty();
        strComparableMap89.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap91);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet94 = strComparableMap91.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection95 = strComparableMap91.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet96 = strComparableMap91.entrySet();
        java.lang.Object obj97 = strComparableMap91.clone();
        boolean boolean98 = strComparableMap47.remove((java.lang.Object) strComparableMap53, (java.lang.Object) strComparableMap91);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection99 = strComparableMap91.values();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection63);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet83);
        org.junit.Assert.assertNull(charSequence86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet94);
        org.junit.Assert.assertNotNull(charSequenceCollection95);
        org.junit.Assert.assertNotNull(strComparableEntrySet96);
        org.junit.Assert.assertNotNull(obj97);
        org.junit.Assert.assertEquals(obj97.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj97), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj97), "{}");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection99);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.lang.CharSequence charSequence38 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass39 = charSequence38.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence38);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>, java.lang.reflect.AnnotatedElement> wildcardClassOfFieldMap2 = new java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>, java.lang.reflect.AnnotatedElement>(0, 10.0f);
        java.lang.Class<?> wildcardClass3 = wildcardClassOfFieldMap2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap37.entrySet();
        java.lang.String str44 = strComparableMap37.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean47 = strComparableMap46.isEmpty();
        java.lang.Object obj48 = strComparableMap46.clone();
        java.lang.CharSequence charSequence50 = strComparableMap46.remove((java.lang.Object) true);
        boolean boolean54 = strComparableMap46.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean55 = strComparableMap37.equals((java.lang.Object) "");
        java.lang.CharSequence charSequence56 = strComparableMap1.remove((java.lang.Object) strComparableMap37);
        java.lang.CharSequence charSequence59 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        boolean boolean63 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{null=}" + "'", str44, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{}");
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "" + "'", charSequence59, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet52 = strComparableMap47.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence59 = strComparableMap54.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet60 = strComparableMap54.entrySet();
        java.lang.String str61 = strComparableMap54.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean64 = strComparableMap63.isEmpty();
        java.lang.Object obj65 = strComparableMap63.clone();
        java.lang.CharSequence charSequence67 = strComparableMap63.remove((java.lang.Object) true);
        boolean boolean71 = strComparableMap63.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean72 = strComparableMap54.equals((java.lang.Object) "");
        strComparableMap47.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap54);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet74 = strComparableMap47.keySet();
        strComparableMap47.clear();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet52);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertNotNull(strComparableEntrySet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{null=}" + "'", str61, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "{}");
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strComparableSet74);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Object, java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> objMap2 = new java.util.LinkedHashMap<java.lang.Object, java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((int) (short) 10, (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (float) (short) 10);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection3 = strComparableMap2.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable6 = null;
        java.lang.CharSequence charSequence8 = strComparableMap5.putIfAbsent(strComparable6, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence10 = strComparableMap5.get((java.lang.Object) true);
        int int11 = strComparableMap5.size();
        java.lang.CharSequence charSequence13 = strComparableMap5.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence16 = strComparableMap5.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str17 = strComparableMap5.toString();
        boolean boolean21 = strComparableMap5.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.CharSequence charSequence22 = strComparableMap2.remove((java.lang.Object) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNotNull(charSequenceCollection3);
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{null=, =}" + "'", str17, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(charSequence22);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4', (float) (short) 1);
        strComparableMap2.clear();
        java.lang.CharSequence charSequence6 = strComparableMap2.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNull(charSequence6);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        boolean boolean17 = strComparableMap12.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence20 = strComparableMap12.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        java.lang.Object obj24 = strComparableMap22.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection25 = strComparableMap22.values();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.String str27 = strComparableMap12.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean30 = strComparableMap29.isEmpty();
        java.lang.Object obj31 = strComparableMap29.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection32 = strComparableMap29.values();
        java.lang.CharSequence charSequence33 = strComparableMap12.get((java.lang.Object) strComparableMap29);
        boolean boolean34 = strComparableMap7.equals((java.lang.Object) strComparableMap12);
        strComparableMap12.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{null=, =}" + "'", str27, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection32);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        int int8 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        java.lang.Object obj22 = strComparableMap16.clone();
        java.lang.CharSequence charSequence25 = strComparableMap16.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj26 = null;
        java.lang.CharSequence charSequence27 = strComparableMap16.get(obj26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap31.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap31.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet36 = strComparableMap31.keySet();
        boolean boolean37 = strComparableMap16.equals((java.lang.Object) strComparableMap31);
        java.lang.String str38 = strComparableMap16.toString();
        boolean boolean39 = strComparableMap10.equals((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        int int48 = strComparableMap41.size();
        java.lang.CharSequence charSequence49 = strComparableMap10.remove((java.lang.Object) strComparableMap41);
        boolean boolean50 = strComparableMap1.containsKey((java.lang.Object) strComparableMap10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        boolean boolean57 = strComparableMap52.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence60 = strComparableMap52.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean63 = strComparableMap62.isEmpty();
        java.lang.Object obj64 = strComparableMap62.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection65 = strComparableMap62.values();
        strComparableMap52.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean69 = strComparableMap68.isEmpty();
        java.lang.Object obj70 = strComparableMap68.clone();
        java.lang.Class<?> wildcardClass71 = obj70.getClass();
        java.lang.CharSequence charSequence73 = strComparableMap62.getOrDefault((java.lang.Object) wildcardClass71, (java.lang.CharSequence) "hi!");
        boolean boolean74 = strComparableMap10.containsValue((java.lang.Object) "hi!");
        boolean boolean78 = strComparableMap10.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{null=}");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNotNull(strComparableSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=, =}" + "'", str38, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{}");
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertEquals("'" + charSequence73 + "' != '" + "hi!" + "'", charSequence73, "hi!");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean22 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence25 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int26 = strComparableMap18.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.Class<?> wildcardClass28 = strComparableMap18.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet6 = strComparableMap3.entrySet();
        java.lang.Class<?> wildcardClass7 = strComparableEntrySet6.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap21.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean28 = strComparableMap9.remove((java.lang.Object) strComparableMap19, (java.lang.Object) "hi!");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        int int37 = strComparableMap31.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        boolean boolean44 = strComparableMap39.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence47 = strComparableMap39.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence57 = strComparableMap51.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean58 = strComparableMap39.remove((java.lang.Object) strComparableMap49, (java.lang.Object) "hi!");
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        strComparableMap19.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        java.lang.CharSequence charSequence63 = strComparableMap19.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet68 = strComparableMap67.entrySet();
        boolean boolean69 = strComparableMap19.equals((java.lang.Object) strComparableEntrySet68);
        java.lang.CharSequence charSequence72 = strComparableMap19.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNotNull(strComparableEntrySet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(charSequence72);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet6 = strComparableMap3.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection7 = strComparableMap3.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap3.keySet();
        java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>> charSequenceIterableMap9 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>>();
        java.lang.CharSequence charSequence10 = strComparableMap3.remove((java.lang.Object) charSequenceIterableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (float) (short) 10);
        java.lang.CharSequence charSequence16 = strComparableMap13.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        boolean boolean17 = strComparableMap3.containsValue((java.lang.Object) charSequence16);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection18 = strComparableMap3.values();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet6);
        org.junit.Assert.assertNotNull(charSequenceCollection7);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection18);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet15 = strComparableMap8.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean20 = strComparableMap8.equals((java.lang.Object) 0);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable24 = null;
        java.lang.CharSequence charSequence26 = strComparableMap23.putIfAbsent(strComparable24, (java.lang.CharSequence) "");
        boolean boolean28 = strComparableMap23.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence31 = strComparableMap23.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean33 = strComparableMap23.containsKey((java.lang.Object) 1);
        java.lang.Class<?> wildcardClass34 = strComparableMap23.getClass();
        boolean boolean35 = strComparableMap8.containsKey((java.lang.Object) strComparableMap23);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        boolean boolean42 = strComparableMap37.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence45 = strComparableMap37.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence48 = strComparableMap37.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection49 = strComparableMap37.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence56 = strComparableMap51.get((java.lang.Object) true);
        int int57 = strComparableMap51.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection58 = strComparableMap51.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable61 = null;
        java.lang.CharSequence charSequence63 = strComparableMap60.putIfAbsent(strComparable61, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence66 = strComparableMap60.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable69 = null;
        java.lang.CharSequence charSequence71 = strComparableMap68.putIfAbsent(strComparable69, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence73 = strComparableMap68.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet74 = strComparableMap68.entrySet();
        strComparableMap60.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap68);
        java.lang.CharSequence charSequence77 = strComparableMap51.getOrDefault((java.lang.Object) strComparableMap68, (java.lang.CharSequence) "{null=, =}");
        strComparableMap37.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        strComparableMap8.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor, java.lang.Iterable<java.lang.CharSequence>> typeDescriptorMap81 = new java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor, java.lang.Iterable<java.lang.CharSequence>>(0);
        boolean boolean82 = strComparableMap8.containsValue((java.lang.Object) typeDescriptorMap81);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(strComparableSet15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection49);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection58);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertNotNull(strComparableEntrySet74);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "{null=, =}" + "'", charSequence77, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.Object obj5 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence15 = strComparableMap7.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean18 = strComparableMap17.isEmpty();
        java.lang.Object obj19 = strComparableMap17.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap17.values();
        strComparableMap7.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap17);
        java.lang.String str22 = strComparableMap7.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean25 = strComparableMap24.isEmpty();
        java.lang.Object obj26 = strComparableMap24.clone();
        java.lang.CharSequence charSequence28 = strComparableMap24.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence30 = strComparableMap24.get((java.lang.Object) 100L);
        boolean boolean31 = strComparableMap7.containsValue((java.lang.Object) strComparableMap24);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable34 = null;
        java.lang.CharSequence charSequence36 = strComparableMap33.putIfAbsent(strComparable34, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence38 = strComparableMap33.get((java.lang.Object) true);
        int int39 = strComparableMap33.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet40 = strComparableMap33.keySet();
        boolean boolean41 = strComparableMap7.equals((java.lang.Object) strComparableMap33);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable44 = null;
        java.lang.CharSequence charSequence46 = strComparableMap43.putIfAbsent(strComparable44, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence48 = strComparableMap43.get((java.lang.Object) true);
        java.lang.Object obj49 = strComparableMap43.clone();
        java.lang.CharSequence charSequence52 = strComparableMap43.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj53 = null;
        java.lang.CharSequence charSequence54 = strComparableMap43.get(obj53);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean59 = strComparableMap58.isEmpty();
        strComparableMap56.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap58);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet61 = strComparableMap58.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection62 = strComparableMap58.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet63 = strComparableMap58.keySet();
        boolean boolean64 = strComparableMap43.equals((java.lang.Object) strComparableMap58);
        java.lang.String str65 = strComparableMap43.toString();
        java.lang.CharSequence charSequence68 = strComparableMap43.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable71 = null;
        java.lang.CharSequence charSequence73 = strComparableMap70.putIfAbsent(strComparable71, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence75 = strComparableMap70.get((java.lang.Object) true);
        java.lang.Object obj76 = strComparableMap70.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap78 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable79 = null;
        java.lang.CharSequence charSequence81 = strComparableMap78.putIfAbsent(strComparable79, (java.lang.CharSequence) "");
        boolean boolean83 = strComparableMap78.containsValue((java.lang.Object) (short) 100);
        int int84 = strComparableMap78.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap85 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence87 = strComparableMap78.getOrDefault((java.lang.Object) strComparableMap85, (java.lang.CharSequence) "");
        java.lang.String str88 = strComparableMap78.toString();
        boolean boolean89 = strComparableMap43.remove(obj76, (java.lang.Object) str88);
        boolean boolean90 = strComparableMap33.equals((java.lang.Object) boolean89);
        java.lang.CharSequence charSequence91 = strComparableMap1.remove((java.lang.Object) boolean90);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{null=, =}" + "'", str22, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{}");
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(strComparableSet40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{null=}");
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "" + "'", charSequence54, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet61);
        org.junit.Assert.assertNotNull(charSequenceCollection62);
        org.junit.Assert.assertNotNull(strComparableSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{null=, =}" + "'", str65, "{null=, =}");
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "{null=}");
        org.junit.Assert.assertNull(charSequence81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertEquals("'" + charSequence87 + "' != '" + "" + "'", charSequence87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "{null=}" + "'", str88, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(charSequence91);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence21 = strComparableMap13.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean24 = strComparableMap23.isEmpty();
        java.lang.Object obj25 = strComparableMap23.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap23.values();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.lang.String str28 = strComparableMap13.toString();
        boolean boolean29 = strComparableMap2.remove((java.lang.Object) strComparableMap11, (java.lang.Object) str28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet37 = strComparableMap31.entrySet();
        java.lang.String str38 = strComparableMap31.toString();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection39 = strComparableMap31.values();
        boolean boolean40 = strComparableMap2.equals((java.lang.Object) strComparableMap31);
        boolean boolean44 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet45 = strComparableMap2.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence52 = strComparableMap47.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet53 = strComparableMap47.entrySet();
        java.lang.CharSequence charSequence56 = strComparableMap47.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence59 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, =}");
        strComparableMap2.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap47);
        java.lang.CharSequence charSequence63 = strComparableMap47.put((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{null=, =}" + "'", str28, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNotNull(strComparableEntrySet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=}" + "'", str38, "{null=}");
        org.junit.Assert.assertNotNull(charSequenceCollection39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strComparableSet45);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNotNull(strComparableEntrySet53);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertNull(charSequence63);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence10 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap8, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationMap13 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>(2, (float) 'a');
        boolean boolean14 = strComparableMap1.equals((java.lang.Object) 'a');
        java.lang.Object obj15 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean18 = strComparableMap17.isEmpty();
        java.lang.Object obj19 = strComparableMap17.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean24 = strComparableMap23.isEmpty();
        strComparableMap21.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap17.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "hi!");
        boolean boolean33 = strComparableMap1.containsValue((java.lang.Object) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{null=}");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap1.isEmpty();
        java.lang.Object obj12 = strComparableMap1.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{null=, =}");
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence14 = strComparableMap6.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap18.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean25 = strComparableMap6.remove((java.lang.Object) strComparableMap16, (java.lang.Object) "hi!");
        boolean boolean26 = strComparableMap1.containsValue((java.lang.Object) boolean25);
        java.lang.CharSequence charSequence29 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        java.util.LinkedHashMap<java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableMapMap1 = new java.util.LinkedHashMap<java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((int) (short) 1);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.lang.Object obj43 = strComparableMap37.clone();
        java.lang.String str44 = strComparableMap37.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        int int52 = strComparableMap46.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = strComparableMap54.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable63 = null;
        java.lang.CharSequence charSequence65 = strComparableMap62.putIfAbsent(strComparable63, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence67 = strComparableMap62.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet68 = strComparableMap62.entrySet();
        strComparableMap54.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        java.lang.Class<?> wildcardClass70 = strComparableMap62.getClass();
        boolean boolean71 = strComparableMap46.containsKey((java.lang.Object) wildcardClass70);
        boolean boolean72 = strComparableMap37.containsValue((java.lang.Object) strComparableMap46);
        java.lang.CharSequence charSequence73 = strComparableMap27.get((java.lang.Object) strComparableMap46);
        java.lang.String str74 = strComparableMap46.toString();
        boolean boolean75 = strComparableMap46.isEmpty();
        boolean boolean76 = strComparableMap46.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{null=}");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{null=}" + "'", str44, "{null=}");
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNotNull(strComparableEntrySet68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{null=}" + "'", str74, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean15 = strComparableMap14.isEmpty();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap14);
        strComparableMap8.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap14);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        boolean boolean24 = strComparableMap19.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence27 = strComparableMap19.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean30 = strComparableMap29.isEmpty();
        java.lang.Object obj31 = strComparableMap29.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection32 = strComparableMap29.values();
        strComparableMap19.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.lang.String str34 = strComparableMap19.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean37 = strComparableMap36.isEmpty();
        java.lang.Object obj38 = strComparableMap36.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection39 = strComparableMap36.values();
        java.lang.CharSequence charSequence40 = strComparableMap19.get((java.lang.Object) strComparableMap36);
        boolean boolean41 = strComparableMap14.equals((java.lang.Object) strComparableMap19);
        boolean boolean45 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence46 = strComparableMap2.remove((java.lang.Object) "{{}={null=, =, hi!=hi!}}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        boolean boolean53 = strComparableMap48.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean56 = strComparableMap55.isEmpty();
        java.lang.Object obj57 = strComparableMap55.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection58 = strComparableMap55.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable61 = null;
        java.lang.CharSequence charSequence63 = strComparableMap60.putIfAbsent(strComparable61, (java.lang.CharSequence) "");
        boolean boolean65 = strComparableMap60.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable68 = null;
        java.lang.CharSequence charSequence70 = strComparableMap67.putIfAbsent(strComparable68, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence72 = strComparableMap67.get((java.lang.Object) true);
        int int73 = strComparableMap67.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection74 = strComparableMap67.values();
        boolean boolean75 = strComparableMap60.containsValue((java.lang.Object) strComparableMap67);
        boolean boolean76 = strComparableMap55.equals((java.lang.Object) strComparableMap67);
        strComparableMap48.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap55);
        boolean boolean78 = strComparableMap2.containsValue((java.lang.Object) strComparableMap48);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{null=, =}" + "'", str34, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection39);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection58);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean17 = strComparableMap13.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence20 = strComparableMap13.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        boolean boolean29 = strComparableMap24.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence32 = strComparableMap24.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean35 = strComparableMap34.isEmpty();
        java.lang.Object obj36 = strComparableMap34.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection37 = strComparableMap34.values();
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap34);
        java.lang.String str39 = strComparableMap24.toString();
        boolean boolean40 = strComparableMap13.remove((java.lang.Object) strComparableMap22, (java.lang.Object) str39);
        boolean boolean41 = strComparableMap10.equals((java.lang.Object) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable44 = null;
        java.lang.CharSequence charSequence46 = strComparableMap43.putIfAbsent(strComparable44, (java.lang.CharSequence) "");
        boolean boolean48 = strComparableMap43.containsValue((java.lang.Object) (short) 100);
        int int49 = strComparableMap43.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence52 = strComparableMap43.getOrDefault((java.lang.Object) strComparableMap50, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean55 = strComparableMap54.isEmpty();
        java.lang.Object obj56 = strComparableMap54.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection57 = strComparableMap54.values();
        boolean boolean58 = strComparableMap22.remove((java.lang.Object) strComparableMap50, (java.lang.Object) strComparableMap54);
        strComparableMap22.clear();
        boolean boolean60 = strComparableMap1.equals((java.lang.Object) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable63 = null;
        java.lang.CharSequence charSequence65 = strComparableMap62.putIfAbsent(strComparable63, (java.lang.CharSequence) "");
        boolean boolean67 = strComparableMap62.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence70 = strComparableMap62.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean73 = strComparableMap72.isEmpty();
        java.lang.Object obj74 = strComparableMap72.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection75 = strComparableMap72.values();
        strComparableMap62.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap72);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap78 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean79 = strComparableMap78.isEmpty();
        java.lang.Object obj80 = strComparableMap78.clone();
        java.lang.Class<?> wildcardClass81 = obj80.getClass();
        java.lang.CharSequence charSequence83 = strComparableMap72.getOrDefault((java.lang.Object) wildcardClass81, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence84 = strComparableMap1.remove((java.lang.Object) wildcardClass81);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{null=, =}" + "'", str39, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "" + "'", charSequence52, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "{}");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertEquals("'" + charSequence83 + "' != '" + "hi!" + "'", charSequence83, "hi!");
        org.junit.Assert.assertNull(charSequence84);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.Comparable<java.lang.String>> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.Comparable<java.lang.String>>(100, (float) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        boolean boolean14 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.CharSequence charSequence26 = strComparableMap2.get((java.lang.Object) strComparableMap22);
        boolean boolean27 = strComparableMap22.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable30 = null;
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent(strComparable30, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence34 = strComparableMap29.get((java.lang.Object) true);
        java.lang.Object obj35 = strComparableMap29.clone();
        java.lang.CharSequence charSequence38 = strComparableMap29.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj39 = null;
        java.lang.CharSequence charSequence40 = strComparableMap29.get(obj39);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean45 = strComparableMap44.isEmpty();
        strComparableMap42.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap44);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet47 = strComparableMap44.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection48 = strComparableMap44.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet49 = strComparableMap44.keySet();
        boolean boolean50 = strComparableMap29.equals((java.lang.Object) strComparableMap44);
        java.lang.String str51 = strComparableMap29.toString();
        java.lang.CharSequence charSequence54 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable57 = null;
        java.lang.CharSequence charSequence59 = strComparableMap56.putIfAbsent(strComparable57, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence61 = strComparableMap56.get((java.lang.Object) true);
        java.lang.Object obj62 = strComparableMap56.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable65 = null;
        java.lang.CharSequence charSequence67 = strComparableMap64.putIfAbsent(strComparable65, (java.lang.CharSequence) "");
        boolean boolean69 = strComparableMap64.containsValue((java.lang.Object) (short) 100);
        int int70 = strComparableMap64.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap71 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence73 = strComparableMap64.getOrDefault((java.lang.Object) strComparableMap71, (java.lang.CharSequence) "");
        java.lang.String str74 = strComparableMap64.toString();
        boolean boolean75 = strComparableMap29.remove(obj62, (java.lang.Object) str74);
        java.lang.CharSequence charSequence77 = strComparableMap22.getOrDefault((java.lang.Object) strComparableMap29, (java.lang.CharSequence) "hi!");
        int int78 = strComparableMap29.size();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{null=}");
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "" + "'", charSequence40, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet47);
        org.junit.Assert.assertNotNull(charSequenceCollection48);
        org.junit.Assert.assertNotNull(strComparableSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{null=, =}" + "'", str51, "{null=, =}");
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{null=}");
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals("'" + charSequence73 + "' != '" + "" + "'", charSequence73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{null=}" + "'", str74, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.reflect.AnnotatedElement> cloneableMap3 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.reflect.AnnotatedElement>((int) (byte) 1, (float) (byte) 10, false);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean27 = strComparableMap23.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = strComparableMap23.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable35 = null;
        java.lang.CharSequence charSequence37 = strComparableMap34.putIfAbsent(strComparable35, (java.lang.CharSequence) "");
        boolean boolean39 = strComparableMap34.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence42 = strComparableMap34.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean45 = strComparableMap44.isEmpty();
        java.lang.Object obj46 = strComparableMap44.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection47 = strComparableMap44.values();
        strComparableMap34.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap44);
        java.lang.String str49 = strComparableMap34.toString();
        boolean boolean50 = strComparableMap23.remove((java.lang.Object) strComparableMap32, (java.lang.Object) str49);
        boolean boolean51 = strComparableMap20.equals((java.lang.Object) strComparableMap32);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        boolean boolean58 = strComparableMap53.containsValue((java.lang.Object) (short) 100);
        int int59 = strComparableMap53.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence62 = strComparableMap53.getOrDefault((java.lang.Object) strComparableMap60, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean65 = strComparableMap64.isEmpty();
        java.lang.Object obj66 = strComparableMap64.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection67 = strComparableMap64.values();
        boolean boolean68 = strComparableMap32.remove((java.lang.Object) strComparableMap60, (java.lang.Object) strComparableMap64);
        strComparableMap32.clear();
        boolean boolean70 = strComparableMap9.containsValue((java.lang.Object) strComparableMap32);
        java.util.LinkedHashMap<java.io.Serializable, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> serializableMap72 = new java.util.LinkedHashMap<java.io.Serializable, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>(1);
        boolean boolean73 = strComparableMap32.equals((java.lang.Object) serializableMap72);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{null=, =}" + "'", str49, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "" + "'", charSequence62, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap1.containsKey((java.lang.Object) 1);
        boolean boolean15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet19 = strComparableMap1.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNotNull(strComparableSet19);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence5 = null;
        java.lang.CharSequence charSequence6 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence5);
        boolean boolean7 = strComparableMap3.isEmpty();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection8 = strComparableMap3.values();
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection8);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean20 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection40 = strComparableMap37.values();
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.lang.String str42 = strComparableMap27.toString();
        boolean boolean43 = strComparableMap16.remove((java.lang.Object) strComparableMap25, (java.lang.Object) str42);
        boolean boolean44 = strComparableMap13.equals((java.lang.Object) strComparableMap25);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        boolean boolean51 = strComparableMap46.containsValue((java.lang.Object) (short) 100);
        int int52 = strComparableMap46.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence55 = strComparableMap46.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        java.lang.Object obj59 = strComparableMap57.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection60 = strComparableMap57.values();
        boolean boolean61 = strComparableMap25.remove((java.lang.Object) strComparableMap53, (java.lang.Object) strComparableMap57);
        boolean boolean62 = strComparableMap1.equals((java.lang.Object) strComparableMap57);
        java.lang.CharSequence charSequence64 = strComparableMap57.get((java.lang.Object) (byte) 0);
        java.lang.CharSequence charSequence67 = strComparableMap57.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{null=, =}" + "'", str42, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "" + "'", charSequence55, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence67);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap2);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection8 = strComparableMap2.values();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection8);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.constant.Constable> typeMap17 = new java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.constant.Constable>();
        boolean boolean18 = strComparableMap1.equals((java.lang.Object) typeMap17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence24 = strComparableMap1.remove((java.lang.Object) charSequence23);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "" + "'", charSequence24, "");
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 1);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        java.util.LinkedHashMap<java.lang.Class<?>, java.io.Serializable> wildcardClassMap0 = new java.util.LinkedHashMap<java.lang.Class<?>, java.io.Serializable>();
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Object, java.util.Collection<java.lang.CharSequence>> objMap2 = new java.util.LinkedHashMap<java.lang.Object, java.util.Collection<java.lang.CharSequence>>((int) '4', (float) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap37.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.lang.Object obj45 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection46 = strComparableMap1.values();
        boolean boolean50 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{null=, =}");
        org.junit.Assert.assertNotNull(charSequenceCollection46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        int int8 = strComparableMap6.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0);
        java.lang.CharSequence charSequence12 = strComparableMap10.get((java.lang.Object) (short) 0);
        boolean boolean14 = strComparableMap6.remove((java.lang.Object) strComparableMap10, (java.lang.Object) 1.0d);
        boolean boolean18 = strComparableMap10.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "{null=, =}");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        boolean boolean11 = strComparableMap6.replace(strComparable8, (java.lang.CharSequence) "", (java.lang.CharSequence) "{null=, =}");
        int int12 = strComparableMap6.size();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet13 = strComparableMap6.entrySet();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strComparableEntrySet13);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        java.util.LinkedHashMap<java.lang.String, java.lang.reflect.AnnotatedElement> strMap3 = new java.util.LinkedHashMap<java.lang.String, java.lang.reflect.AnnotatedElement>(1, 10.0f, true);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean18 = strComparableMap17.isEmpty();
        java.lang.Object obj19 = strComparableMap17.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap17.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        boolean boolean27 = strComparableMap22.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable30 = null;
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent(strComparable30, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence34 = strComparableMap29.get((java.lang.Object) true);
        int int35 = strComparableMap29.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection36 = strComparableMap29.values();
        boolean boolean37 = strComparableMap22.containsValue((java.lang.Object) strComparableMap29);
        boolean boolean38 = strComparableMap17.equals((java.lang.Object) strComparableMap29);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean41 = strComparableMap40.isEmpty();
        java.lang.Object obj42 = strComparableMap40.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection43 = strComparableMap40.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean46 = strComparableMap45.isEmpty();
        java.lang.Object obj47 = strComparableMap45.clone();
        java.lang.CharSequence charSequence49 = strComparableMap45.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence51 = strComparableMap45.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence53 = strComparableMap40.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence54 = strComparableMap17.remove((java.lang.Object) "");
        boolean boolean55 = strComparableMap11.containsKey((java.lang.Object) charSequence54);
        boolean boolean56 = strComparableMap11.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{}");
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "" + "'", charSequence53, "");
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.invoke.TypeDescriptor> cloneableMap1 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.invoke.TypeDescriptor>((int) (byte) 100);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean22 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence25 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int26 = strComparableMap18.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.String str28 = strComparableMap18.toString();
        java.lang.CharSequence charSequence31 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNull(charSequence31);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.CharSequence> charSequenceIterableMap1 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.CharSequence>((int) '#');
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10, (float) 1L, false);
        java.lang.Class<?> wildcardClass4 = strComparableMap3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        boolean boolean8 = strComparableMap1.isEmpty();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection9 = strComparableMap1.values();
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection9);
        org.junit.Assert.assertNull(charSequence12);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        int int24 = strComparableMap18.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap26.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        boolean boolean31 = strComparableMap26.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence34 = strComparableMap26.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap38.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean45 = strComparableMap26.remove((java.lang.Object) strComparableMap36, (java.lang.Object) "hi!");
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        boolean boolean47 = strComparableMap36.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        java.lang.Object obj49 = strComparableMap36.clone();
        strComparableMap36.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap7.get((java.lang.Object) true);
        java.lang.Object obj13 = strComparableMap7.clone();
        java.lang.CharSequence charSequence16 = strComparableMap7.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj17 = null;
        java.lang.CharSequence charSequence18 = strComparableMap7.get(obj17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap22.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap22.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap22.keySet();
        boolean boolean28 = strComparableMap7.equals((java.lang.Object) strComparableMap22);
        java.lang.String str29 = strComparableMap7.toString();
        boolean boolean30 = strComparableMap1.equals((java.lang.Object) strComparableMap7);
        boolean boolean31 = strComparableMap7.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertNotNull(strComparableSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{null=, =}" + "'", str29, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        boolean boolean8 = strComparableMap1.isEmpty();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection9 = strComparableMap1.values();
        boolean boolean11 = strComparableMap1.containsKey((java.lang.Object) (short) -1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        int int19 = strComparableMap13.size();
        int int20 = strComparableMap13.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        java.lang.Object obj24 = strComparableMap22.clone();
        java.lang.CharSequence charSequence26 = strComparableMap22.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        java.lang.Object obj34 = strComparableMap28.clone();
        java.lang.CharSequence charSequence37 = strComparableMap28.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj38 = null;
        java.lang.CharSequence charSequence39 = strComparableMap28.get(obj38);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean44 = strComparableMap43.isEmpty();
        strComparableMap41.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap43);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet46 = strComparableMap43.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection47 = strComparableMap43.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet48 = strComparableMap43.keySet();
        boolean boolean49 = strComparableMap28.equals((java.lang.Object) strComparableMap43);
        java.lang.String str50 = strComparableMap28.toString();
        boolean boolean51 = strComparableMap22.equals((java.lang.Object) strComparableMap28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        boolean boolean58 = strComparableMap53.containsValue((java.lang.Object) (short) 100);
        int int59 = strComparableMap53.size();
        int int60 = strComparableMap53.size();
        java.lang.CharSequence charSequence61 = strComparableMap22.remove((java.lang.Object) strComparableMap53);
        boolean boolean62 = strComparableMap13.containsKey((java.lang.Object) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable65 = null;
        java.lang.CharSequence charSequence67 = strComparableMap64.putIfAbsent(strComparable65, (java.lang.CharSequence) "");
        boolean boolean69 = strComparableMap64.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence72 = strComparableMap64.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap74 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean75 = strComparableMap74.isEmpty();
        java.lang.Object obj76 = strComparableMap74.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection77 = strComparableMap74.values();
        strComparableMap64.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap74);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap80 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean81 = strComparableMap80.isEmpty();
        java.lang.Object obj82 = strComparableMap80.clone();
        java.lang.Class<?> wildcardClass83 = obj82.getClass();
        java.lang.CharSequence charSequence85 = strComparableMap74.getOrDefault((java.lang.Object) wildcardClass83, (java.lang.CharSequence) "hi!");
        boolean boolean86 = strComparableMap22.containsValue((java.lang.Object) "hi!");
        java.lang.CharSequence charSequence89 = null;
        boolean boolean90 = strComparableMap22.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}", charSequence89);
        boolean boolean91 = strComparableMap1.equals((java.lang.Object) "");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{null=}");
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "" + "'", charSequence39, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet46);
        org.junit.Assert.assertNotNull(charSequenceCollection47);
        org.junit.Assert.assertNotNull(strComparableSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{null=, =}" + "'", str50, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "{}");
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertEquals("'" + charSequence85 + "' != '" + "hi!" + "'", charSequence85, "hi!");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        boolean boolean29 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "{null=}");
        strComparableMap18.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean33 = strComparableMap32.isEmpty();
        java.lang.Object obj34 = strComparableMap32.clone();
        java.lang.CharSequence charSequence36 = strComparableMap32.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence38 = strComparableMap32.get((java.lang.Object) 100L);
        java.lang.Object obj39 = strComparableMap32.clone();
        java.lang.CharSequence charSequence40 = strComparableMap18.remove(obj39);
        java.lang.Class<?> wildcardClass41 = obj39.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        java.util.LinkedHashMap<java.lang.String, java.lang.Comparable<java.lang.String>> strMap1 = new java.util.LinkedHashMap<java.lang.String, java.lang.Comparable<java.lang.String>>((int) (short) 100);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = strComparableMap10.get((java.lang.Object) true);
        int int16 = strComparableMap10.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap18.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap26.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence31 = strComparableMap26.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet32 = strComparableMap26.entrySet();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.lang.Class<?> wildcardClass34 = strComparableMap26.getClass();
        boolean boolean35 = strComparableMap10.containsKey((java.lang.Object) wildcardClass34);
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) strComparableMap10);
        java.lang.Object obj37 = strComparableMap10.clone();
        int int38 = strComparableMap10.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNotNull(strComparableEntrySet32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{null=}");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        boolean boolean25 = strComparableMap20.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence28 = strComparableMap20.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence31 = strComparableMap20.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable34 = null;
        java.lang.CharSequence charSequence36 = strComparableMap33.putIfAbsent(strComparable34, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence39 = strComparableMap33.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean41 = strComparableMap33.containsValue((java.lang.Object) 10);
        boolean boolean43 = strComparableMap20.remove((java.lang.Object) 10, (java.lang.Object) (-1L));
        boolean boolean44 = strComparableMap1.equals((java.lang.Object) boolean43);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean51 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence54 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet55 = strComparableMap47.keySet();
        java.lang.CharSequence charSequence57 = strComparableMap1.getOrDefault((java.lang.Object) strComparableSet55, (java.lang.CharSequence) "hi!");
        boolean boolean58 = strComparableMap1.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "hi!" + "'", charSequence31, "hi!");
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNotNull(strComparableSet55);
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "hi!" + "'", charSequence57, "hi!");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean20 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection40 = strComparableMap37.values();
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.lang.String str42 = strComparableMap27.toString();
        boolean boolean43 = strComparableMap16.remove((java.lang.Object) strComparableMap25, (java.lang.Object) str42);
        boolean boolean44 = strComparableMap13.equals((java.lang.Object) strComparableMap25);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        boolean boolean51 = strComparableMap46.containsValue((java.lang.Object) (short) 100);
        int int52 = strComparableMap46.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence55 = strComparableMap46.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        java.lang.Object obj59 = strComparableMap57.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection60 = strComparableMap57.values();
        boolean boolean61 = strComparableMap25.remove((java.lang.Object) strComparableMap53, (java.lang.Object) strComparableMap57);
        boolean boolean62 = strComparableMap1.equals((java.lang.Object) strComparableMap57);
        java.lang.CharSequence charSequence64 = strComparableMap57.get((java.lang.Object) (byte) 0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable67 = null;
        java.lang.CharSequence charSequence69 = strComparableMap66.putIfAbsent(strComparable67, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence71 = strComparableMap66.get((java.lang.Object) true);
        int int72 = strComparableMap66.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection73 = strComparableMap66.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap75 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable76 = null;
        java.lang.CharSequence charSequence78 = strComparableMap75.putIfAbsent(strComparable76, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence81 = strComparableMap75.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap83 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable84 = null;
        java.lang.CharSequence charSequence86 = strComparableMap83.putIfAbsent(strComparable84, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence88 = strComparableMap83.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet89 = strComparableMap83.entrySet();
        strComparableMap75.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap83);
        java.lang.CharSequence charSequence92 = strComparableMap66.getOrDefault((java.lang.Object) strComparableMap83, (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence95 = strComparableMap66.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence96 = strComparableMap57.remove((java.lang.Object) "{}");
        java.lang.String str97 = strComparableMap57.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{null=, =}" + "'", str42, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "" + "'", charSequence55, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection73);
        org.junit.Assert.assertNull(charSequence78);
        org.junit.Assert.assertNull(charSequence81);
        org.junit.Assert.assertNull(charSequence86);
        org.junit.Assert.assertNull(charSequence88);
        org.junit.Assert.assertNotNull(strComparableEntrySet89);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "{null=, =}" + "'", charSequence92, "{null=, =}");
        org.junit.Assert.assertNull(charSequence95);
        org.junit.Assert.assertNull(charSequence96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "{}" + "'", str97, "{}");
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence34 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean35 = strComparableMap1.isEmpty();
        int int36 = strComparableMap1.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean31 = strComparableMap8.isEmpty();
        java.lang.CharSequence charSequence34 = strComparableMap8.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        boolean boolean43 = strComparableMap36.isEmpty();
        java.lang.CharSequence charSequence45 = strComparableMap8.getOrDefault((java.lang.Object) strComparableMap36, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        boolean boolean52 = strComparableMap47.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence55 = strComparableMap47.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        java.lang.Object obj59 = strComparableMap57.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection60 = strComparableMap57.values();
        strComparableMap47.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap57);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap47);
        boolean boolean63 = strComparableMap8.containsKey((java.lang.Object) strComparableMap47);
        java.lang.Object obj64 = strComparableMap8.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "{}");
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection2 = strComparableMap1.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet3 = strComparableMap1.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        org.junit.Assert.assertNotNull(charSequenceCollection2);
        org.junit.Assert.assertNotNull(strComparableEntrySet3);
        org.junit.Assert.assertNotNull(charSequenceCollection4);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.constant.Constable> typeMap17 = new java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.constant.Constable>();
        boolean boolean18 = strComparableMap1.equals((java.lang.Object) typeMap17);
        java.lang.String str19 = strComparableMap1.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{null=, hi!=hi!}" + "'", str19, "{null=, hi!=hi!}");
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap12.get((java.lang.Object) true);
        int int18 = strComparableMap12.size();
        java.lang.CharSequence charSequence20 = strComparableMap12.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence23 = strComparableMap12.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean24 = strComparableMap1.remove((java.lang.Object) (-1L), (java.lang.Object) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10);
        java.lang.CharSequence charSequence29 = strComparableMap26.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, 100.0f, false);
        boolean boolean34 = strComparableMap12.remove((java.lang.Object) "{null=}", (java.lang.Object) 100.0f);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap1.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence19 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence19);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        java.util.LinkedHashMap<java.lang.reflect.Type, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> typeMap1 = new java.util.LinkedHashMap<java.lang.reflect.Type, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>(2);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100);
        java.lang.CharSequence charSequence4 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{}");
        org.junit.Assert.assertNull(charSequence4);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> annotatedElementMap0 = new java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>();
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        int int13 = strComparableMap7.size();
        java.lang.CharSequence charSequence15 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap7, (java.lang.CharSequence) "hi!");
        boolean boolean19 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "", (java.lang.CharSequence) "{}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        int int16 = strComparableMap11.size();
        java.lang.CharSequence charSequence19 = strComparableMap11.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        boolean boolean23 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "hi!");
        boolean boolean27 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=, hi!=hi!}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.String, java.lang.String> strMap3 = new java.util.LinkedHashMap<java.lang.String, java.lang.String>((int) (byte) -1, (float) (-1), false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(10);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap37.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence58 = strComparableMap53.get((java.lang.Object) true);
        int int59 = strComparableMap53.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet60 = strComparableMap53.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean65 = strComparableMap53.equals((java.lang.Object) 0);
        strComparableMap46.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap53);
        java.lang.CharSequence charSequence68 = strComparableMap37.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "{null=}");
        boolean boolean72 = strComparableMap37.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=}", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap76 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence78 = null;
        java.lang.CharSequence charSequence79 = strComparableMap76.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence78);
        java.lang.CharSequence charSequence82 = strComparableMap76.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.CharSequence charSequence83 = strComparableMap37.remove((java.lang.Object) charSequence82);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(strComparableSet60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "{null=}" + "'", charSequence68, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertNull(charSequence82);
        org.junit.Assert.assertEquals("'" + charSequence83 + "' != '" + "" + "'", charSequence83, "");
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet6 = strComparableMap3.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection7 = strComparableMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet8 = strComparableMap3.entrySet();
        java.lang.Object obj9 = strComparableMap3.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable12 = null;
        java.lang.CharSequence charSequence14 = strComparableMap11.putIfAbsent(strComparable12, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap11.get((java.lang.Object) true);
        int int17 = strComparableMap11.size();
        java.lang.CharSequence charSequence19 = strComparableMap11.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence22 = strComparableMap11.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj23 = strComparableMap11.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap11.entrySet();
        boolean boolean25 = strComparableMap3.containsKey((java.lang.Object) strComparableMap11);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet6);
        org.junit.Assert.assertNotNull(charSequenceCollection7);
        org.junit.Assert.assertNotNull(strComparableEntrySet8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int15 = strComparableMap14.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        int int21 = strComparableMap19.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.lang.CharSequence charSequence25 = strComparableMap19.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        java.lang.Object obj26 = strComparableMap19.clone();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap19.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable30 = null;
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent(strComparable30, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence34 = strComparableMap29.get((java.lang.Object) true);
        int int35 = strComparableMap29.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection36 = strComparableMap29.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap38.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet52 = strComparableMap46.entrySet();
        strComparableMap38.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        java.lang.CharSequence charSequence55 = strComparableMap29.getOrDefault((java.lang.Object) strComparableMap46, (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence58 = strComparableMap29.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence59 = strComparableMap19.remove((java.lang.Object) charSequence58);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{hi!={{}={null=, =, hi!=hi!}}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{hi!={{}={null=, =, hi!=hi!}}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{hi!={{}={null=, =, hi!=hi!}}}");
        org.junit.Assert.assertNotNull(strComparableSet27);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection36);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNotNull(strComparableEntrySet52);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "{null=, =}" + "'", charSequence55, "{null=, =}");
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence59);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor, java.lang.reflect.AnnotatedElement> typeDescriptorMap3 = new java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor, java.lang.reflect.AnnotatedElement>((int) ' ', (float) 10, true);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean18 = strComparableMap17.isEmpty();
        java.lang.Object obj19 = strComparableMap17.clone();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.CharSequence charSequence22 = strComparableMap11.getOrDefault((java.lang.Object) wildcardClass20, (java.lang.CharSequence) "hi!");
        boolean boolean23 = strComparableMap11.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        int int13 = strComparableMap7.size();
        java.lang.CharSequence charSequence15 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap7, (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = strComparableMap17.get((java.lang.Object) true);
        java.lang.Object obj23 = strComparableMap17.clone();
        java.lang.CharSequence charSequence26 = strComparableMap17.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj27 = null;
        java.lang.CharSequence charSequence28 = strComparableMap17.get(obj27);
        strComparableMap17.clear();
        boolean boolean30 = strComparableMap7.containsKey((java.lang.Object) strComparableMap17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean35 = strComparableMap34.isEmpty();
        strComparableMap32.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap34);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        boolean boolean43 = strComparableMap38.containsValue((java.lang.Object) (short) 100);
        int int44 = strComparableMap38.size();
        java.lang.CharSequence charSequence46 = strComparableMap32.getOrDefault((java.lang.Object) strComparableMap38, (java.lang.CharSequence) "hi!");
        java.lang.String str47 = strComparableMap32.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean52 = strComparableMap51.isEmpty();
        strComparableMap49.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        boolean boolean60 = strComparableMap55.containsValue((java.lang.Object) (short) 100);
        int int61 = strComparableMap55.size();
        java.lang.CharSequence charSequence63 = strComparableMap49.getOrDefault((java.lang.Object) strComparableMap55, (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable66 = null;
        java.lang.CharSequence charSequence68 = strComparableMap65.putIfAbsent(strComparable66, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence70 = strComparableMap65.get((java.lang.Object) true);
        java.lang.Object obj71 = strComparableMap65.clone();
        java.lang.CharSequence charSequence74 = strComparableMap65.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj75 = null;
        java.lang.CharSequence charSequence76 = strComparableMap65.get(obj75);
        strComparableMap65.clear();
        boolean boolean78 = strComparableMap55.containsKey((java.lang.Object) strComparableMap65);
        strComparableMap32.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap55);
        java.lang.CharSequence charSequence80 = null;
        java.lang.CharSequence charSequence81 = strComparableMap17.getOrDefault((java.lang.Object) strComparableMap55, charSequence80);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{null=}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "" + "'", charSequence28, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{}" + "'", str47, "{}");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "{null=}");
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "" + "'", charSequence76, "");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(charSequence81);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.CharSequence, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>> charSequenceMap2 = new java.util.LinkedHashMap<java.lang.CharSequence, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>>((int) (byte) 0, (float) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        java.util.LinkedHashMap<java.lang.CharSequence, java.lang.reflect.Type> charSequenceMap1 = new java.util.LinkedHashMap<java.lang.CharSequence, java.lang.reflect.Type>(0);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.String> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.String>((int) (byte) -1, (float) (byte) 0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection19 = strComparableMap18.values();
        strComparableMap18.clear();
        boolean boolean21 = strComparableMap1.containsKey((java.lang.Object) strComparableMap18);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet22 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet24 = strComparableMap23.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNotNull(charSequenceCollection19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strComparableSet22);
        org.junit.Assert.assertNotNull(strComparableSet24);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        int int8 = strComparableMap6.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0);
        java.lang.CharSequence charSequence12 = strComparableMap10.get((java.lang.Object) (short) 0);
        boolean boolean14 = strComparableMap6.remove((java.lang.Object) strComparableMap10, (java.lang.Object) 1.0d);
        boolean boolean15 = strComparableMap10.isEmpty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean19 = strComparableMap1.isEmpty();
        java.lang.CharSequence charSequence22 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        int int23 = strComparableMap1.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean13 = strComparableMap1.equals((java.lang.Object) 0);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet14 = strComparableMap1.keySet();
        boolean boolean15 = strComparableMap1.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strComparableSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10);
        java.lang.CharSequence charSequence4 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence7 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean6 = strComparableMap5.isEmpty();
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet8 = strComparableMap5.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection9 = strComparableMap5.values();
        boolean boolean10 = strComparableMap1.containsKey((java.lang.Object) strComparableMap5);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        boolean boolean17 = strComparableMap12.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence20 = strComparableMap12.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        java.lang.Object obj24 = strComparableMap22.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection25 = strComparableMap22.values();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.String str27 = strComparableMap12.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean30 = strComparableMap29.isEmpty();
        java.lang.Object obj31 = strComparableMap29.clone();
        java.lang.CharSequence charSequence33 = strComparableMap29.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence35 = strComparableMap29.get((java.lang.Object) 100L);
        boolean boolean36 = strComparableMap12.containsValue((java.lang.Object) strComparableMap29);
        boolean boolean40 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "{null=}");
        strComparableMap29.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean44 = strComparableMap43.isEmpty();
        java.lang.Object obj45 = strComparableMap43.clone();
        java.lang.CharSequence charSequence47 = strComparableMap43.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence49 = strComparableMap43.get((java.lang.Object) 100L);
        java.lang.Object obj50 = strComparableMap43.clone();
        java.lang.CharSequence charSequence51 = strComparableMap29.remove(obj50);
        java.lang.CharSequence charSequence53 = strComparableMap5.getOrDefault(obj50, (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet8);
        org.junit.Assert.assertNotNull(charSequenceCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{null=, =}" + "'", str27, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{}");
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "{null=}" + "'", charSequence53, "{null=}");
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection8 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap10.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap18.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.CharSequence charSequence27 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap18, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int30 = strComparableMap29.size();
        boolean boolean31 = strComparableMap29.isEmpty();
        int int32 = strComparableMap29.size();
        java.lang.CharSequence charSequence35 = strComparableMap29.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.CharSequence charSequence38 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable41 = null;
        java.lang.CharSequence charSequence43 = strComparableMap40.putIfAbsent(strComparable41, (java.lang.CharSequence) "");
        boolean boolean45 = strComparableMap40.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence48 = strComparableMap40.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean50 = strComparableMap40.containsKey((java.lang.Object) 1);
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap40);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap40);
        java.lang.Object obj53 = strComparableMap1.clone();
        java.lang.Object obj54 = strComparableMap1.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection8);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "{null=, =}" + "'", charSequence27, "{null=, =}");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{null=, =}");
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{null=, =}");
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        boolean boolean17 = strComparableMap1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet18 = strComparableMap1.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection19 = strComparableMap1.values();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet18);
        org.junit.Assert.assertNotNull(charSequenceCollection19);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet6 = strComparableMap3.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection7 = strComparableMap3.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap3.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        strComparableMap10.clear();
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap10);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet22 = strComparableMap3.keySet();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet6);
        org.junit.Assert.assertNotNull(charSequenceCollection7);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableSet22);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        boolean boolean9 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.CharSequence> cloneableMap12 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.CharSequence>((int) 'a', (float) (short) 100);
        boolean boolean13 = strComparableMap3.equals((java.lang.Object) cloneableMap12);
        java.lang.Object obj14 = strComparableMap3.clone();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{}");
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence34 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj35 = null;
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.lang.CharSequence charSequence41 = strComparableMap37.remove((java.lang.Object) true);
        boolean boolean45 = strComparableMap37.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap1.remove(obj35, (java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap48.get((java.lang.Object) true);
        java.lang.Object obj54 = strComparableMap48.clone();
        java.lang.CharSequence charSequence57 = strComparableMap48.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj58 = null;
        java.lang.CharSequence charSequence59 = strComparableMap48.get(obj58);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean64 = strComparableMap63.isEmpty();
        strComparableMap61.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap63);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet66 = strComparableMap63.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection67 = strComparableMap63.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet68 = strComparableMap63.keySet();
        boolean boolean69 = strComparableMap48.equals((java.lang.Object) strComparableMap63);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap74 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean75 = strComparableMap74.isEmpty();
        strComparableMap72.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap74);
        boolean boolean77 = strComparableMap48.containsValue((java.lang.Object) strComparableMap72);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet78 = strComparableMap72.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{null=}");
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "" + "'", charSequence59, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet66);
        org.junit.Assert.assertNotNull(charSequenceCollection67);
        org.junit.Assert.assertNotNull(strComparableSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strComparableSet78);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence14 = strComparableMap6.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap18.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean25 = strComparableMap6.remove((java.lang.Object) strComparableMap16, (java.lang.Object) "hi!");
        boolean boolean26 = strComparableMap1.containsValue((java.lang.Object) boolean25);
        java.lang.CharSequence charSequence29 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet30 = strComparableMap1.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNotNull(strComparableEntrySet30);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        boolean boolean8 = strComparableMap1.isEmpty();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection9 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable12 = null;
        java.lang.CharSequence charSequence14 = strComparableMap11.putIfAbsent(strComparable12, (java.lang.CharSequence) "");
        boolean boolean16 = strComparableMap11.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        int int24 = strComparableMap18.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection25 = strComparableMap18.values();
        boolean boolean26 = strComparableMap11.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean31 = strComparableMap30.isEmpty();
        strComparableMap28.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap30);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet33 = strComparableMap30.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection34 = strComparableMap30.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet35 = strComparableMap30.keySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection36 = strComparableMap30.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        boolean boolean43 = strComparableMap38.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence46 = strComparableMap38.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean49 = strComparableMap48.isEmpty();
        java.lang.Object obj50 = strComparableMap48.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection51 = strComparableMap48.values();
        strComparableMap38.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        boolean boolean53 = strComparableMap18.remove((java.lang.Object) charSequenceCollection36, (java.lang.Object) strComparableMap38);
        java.lang.CharSequence charSequence55 = strComparableMap1.getOrDefault((java.lang.Object) boolean53, (java.lang.CharSequence) "");
        boolean boolean56 = strComparableMap1.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection9);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet33);
        org.junit.Assert.assertNotNull(charSequenceCollection34);
        org.junit.Assert.assertNotNull(strComparableSet35);
        org.junit.Assert.assertNotNull(charSequenceCollection36);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "" + "'", charSequence55, "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap12.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet26 = strComparableMap20.entrySet();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.lang.CharSequence charSequence29 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap20, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        java.lang.Object obj33 = strComparableMap31.clone();
        java.lang.CharSequence charSequence35 = strComparableMap31.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence37 = strComparableMap31.get((java.lang.Object) 100L);
        java.lang.String str38 = strComparableMap31.toString();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection39 = strComparableMap31.values();
        java.lang.CharSequence charSequence40 = strComparableMap1.get((java.lang.Object) charSequenceCollection39);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNotNull(strComparableEntrySet26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "{null=, =}" + "'", charSequence29, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection39);
        org.junit.Assert.assertNull(charSequence40);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.lang.Object obj43 = strComparableMap37.clone();
        java.lang.String str44 = strComparableMap37.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        int int52 = strComparableMap46.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = strComparableMap54.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable63 = null;
        java.lang.CharSequence charSequence65 = strComparableMap62.putIfAbsent(strComparable63, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence67 = strComparableMap62.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet68 = strComparableMap62.entrySet();
        strComparableMap54.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        java.lang.Class<?> wildcardClass70 = strComparableMap62.getClass();
        boolean boolean71 = strComparableMap46.containsKey((java.lang.Object) wildcardClass70);
        boolean boolean72 = strComparableMap37.containsValue((java.lang.Object) strComparableMap46);
        java.lang.CharSequence charSequence73 = strComparableMap27.get((java.lang.Object) strComparableMap46);
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.constant.Constable> cloneableMap75 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.constant.Constable>(1);
        boolean boolean76 = strComparableMap46.containsKey((java.lang.Object) 1);
        java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.lang.Iterable<java.lang.CharSequence>> constantDescMap80 = new java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.lang.Iterable<java.lang.CharSequence>>((int) '4', (float) (byte) 10, true);
        boolean boolean81 = strComparableMap46.containsKey((java.lang.Object) (byte) 10);
        java.lang.String str82 = strComparableMap46.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{null=}");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{null=}" + "'", str44, "{null=}");
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNotNull(strComparableEntrySet68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "{null=}" + "'", str82, "{null=}");
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection8 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap10.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap18.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.CharSequence charSequence27 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap18, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean30 = strComparableMap29.isEmpty();
        java.lang.Object obj31 = strComparableMap29.clone();
        java.lang.CharSequence charSequence33 = strComparableMap29.remove((java.lang.Object) true);
        boolean boolean37 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean38 = strComparableMap1.containsKey((java.lang.Object) strComparableMap29);
        strComparableMap1.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection8);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "{null=, =}" + "'", charSequence27, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean17 = strComparableMap13.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence20 = strComparableMap13.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        boolean boolean29 = strComparableMap24.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence32 = strComparableMap24.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean35 = strComparableMap34.isEmpty();
        java.lang.Object obj36 = strComparableMap34.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection37 = strComparableMap34.values();
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap34);
        java.lang.String str39 = strComparableMap24.toString();
        boolean boolean40 = strComparableMap13.remove((java.lang.Object) strComparableMap22, (java.lang.Object) str39);
        boolean boolean41 = strComparableMap10.equals((java.lang.Object) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable44 = null;
        java.lang.CharSequence charSequence46 = strComparableMap43.putIfAbsent(strComparable44, (java.lang.CharSequence) "");
        boolean boolean48 = strComparableMap43.containsValue((java.lang.Object) (short) 100);
        int int49 = strComparableMap43.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence52 = strComparableMap43.getOrDefault((java.lang.Object) strComparableMap50, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean55 = strComparableMap54.isEmpty();
        java.lang.Object obj56 = strComparableMap54.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection57 = strComparableMap54.values();
        boolean boolean58 = strComparableMap22.remove((java.lang.Object) strComparableMap50, (java.lang.Object) strComparableMap54);
        strComparableMap22.clear();
        boolean boolean60 = strComparableMap1.equals((java.lang.Object) strComparableMap22);
        java.lang.String str61 = strComparableMap22.toString();
        java.lang.String str62 = strComparableMap22.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{null=, =}" + "'", str39, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "" + "'", charSequence52, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{}" + "'", str61, "{}");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{}" + "'", str62, "{}");
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection13 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = strComparableMap15.get((java.lang.Object) true);
        int int21 = strComparableMap15.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap15.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap24.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap32.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet38 = strComparableMap32.entrySet();
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.lang.CharSequence charSequence41 = strComparableMap15.getOrDefault((java.lang.Object) strComparableMap32, (java.lang.CharSequence) "{null=, =}");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap15);
        java.lang.CharSequence charSequence45 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNotNull(strComparableEntrySet38);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=, =}" + "'", charSequence41, "{null=, =}");
        org.junit.Assert.assertNull(charSequence45);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        int int8 = strComparableMap6.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0);
        java.lang.CharSequence charSequence12 = strComparableMap10.get((java.lang.Object) (short) 0);
        boolean boolean14 = strComparableMap6.remove((java.lang.Object) strComparableMap10, (java.lang.Object) 1.0d);
        java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>, java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> wildcardClassOfFieldMap16 = new java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>, java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>(2);
        java.lang.CharSequence charSequence17 = strComparableMap6.get((java.lang.Object) 2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        boolean boolean29 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "{null=}");
        strComparableMap18.clear();
        strComparableMap18.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.lang.CharSequence charSequence38 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence41 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, hi!=hi!}", (java.lang.CharSequence) "hi!");
        int int42 = strComparableMap1.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.lang.String str8 = strComparableMap1.toString();
        boolean boolean12 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean19 = strComparableMap15.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence22 = strComparableMap15.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.lang.String str23 = strComparableMap15.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        java.lang.CharSequence charSequence28 = strComparableMap25.putIfAbsent(strComparable26, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap25.get((java.lang.Object) true);
        java.lang.Object obj31 = strComparableMap25.clone();
        java.lang.CharSequence charSequence34 = strComparableMap25.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        strComparableMap15.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap25);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean40 = strComparableMap39.isEmpty();
        strComparableMap37.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap39);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable44 = null;
        java.lang.CharSequence charSequence46 = strComparableMap43.putIfAbsent(strComparable44, (java.lang.CharSequence) "");
        boolean boolean48 = strComparableMap43.containsValue((java.lang.Object) (short) 100);
        int int49 = strComparableMap43.size();
        java.lang.CharSequence charSequence51 = strComparableMap37.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet52 = strComparableMap37.entrySet();
        boolean boolean53 = strComparableMap1.remove((java.lang.Object) strComparableMap15, (java.lang.Object) strComparableEntrySet52);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet54 = strComparableMap15.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{null=}");
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertNotNull(strComparableEntrySet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strComparableSet54);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence6 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap3.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        boolean boolean20 = strComparableMap15.containsValue((java.lang.Object) (short) 100);
        int int21 = strComparableMap15.size();
        java.lang.CharSequence charSequence23 = strComparableMap9.getOrDefault((java.lang.Object) strComparableMap15, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass24 = strComparableMap15.getClass();
        java.lang.CharSequence charSequence26 = strComparableMap3.getOrDefault((java.lang.Object) strComparableMap15, (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int29 = strComparableMap28.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap28.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap33);
        int int35 = strComparableMap33.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0);
        java.lang.CharSequence charSequence39 = strComparableMap37.get((java.lang.Object) (short) 0);
        boolean boolean41 = strComparableMap33.remove((java.lang.Object) strComparableMap37, (java.lang.Object) 1.0d);
        java.lang.CharSequence charSequence43 = strComparableMap3.getOrDefault((java.lang.Object) boolean41, (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "hi!" + "'", charSequence23, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "{}" + "'", charSequence26, "{}");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "{null=}" + "'", charSequence43, "{null=}");
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) ' ', (float) 100L, false);
        boolean boolean7 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, =}");
        strComparableMap3.clear();
        java.lang.CharSequence charSequence11 = strComparableMap3.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(charSequence11);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1);
        boolean boolean5 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, hi!=hi!}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        java.util.LinkedHashMap<java.lang.String, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strMap0 = new java.util.LinkedHashMap<java.lang.String, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>();
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.constant.Constable> cloneableMap10 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.constant.Constable>(1);
        boolean boolean11 = strComparableMap1.remove((java.lang.Object) (-1L), (java.lang.Object) 1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean14 = strComparableMap13.isEmpty();
        java.lang.Object obj15 = strComparableMap13.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean20 = strComparableMap19.isEmpty();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.lang.String str23 = strComparableMap19.toString();
        java.lang.CharSequence charSequence24 = strComparableMap1.get((java.lang.Object) str23);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{}");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertNull(charSequence24);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> annotatedElementMap3 = new java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((int) ' ', (-1.0f), true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean9 = strComparableMap1.containsValue((java.lang.Object) 10);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection10 = strComparableMap1.values();
        boolean boolean14 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap2);
        java.lang.CharSequence charSequence10 = strComparableMap7.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet11 = strComparableMap7.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet12 = strComparableMap7.entrySet();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNotNull(strComparableSet11);
        org.junit.Assert.assertNotNull(strComparableEntrySet12);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection5 = strComparableMap1.values();
        boolean boolean9 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, hi!=hi!}", (java.lang.CharSequence) "{null=, hi!=hi!}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNotNull(charSequenceCollection5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (float) (short) 10);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection3 = strComparableMap2.values();
        java.lang.CharSequence charSequence6 = strComparableMap2.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNotNull(charSequenceCollection3);
        org.junit.Assert.assertNull(charSequence6);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>> strComparableMapMap1 = new java.util.LinkedHashMap<java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>>((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str13 = strComparableMap1.toString();
        boolean boolean17 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet18 = strComparableMap1.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{null=, =}" + "'", str13, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strComparableSet18);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap12.get((java.lang.Object) true);
        java.lang.Object obj18 = strComparableMap12.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        boolean boolean25 = strComparableMap20.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence28 = strComparableMap20.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean31 = strComparableMap30.isEmpty();
        java.lang.Object obj32 = strComparableMap30.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection33 = strComparableMap30.values();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap30);
        boolean boolean35 = strComparableMap1.remove((java.lang.Object) strComparableMap12, (java.lang.Object) strComparableMap30);
        java.lang.CharSequence charSequence38 = strComparableMap12.replace((java.lang.Comparable<java.lang.String>) "{null=, hi!=hi!}", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{null=}");
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence38);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        int int24 = strComparableMap18.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap26.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        boolean boolean31 = strComparableMap26.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence34 = strComparableMap26.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap38.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean45 = strComparableMap26.remove((java.lang.Object) strComparableMap36, (java.lang.Object) "hi!");
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        boolean boolean47 = strComparableMap36.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet49 = strComparableMap1.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparableSet49);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean14 = strComparableMap13.isEmpty();
        java.lang.Object obj15 = strComparableMap13.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection16 = strComparableMap13.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        java.lang.CharSequence charSequence28 = strComparableMap25.putIfAbsent(strComparable26, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap25.get((java.lang.Object) true);
        int int31 = strComparableMap25.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection32 = strComparableMap25.values();
        boolean boolean33 = strComparableMap18.containsValue((java.lang.Object) strComparableMap25);
        boolean boolean34 = strComparableMap13.equals((java.lang.Object) strComparableMap25);
        java.lang.CharSequence charSequence35 = strComparableMap1.get((java.lang.Object) strComparableMap13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass36 = charSequence35.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(charSequence35);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        boolean boolean14 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.CharSequence charSequence26 = strComparableMap2.get((java.lang.Object) strComparableMap22);
        boolean boolean27 = strComparableMap22.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable30 = null;
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent(strComparable30, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence34 = strComparableMap29.get((java.lang.Object) true);
        java.lang.Object obj35 = strComparableMap29.clone();
        java.lang.CharSequence charSequence38 = strComparableMap29.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj39 = null;
        java.lang.CharSequence charSequence40 = strComparableMap29.get(obj39);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean45 = strComparableMap44.isEmpty();
        strComparableMap42.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap44);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet47 = strComparableMap44.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection48 = strComparableMap44.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet49 = strComparableMap44.keySet();
        boolean boolean50 = strComparableMap29.equals((java.lang.Object) strComparableMap44);
        java.lang.String str51 = strComparableMap29.toString();
        java.lang.CharSequence charSequence54 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable57 = null;
        java.lang.CharSequence charSequence59 = strComparableMap56.putIfAbsent(strComparable57, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence61 = strComparableMap56.get((java.lang.Object) true);
        java.lang.Object obj62 = strComparableMap56.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable65 = null;
        java.lang.CharSequence charSequence67 = strComparableMap64.putIfAbsent(strComparable65, (java.lang.CharSequence) "");
        boolean boolean69 = strComparableMap64.containsValue((java.lang.Object) (short) 100);
        int int70 = strComparableMap64.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap71 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence73 = strComparableMap64.getOrDefault((java.lang.Object) strComparableMap71, (java.lang.CharSequence) "");
        java.lang.String str74 = strComparableMap64.toString();
        boolean boolean75 = strComparableMap29.remove(obj62, (java.lang.Object) str74);
        java.lang.CharSequence charSequence77 = strComparableMap22.getOrDefault((java.lang.Object) strComparableMap29, (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet78 = strComparableMap22.keySet();
        java.lang.CharSequence charSequence81 = strComparableMap22.putIfAbsent((java.lang.Comparable<java.lang.String>) "{{null=, =}={}}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{null=}");
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "" + "'", charSequence40, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet47);
        org.junit.Assert.assertNotNull(charSequenceCollection48);
        org.junit.Assert.assertNotNull(strComparableSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{null=, =}" + "'", str51, "{null=, =}");
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{null=}");
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals("'" + charSequence73 + "' != '" + "" + "'", charSequence73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{null=}" + "'", str74, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertNotNull(strComparableSet78);
        org.junit.Assert.assertNull(charSequence81);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet4 = strComparableMap3.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection9 = strComparableMap6.values();
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        boolean boolean11 = strComparableMap6.isEmpty();
        org.junit.Assert.assertNotNull(strComparableEntrySet4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap1.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap1.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = strComparableMap17.get((java.lang.Object) true);
        int int23 = strComparableMap17.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet24 = strComparableMap17.keySet();
        int int25 = strComparableMap17.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap34);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean46 = strComparableMap42.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = strComparableMap42.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        boolean boolean58 = strComparableMap53.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence61 = strComparableMap53.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean64 = strComparableMap63.isEmpty();
        java.lang.Object obj65 = strComparableMap63.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection66 = strComparableMap63.values();
        strComparableMap53.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap63);
        java.lang.String str68 = strComparableMap53.toString();
        boolean boolean69 = strComparableMap42.remove((java.lang.Object) strComparableMap51, (java.lang.Object) str68);
        boolean boolean70 = strComparableMap39.equals((java.lang.Object) strComparableMap51);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable73 = null;
        java.lang.CharSequence charSequence75 = strComparableMap72.putIfAbsent(strComparable73, (java.lang.CharSequence) "");
        boolean boolean77 = strComparableMap72.containsValue((java.lang.Object) (short) 100);
        int int78 = strComparableMap72.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap79 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence81 = strComparableMap72.getOrDefault((java.lang.Object) strComparableMap79, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap83 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean84 = strComparableMap83.isEmpty();
        java.lang.Object obj85 = strComparableMap83.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection86 = strComparableMap83.values();
        boolean boolean87 = strComparableMap51.remove((java.lang.Object) strComparableMap79, (java.lang.Object) strComparableMap83);
        boolean boolean88 = strComparableMap27.equals((java.lang.Object) strComparableMap83);
        java.lang.CharSequence charSequence90 = strComparableMap83.get((java.lang.Object) (byte) 0);
        java.lang.CharSequence charSequence92 = strComparableMap17.getOrDefault((java.lang.Object) charSequence90, (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        boolean boolean93 = strComparableMap1.equals((java.lang.Object) strComparableMap17);
        boolean boolean97 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(strComparableSet24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "{null=, =}" + "'", str68, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertEquals("'" + charSequence81 + "' != '" + "" + "'", charSequence81, "");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(charSequence90);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "" + "'", charSequence92, "");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean31 = strComparableMap8.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet32 = strComparableMap8.entrySet();
        java.lang.Object obj33 = strComparableMap8.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable36 = null;
        java.lang.CharSequence charSequence38 = strComparableMap35.putIfAbsent(strComparable36, (java.lang.CharSequence) "");
        boolean boolean40 = strComparableMap35.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean51 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence54 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        java.lang.CharSequence charSequence61 = strComparableMap58.putIfAbsent(strComparable59, (java.lang.CharSequence) "");
        boolean boolean63 = strComparableMap58.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence66 = strComparableMap58.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean69 = strComparableMap68.isEmpty();
        java.lang.Object obj70 = strComparableMap68.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection71 = strComparableMap68.values();
        strComparableMap58.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap68);
        java.lang.String str73 = strComparableMap58.toString();
        boolean boolean74 = strComparableMap47.remove((java.lang.Object) strComparableMap56, (java.lang.Object) str73);
        boolean boolean75 = strComparableMap44.equals((java.lang.Object) strComparableMap56);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap77 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable78 = null;
        java.lang.CharSequence charSequence80 = strComparableMap77.putIfAbsent(strComparable78, (java.lang.CharSequence) "");
        boolean boolean82 = strComparableMap77.containsValue((java.lang.Object) (short) 100);
        int int83 = strComparableMap77.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap84 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence86 = strComparableMap77.getOrDefault((java.lang.Object) strComparableMap84, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap88 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean89 = strComparableMap88.isEmpty();
        java.lang.Object obj90 = strComparableMap88.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection91 = strComparableMap88.values();
        boolean boolean92 = strComparableMap56.remove((java.lang.Object) strComparableMap84, (java.lang.Object) strComparableMap88);
        strComparableMap56.clear();
        boolean boolean94 = strComparableMap35.equals((java.lang.Object) strComparableMap56);
        boolean boolean95 = strComparableMap8.equals((java.lang.Object) strComparableMap35);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap96 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean97 = strComparableMap96.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "{null=, =}" + "'", str73, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertEquals("'" + charSequence86 + "' != '" + "" + "'", charSequence86, "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((-1), (float) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        boolean boolean11 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "{}");
        java.lang.Object obj12 = null;
        boolean boolean13 = strComparableMap1.containsKey(obj12);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        java.lang.Object obj52 = strComparableMap15.clone();
        strComparableMap15.clear();
        int int54 = strComparableMap15.size();
        java.lang.CharSequence charSequence57 = strComparableMap15.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{}");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(charSequence57);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet6 = strComparableMap3.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection7 = strComparableMap3.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap3.keySet();
        java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>> charSequenceIterableMap9 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>>();
        java.lang.CharSequence charSequence10 = strComparableMap3.remove((java.lang.Object) charSequenceIterableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (float) (short) 10);
        java.lang.CharSequence charSequence16 = strComparableMap13.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        boolean boolean17 = strComparableMap3.containsValue((java.lang.Object) charSequence16);
        java.lang.Object obj18 = strComparableMap3.clone();
        java.lang.Object obj19 = null;
        boolean boolean20 = strComparableMap3.containsValue(obj19);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet6);
        org.junit.Assert.assertNotNull(charSequenceCollection7);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable4 = null;
        java.lang.CharSequence charSequence6 = strComparableMap3.putIfAbsent(strComparable4, (java.lang.CharSequence) "");
        boolean boolean8 = strComparableMap3.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence11 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap3.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean21 = strComparableMap1.containsKey((java.lang.Object) charSequence20);
        java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.ConstantDesc> comparableEntrySetMap22 = new java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.ConstantDesc>();
        java.lang.CharSequence charSequence23 = strComparableMap1.get((java.lang.Object) comparableEntrySetMap22);
        strComparableMap1.clear();
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(charSequence23);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationMap3 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.io.Serializable>((int) (byte) 0, (float) 1L, false);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        java.util.LinkedHashMap<java.lang.Object, java.lang.Comparable<java.lang.String>> objMap0 = new java.util.LinkedHashMap<java.lang.Object, java.lang.Comparable<java.lang.String>>();
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (float) (short) 10);
        java.lang.CharSequence charSequence5 = strComparableMap2.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        java.lang.CharSequence charSequence17 = strComparableMap14.putIfAbsent(strComparable15, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = strComparableMap14.get((java.lang.Object) true);
        int int20 = strComparableMap14.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection21 = strComparableMap14.values();
        boolean boolean22 = strComparableMap7.containsValue((java.lang.Object) strComparableMap14);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean27 = strComparableMap26.isEmpty();
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet29 = strComparableMap26.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap26.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet31 = strComparableMap26.keySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection32 = strComparableMap26.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable35 = null;
        java.lang.CharSequence charSequence37 = strComparableMap34.putIfAbsent(strComparable35, (java.lang.CharSequence) "");
        boolean boolean39 = strComparableMap34.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence42 = strComparableMap34.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean45 = strComparableMap44.isEmpty();
        java.lang.Object obj46 = strComparableMap44.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection47 = strComparableMap44.values();
        strComparableMap34.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap44);
        boolean boolean49 = strComparableMap14.remove((java.lang.Object) charSequenceCollection32, (java.lang.Object) strComparableMap34);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean52 = strComparableMap51.isEmpty();
        java.lang.Object obj53 = strComparableMap51.clone();
        java.lang.CharSequence charSequence55 = strComparableMap51.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable58 = null;
        java.lang.CharSequence charSequence60 = strComparableMap57.putIfAbsent(strComparable58, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence62 = strComparableMap57.get((java.lang.Object) true);
        java.lang.Object obj63 = strComparableMap57.clone();
        java.lang.CharSequence charSequence66 = strComparableMap57.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj67 = null;
        java.lang.CharSequence charSequence68 = strComparableMap57.get(obj67);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean73 = strComparableMap72.isEmpty();
        strComparableMap70.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap72);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet75 = strComparableMap72.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection76 = strComparableMap72.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet77 = strComparableMap72.keySet();
        boolean boolean78 = strComparableMap57.equals((java.lang.Object) strComparableMap72);
        java.lang.String str79 = strComparableMap57.toString();
        boolean boolean80 = strComparableMap51.equals((java.lang.Object) strComparableMap57);
        boolean boolean84 = strComparableMap51.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap85 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        boolean boolean86 = strComparableMap2.remove((java.lang.Object) strComparableMap34, (java.lang.Object) strComparableMap85);
        java.lang.String str87 = strComparableMap34.toString();
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet29);
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertNotNull(strComparableSet31);
        org.junit.Assert.assertNotNull(charSequenceCollection32);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "{null=}");
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "" + "'", charSequence68, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet75);
        org.junit.Assert.assertNotNull(charSequenceCollection76);
        org.junit.Assert.assertNotNull(strComparableSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "{null=, =}" + "'", str79, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "{null=, =}" + "'", str87, "{null=, =}");
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection8 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap10.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap18.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.CharSequence charSequence27 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap18, (java.lang.CharSequence) "{null=, =}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet28 = strComparableMap18.keySet();
        java.lang.Class<?> wildcardClass29 = strComparableSet28.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection8);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "{null=, =}" + "'", charSequence27, "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableSet28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap1.containsKey((java.lang.Object) 1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap13.get((java.lang.Object) true);
        int int19 = strComparableMap13.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        boolean boolean26 = strComparableMap21.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence29 = strComparableMap21.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable34 = null;
        java.lang.CharSequence charSequence36 = strComparableMap33.putIfAbsent(strComparable34, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence39 = strComparableMap33.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean40 = strComparableMap21.remove((java.lang.Object) strComparableMap31, (java.lang.Object) "hi!");
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable44 = null;
        java.lang.CharSequence charSequence46 = strComparableMap43.putIfAbsent(strComparable44, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence48 = strComparableMap43.get((java.lang.Object) true);
        int int49 = strComparableMap43.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        boolean boolean56 = strComparableMap51.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence59 = strComparableMap51.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable64 = null;
        java.lang.CharSequence charSequence66 = strComparableMap63.putIfAbsent(strComparable64, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence69 = strComparableMap63.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean70 = strComparableMap51.remove((java.lang.Object) strComparableMap61, (java.lang.Object) "hi!");
        strComparableMap43.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap61);
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap61);
        java.lang.CharSequence charSequence75 = strComparableMap31.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet76 = strComparableMap31.keySet();
        java.lang.CharSequence charSequence77 = null;
        java.lang.CharSequence charSequence78 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap31, charSequence77);
        java.lang.String str79 = strComparableMap31.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNotNull(strComparableSet76);
        org.junit.Assert.assertNull(charSequence78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "{{}={null=, =, hi!=hi!}}" + "'", str79, "{{}={null=, =, hi!=hi!}}");
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        boolean boolean9 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        strComparableMap1.clear();
        java.lang.Class<?> wildcardClass11 = strComparableMap1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        java.lang.Object obj52 = strComparableMap15.clone();
        strComparableMap15.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence60 = strComparableMap57.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence63 = strComparableMap57.put((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean66 = strComparableMap65.isEmpty();
        java.lang.Object obj67 = strComparableMap65.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap69 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap71 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean72 = strComparableMap71.isEmpty();
        strComparableMap69.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap71);
        strComparableMap65.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap71);
        boolean boolean75 = strComparableMap65.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet76 = strComparableMap65.entrySet();
        java.lang.CharSequence charSequence77 = null;
        java.lang.CharSequence charSequence78 = strComparableMap57.getOrDefault((java.lang.Object) strComparableEntrySet76, charSequence77);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap82 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence84 = null;
        java.lang.CharSequence charSequence85 = strComparableMap82.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence84);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap86 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap82);
        boolean boolean87 = strComparableMap15.remove((java.lang.Object) charSequence78, (java.lang.Object) strComparableMap86);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{}");
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "{null=}" + "'", charSequence63, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "{}");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet76);
        org.junit.Assert.assertNull(charSequence78);
        org.junit.Assert.assertNull(charSequence85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        java.util.LinkedHashMap<java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.reflect.Type> strComparableMapMap2 = new java.util.LinkedHashMap<java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.reflect.Type>((int) ' ', (float) 3);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet19 = strComparableMap16.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap16.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet21 = strComparableMap16.keySet();
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap16);
        java.lang.String str23 = strComparableMap1.toString();
        java.lang.CharSequence charSequence26 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        java.lang.Object obj34 = strComparableMap28.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.lang.String str46 = strComparableMap36.toString();
        boolean boolean47 = strComparableMap1.remove(obj34, (java.lang.Object) str46);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        boolean boolean55 = strComparableMap50.containsValue((java.lang.Object) (short) 100);
        int int56 = strComparableMap50.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence59 = strComparableMap50.getOrDefault((java.lang.Object) strComparableMap57, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence61 = strComparableMap1.getOrDefault((java.lang.Object) "", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        java.lang.CharSequence charSequence64 = null;
        boolean boolean65 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{}", charSequence64);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet19);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertNotNull(strComparableSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{null=, =}" + "'", str23, "{null=, =}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{null=}");
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{null=}" + "'", str46, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "" + "'", charSequence59, "");
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "" + "'", charSequence61, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.lang.CharSequence charSequence10 = strComparableMap6.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence12 = strComparableMap6.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence14 = strComparableMap1.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean20 = strComparableMap19.isEmpty();
        java.lang.Object obj21 = strComparableMap19.clone();
        java.lang.CharSequence charSequence23 = strComparableMap19.remove((java.lang.Object) true);
        boolean boolean27 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        strComparableMap19.clear();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet30 = strComparableMap1.keySet();
        java.lang.CharSequence charSequence33 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{}");
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strComparableSet30);
        org.junit.Assert.assertNull(charSequence33);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap1.containsKey((java.lang.Object) 1);
        strComparableMap1.clear();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection13 = strComparableMap1.values();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection13);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean31 = strComparableMap8.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean36 = strComparableMap35.isEmpty();
        strComparableMap33.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap35);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet38 = strComparableMap35.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection39 = strComparableMap35.values();
        boolean boolean40 = strComparableMap8.containsValue((java.lang.Object) charSequenceCollection39);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection41 = strComparableMap8.values();
        java.lang.Object obj42 = strComparableMap8.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet38);
        org.junit.Assert.assertNotNull(charSequenceCollection39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{}");
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean17 = strComparableMap13.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence20 = strComparableMap13.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        boolean boolean29 = strComparableMap24.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence32 = strComparableMap24.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean35 = strComparableMap34.isEmpty();
        java.lang.Object obj36 = strComparableMap34.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection37 = strComparableMap34.values();
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap34);
        java.lang.String str39 = strComparableMap24.toString();
        boolean boolean40 = strComparableMap13.remove((java.lang.Object) strComparableMap22, (java.lang.Object) str39);
        boolean boolean41 = strComparableMap10.equals((java.lang.Object) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable44 = null;
        java.lang.CharSequence charSequence46 = strComparableMap43.putIfAbsent(strComparable44, (java.lang.CharSequence) "");
        boolean boolean48 = strComparableMap43.containsValue((java.lang.Object) (short) 100);
        int int49 = strComparableMap43.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence52 = strComparableMap43.getOrDefault((java.lang.Object) strComparableMap50, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean55 = strComparableMap54.isEmpty();
        java.lang.Object obj56 = strComparableMap54.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection57 = strComparableMap54.values();
        boolean boolean58 = strComparableMap22.remove((java.lang.Object) strComparableMap50, (java.lang.Object) strComparableMap54);
        strComparableMap22.clear();
        boolean boolean60 = strComparableMap1.equals((java.lang.Object) strComparableMap22);
        java.lang.String str61 = strComparableMap22.toString();
        boolean boolean65 = strComparableMap22.replace((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence68 = strComparableMap22.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable71 = null;
        java.lang.CharSequence charSequence73 = strComparableMap70.putIfAbsent(strComparable71, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence75 = strComparableMap70.get((java.lang.Object) true);
        int int76 = strComparableMap70.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap78 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable79 = null;
        java.lang.CharSequence charSequence81 = strComparableMap78.putIfAbsent(strComparable79, (java.lang.CharSequence) "");
        boolean boolean83 = strComparableMap78.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence86 = strComparableMap78.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap88 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap90 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable91 = null;
        java.lang.CharSequence charSequence93 = strComparableMap90.putIfAbsent(strComparable91, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence96 = strComparableMap90.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean97 = strComparableMap78.remove((java.lang.Object) strComparableMap88, (java.lang.Object) "hi!");
        strComparableMap70.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap88);
        boolean boolean99 = strComparableMap22.containsValue((java.lang.Object) strComparableMap70);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{null=, =}" + "'", str39, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "" + "'", charSequence52, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{}" + "'", str61, "{}");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNull(charSequence81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(charSequence86);
        org.junit.Assert.assertNull(charSequence93);
        org.junit.Assert.assertNull(charSequence96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence34 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj35 = null;
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.lang.CharSequence charSequence41 = strComparableMap37.remove((java.lang.Object) true);
        boolean boolean45 = strComparableMap37.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap1.remove(obj35, (java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap48.get((java.lang.Object) true);
        java.lang.Object obj54 = strComparableMap48.clone();
        java.lang.CharSequence charSequence57 = strComparableMap48.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj58 = null;
        java.lang.CharSequence charSequence59 = strComparableMap48.get(obj58);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean64 = strComparableMap63.isEmpty();
        strComparableMap61.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap63);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet66 = strComparableMap63.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection67 = strComparableMap63.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet68 = strComparableMap63.keySet();
        boolean boolean69 = strComparableMap48.equals((java.lang.Object) strComparableMap63);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap74 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean75 = strComparableMap74.isEmpty();
        strComparableMap72.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap74);
        boolean boolean77 = strComparableMap48.containsValue((java.lang.Object) strComparableMap72);
        java.lang.String str78 = strComparableMap48.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{null=}");
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "" + "'", charSequence59, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet66);
        org.junit.Assert.assertNotNull(charSequenceCollection67);
        org.junit.Assert.assertNotNull(strComparableSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "{null=, =}" + "'", str78, "{null=, =}");
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        int int8 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        java.lang.Object obj22 = strComparableMap16.clone();
        java.lang.CharSequence charSequence25 = strComparableMap16.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj26 = null;
        java.lang.CharSequence charSequence27 = strComparableMap16.get(obj26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap31.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap31.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet36 = strComparableMap31.keySet();
        boolean boolean37 = strComparableMap16.equals((java.lang.Object) strComparableMap31);
        java.lang.String str38 = strComparableMap16.toString();
        boolean boolean39 = strComparableMap10.equals((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        int int48 = strComparableMap41.size();
        java.lang.CharSequence charSequence49 = strComparableMap10.remove((java.lang.Object) strComparableMap41);
        boolean boolean50 = strComparableMap1.containsKey((java.lang.Object) strComparableMap10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence58 = strComparableMap52.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable61 = null;
        java.lang.CharSequence charSequence63 = strComparableMap60.putIfAbsent(strComparable61, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence65 = strComparableMap60.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet66 = strComparableMap60.entrySet();
        strComparableMap52.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap60);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap69 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection70 = strComparableMap69.values();
        strComparableMap69.clear();
        boolean boolean72 = strComparableMap52.containsKey((java.lang.Object) strComparableMap69);
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap75 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable76 = null;
        java.lang.CharSequence charSequence78 = strComparableMap75.putIfAbsent(strComparable76, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence80 = strComparableMap75.get((java.lang.Object) true);
        java.lang.Object obj81 = strComparableMap75.clone();
        java.lang.CharSequence charSequence84 = strComparableMap75.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean85 = strComparableMap75.isEmpty();
        java.lang.String str86 = strComparableMap75.toString();
        java.lang.CharSequence charSequence87 = strComparableMap52.get((java.lang.Object) strComparableMap75);
        java.lang.String str88 = strComparableMap75.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{null=}");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNotNull(strComparableSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=, =}" + "'", str38, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNotNull(strComparableEntrySet66);
        org.junit.Assert.assertNotNull(charSequenceCollection70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(charSequence78);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "{null=}");
        org.junit.Assert.assertNull(charSequence84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "{null=, =}" + "'", str86, "{null=, =}");
        org.junit.Assert.assertNull(charSequence87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "{null=, =}" + "'", str88, "{null=, =}");
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap12.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection16 = strComparableMap12.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet17 = strComparableMap12.keySet();
        boolean boolean18 = strComparableMap1.equals((java.lang.Object) strComparableSet17);
        java.lang.Class<?> wildcardClass19 = strComparableMap1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNotNull(charSequenceCollection16);
        org.junit.Assert.assertNotNull(strComparableSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.lang.CharSequence charSequence18 = strComparableMap1.get((java.lang.Object) 'a');
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        boolean boolean26 = strComparableMap21.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        int int34 = strComparableMap28.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap28.values();
        boolean boolean36 = strComparableMap21.containsValue((java.lang.Object) strComparableMap28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        boolean boolean43 = strComparableMap38.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence46 = strComparableMap38.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence49 = strComparableMap38.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = strComparableMap38.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap38.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean56 = strComparableMap21.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence61 = strComparableMap21.getOrDefault((java.lang.Object) strComparableMap59, (java.lang.CharSequence) "{null=}");
        strComparableMap59.clear();
        java.lang.CharSequence charSequence63 = null;
        java.lang.CharSequence charSequence64 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap59, charSequence63);
        java.lang.CharSequence charSequence67 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "{null=}" + "'", charSequence61, "{null=}");
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence67);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet4 = strComparableMap3.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection9 = strComparableMap6.values();
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet11 = strComparableMap6.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet12 = strComparableMap6.entrySet();
        org.junit.Assert.assertNotNull(strComparableEntrySet4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection9);
        org.junit.Assert.assertNotNull(strComparableEntrySet11);
        org.junit.Assert.assertNotNull(strComparableEntrySet12);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        boolean boolean17 = strComparableMap12.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence20 = strComparableMap12.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        java.lang.Object obj24 = strComparableMap22.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection25 = strComparableMap22.values();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.String str27 = strComparableMap12.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean30 = strComparableMap29.isEmpty();
        java.lang.Object obj31 = strComparableMap29.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection32 = strComparableMap29.values();
        java.lang.CharSequence charSequence33 = strComparableMap12.get((java.lang.Object) strComparableMap29);
        boolean boolean34 = strComparableMap7.equals((java.lang.Object) strComparableMap12);
        int int35 = strComparableMap7.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{null=, =}" + "'", str27, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection32);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str13 = strComparableMap1.toString();
        boolean boolean17 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.Object obj18 = strComparableMap1.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{null=, =}" + "'", str13, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{null=, =}");
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        boolean boolean3 = strComparableMap1.isEmpty();
        int int4 = strComparableMap1.size();
        java.lang.CharSequence charSequence7 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.CharSequence charSequence10 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap12.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap19.get((java.lang.Object) true);
        int int25 = strComparableMap19.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet26 = strComparableMap19.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean31 = strComparableMap19.equals((java.lang.Object) 0);
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable35 = null;
        java.lang.CharSequence charSequence37 = strComparableMap34.putIfAbsent(strComparable35, (java.lang.CharSequence) "");
        boolean boolean39 = strComparableMap34.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence42 = strComparableMap34.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean44 = strComparableMap34.containsKey((java.lang.Object) 1);
        java.lang.Class<?> wildcardClass45 = strComparableMap34.getClass();
        boolean boolean46 = strComparableMap19.containsKey((java.lang.Object) strComparableMap34);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        boolean boolean53 = strComparableMap48.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence56 = strComparableMap48.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence59 = strComparableMap48.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection60 = strComparableMap48.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable63 = null;
        java.lang.CharSequence charSequence65 = strComparableMap62.putIfAbsent(strComparable63, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence67 = strComparableMap62.get((java.lang.Object) true);
        int int68 = strComparableMap62.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection69 = strComparableMap62.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap71 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable72 = null;
        java.lang.CharSequence charSequence74 = strComparableMap71.putIfAbsent(strComparable72, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence77 = strComparableMap71.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap79 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable80 = null;
        java.lang.CharSequence charSequence82 = strComparableMap79.putIfAbsent(strComparable80, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence84 = strComparableMap79.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet85 = strComparableMap79.entrySet();
        strComparableMap71.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap79);
        java.lang.CharSequence charSequence88 = strComparableMap62.getOrDefault((java.lang.Object) strComparableMap79, (java.lang.CharSequence) "{null=, =}");
        strComparableMap48.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        strComparableMap19.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        java.lang.Object obj91 = null;
        boolean boolean92 = strComparableMap1.remove((java.lang.Object) strComparableMap19, obj91);
        java.lang.CharSequence charSequence95 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{}");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(strComparableSet26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection60);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection69);
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertNull(charSequence82);
        org.junit.Assert.assertNull(charSequence84);
        org.junit.Assert.assertNotNull(strComparableEntrySet85);
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "{null=, =}" + "'", charSequence88, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(charSequence95);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence45 = strComparableMap39.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean46 = strComparableMap27.remove((java.lang.Object) strComparableMap37, (java.lang.Object) "hi!");
        boolean boolean47 = strComparableMap1.containsKey((java.lang.Object) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap50.get((java.lang.Object) true);
        int int56 = strComparableMap50.size();
        java.lang.CharSequence charSequence58 = strComparableMap50.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence61 = strComparableMap50.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str62 = strComparableMap50.toString();
        java.lang.CharSequence charSequence63 = strComparableMap48.remove((java.lang.Object) strComparableMap50);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection64 = strComparableMap48.values();
        int int65 = strComparableMap48.size();
        java.lang.CharSequence charSequence68 = strComparableMap48.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap69 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        java.lang.Class<?> wildcardClass70 = strComparableMap69.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{null=, =}" + "'", str62, "{null=, =}");
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNotNull(charSequenceCollection64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap21.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean28 = strComparableMap9.remove((java.lang.Object) strComparableMap19, (java.lang.Object) "hi!");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.lang.CharSequence charSequence32 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(charSequence32);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj13 = strComparableMap1.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet14 = strComparableMap1.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet21 = strComparableMap18.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap18.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet23 = strComparableMap18.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean26 = strComparableMap25.isEmpty();
        java.lang.Object obj27 = strComparableMap25.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        strComparableMap25.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        strComparableMap25.clear();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap25);
        java.lang.CharSequence charSequence38 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap25, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean45 = strComparableMap41.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence48 = strComparableMap41.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet49 = strComparableMap41.keySet();
        java.lang.CharSequence charSequence52 = strComparableMap41.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap41.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.lang.Object obj56 = null;
        boolean boolean57 = strComparableMap41.containsValue(obj56);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable60 = null;
        java.lang.CharSequence charSequence62 = strComparableMap59.putIfAbsent(strComparable60, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence64 = strComparableMap59.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet65 = strComparableMap59.entrySet();
        java.lang.String str66 = strComparableMap59.toString();
        java.lang.String str67 = strComparableMap59.toString();
        int int68 = strComparableMap59.size();
        java.lang.Object obj69 = strComparableMap59.clone();
        boolean boolean70 = strComparableMap1.remove((java.lang.Object) boolean57, obj69);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet21);
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertNotNull(strComparableSet23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "{null=, =}" + "'", charSequence38, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNotNull(strComparableSet49);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNotNull(strComparableEntrySet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "{null=}" + "'", str66, "{null=}");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "{null=}" + "'", str67, "{null=}");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "{null=}");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        strComparableMap1.clear();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet14 = strComparableMap1.keySet();
        java.lang.Object obj15 = strComparableMap1.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertNotNull(strComparableSet14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{}");
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.lang.String str8 = strComparableMap1.toString();
        boolean boolean12 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        java.lang.CharSequence charSequence17 = strComparableMap14.putIfAbsent(strComparable15, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = strComparableMap14.get((java.lang.Object) true);
        int int20 = strComparableMap14.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        boolean boolean27 = strComparableMap22.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence30 = strComparableMap22.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable35 = null;
        java.lang.CharSequence charSequence37 = strComparableMap34.putIfAbsent(strComparable35, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = strComparableMap34.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean41 = strComparableMap22.remove((java.lang.Object) strComparableMap32, (java.lang.Object) "hi!");
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable45 = null;
        java.lang.CharSequence charSequence47 = strComparableMap44.putIfAbsent(strComparable45, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence49 = strComparableMap44.get((java.lang.Object) true);
        int int50 = strComparableMap44.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        boolean boolean57 = strComparableMap52.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence60 = strComparableMap52.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable65 = null;
        java.lang.CharSequence charSequence67 = strComparableMap64.putIfAbsent(strComparable65, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence70 = strComparableMap64.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean71 = strComparableMap52.remove((java.lang.Object) strComparableMap62, (java.lang.Object) "hi!");
        strComparableMap44.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        strComparableMap32.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet74 = strComparableMap62.keySet();
        boolean boolean78 = strComparableMap62.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, =}");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strComparableSet74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        java.util.LinkedHashMap<java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.String> strComparableMapMap2 = new java.util.LinkedHashMap<java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.String>((int) (short) 1, (float) '#');
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#');
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        boolean boolean29 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean36 = strComparableMap32.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence39 = strComparableMap32.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable44 = null;
        java.lang.CharSequence charSequence46 = strComparableMap43.putIfAbsent(strComparable44, (java.lang.CharSequence) "");
        boolean boolean48 = strComparableMap43.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence51 = strComparableMap43.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean54 = strComparableMap53.isEmpty();
        java.lang.Object obj55 = strComparableMap53.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection56 = strComparableMap53.values();
        strComparableMap43.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap53);
        java.lang.String str58 = strComparableMap43.toString();
        boolean boolean59 = strComparableMap32.remove((java.lang.Object) strComparableMap41, (java.lang.Object) str58);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable62 = null;
        java.lang.CharSequence charSequence64 = strComparableMap61.putIfAbsent(strComparable62, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence66 = strComparableMap61.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet67 = strComparableMap61.entrySet();
        java.lang.String str68 = strComparableMap61.toString();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection69 = strComparableMap61.values();
        boolean boolean70 = strComparableMap32.equals((java.lang.Object) strComparableMap61);
        boolean boolean74 = strComparableMap32.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet75 = strComparableMap32.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap77 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable78 = null;
        java.lang.CharSequence charSequence80 = strComparableMap77.putIfAbsent(strComparable78, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence82 = strComparableMap77.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet83 = strComparableMap77.entrySet();
        java.lang.CharSequence charSequence86 = strComparableMap77.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence89 = strComparableMap77.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, =}");
        strComparableMap32.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap77);
        java.lang.CharSequence charSequence93 = strComparableMap32.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =}");
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap95 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "{null=, =}" + "'", str58, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertNotNull(strComparableEntrySet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "{null=}" + "'", str68, "{null=}");
        org.junit.Assert.assertNotNull(charSequenceCollection69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strComparableSet75);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertNull(charSequence82);
        org.junit.Assert.assertNotNull(strComparableEntrySet83);
        org.junit.Assert.assertNull(charSequence86);
        org.junit.Assert.assertNull(charSequence89);
        org.junit.Assert.assertNull(charSequence93);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet19 = strComparableMap16.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap16.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet21 = strComparableMap16.keySet();
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap16);
        java.lang.String str23 = strComparableMap1.toString();
        java.lang.CharSequence charSequence26 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        java.lang.Object obj34 = strComparableMap28.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.lang.String str46 = strComparableMap36.toString();
        boolean boolean47 = strComparableMap1.remove(obj34, (java.lang.Object) str46);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean53 = strComparableMap52.isEmpty();
        java.lang.Object obj54 = strComparableMap52.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection55 = strComparableMap52.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable58 = null;
        java.lang.CharSequence charSequence60 = strComparableMap57.putIfAbsent(strComparable58, (java.lang.CharSequence) "");
        boolean boolean62 = strComparableMap57.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable65 = null;
        java.lang.CharSequence charSequence67 = strComparableMap64.putIfAbsent(strComparable65, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence69 = strComparableMap64.get((java.lang.Object) true);
        int int70 = strComparableMap64.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection71 = strComparableMap64.values();
        boolean boolean72 = strComparableMap57.containsValue((java.lang.Object) strComparableMap64);
        boolean boolean73 = strComparableMap52.equals((java.lang.Object) strComparableMap64);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap75 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable76 = null;
        java.lang.CharSequence charSequence78 = strComparableMap75.putIfAbsent(strComparable76, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence80 = strComparableMap75.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap82 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable83 = null;
        java.lang.CharSequence charSequence85 = strComparableMap82.putIfAbsent(strComparable83, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence87 = strComparableMap82.get((java.lang.Object) true);
        int int88 = strComparableMap82.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet89 = strComparableMap82.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap93 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean94 = strComparableMap82.equals((java.lang.Object) 0);
        strComparableMap75.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap82);
        boolean boolean96 = strComparableMap52.containsValue((java.lang.Object) strComparableMap75);
        java.lang.CharSequence charSequence97 = strComparableMap50.get((java.lang.Object) boolean96);
        java.lang.CharSequence charSequence99 = strComparableMap48.getOrDefault((java.lang.Object) strComparableMap50, (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet19);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertNotNull(strComparableSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{null=, =}" + "'", str23, "{null=, =}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{null=}");
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{null=}" + "'", str46, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection55);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(charSequence78);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertNull(charSequence85);
        org.junit.Assert.assertNull(charSequence87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(strComparableSet89);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(charSequence97);
        org.junit.Assert.assertEquals("'" + charSequence99 + "' != '" + "{{}={null=, =, hi!=hi!}}" + "'", charSequence99, "{{}={null=, =, hi!=hi!}}");
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence10 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap8, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationMap13 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>(2, (float) 'a');
        boolean boolean14 = strComparableMap1.equals((java.lang.Object) 'a');
        java.lang.CharSequence charSequence17 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=}");
        boolean boolean18 = strComparableMap1.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        boolean boolean21 = strComparableMap16.containsValue((java.lang.Object) (short) 100);
        int int22 = strComparableMap16.size();
        java.lang.CharSequence charSequence24 = strComparableMap10.getOrDefault((java.lang.Object) strComparableMap16, (java.lang.CharSequence) "hi!");
        boolean boolean25 = strComparableMap1.equals((java.lang.Object) charSequence24);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        int int27 = strComparableMap1.size();
        java.lang.CharSequence charSequence30 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNull(charSequence30);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        java.util.LinkedHashMap<java.lang.Cloneable, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>> cloneableMap3 = new java.util.LinkedHashMap<java.lang.Cloneable, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>>(10, 10.0f, true);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet5 = strComparableMap1.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertNotNull(strComparableEntrySet5);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap0 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable3 = null;
        java.lang.CharSequence charSequence5 = strComparableMap2.putIfAbsent(strComparable3, (java.lang.CharSequence) "");
        boolean boolean7 = strComparableMap2.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence10 = strComparableMap2.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        java.lang.Object obj14 = strComparableMap12.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap12.values();
        strComparableMap2.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.lang.CharSequence charSequence17 = strComparableMap0.remove((java.lang.Object) strComparableMap12);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet18 = strComparableMap0.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        boolean boolean25 = strComparableMap20.containsValue((java.lang.Object) (short) 100);
        int int26 = strComparableMap20.size();
        boolean boolean27 = strComparableMap20.isEmpty();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection28 = strComparableMap20.values();
        boolean boolean30 = strComparableMap20.containsKey((java.lang.Object) (short) -1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        boolean boolean37 = strComparableMap32.containsValue((java.lang.Object) (short) 100);
        int int38 = strComparableMap32.size();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet39 = strComparableMap32.entrySet();
        boolean boolean40 = strComparableMap0.remove((java.lang.Object) (short) -1, (java.lang.Object) strComparableEntrySet39);
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNotNull(strComparableEntrySet18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(strComparableEntrySet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap7.get((java.lang.Object) true);
        java.lang.Object obj13 = strComparableMap7.clone();
        java.lang.CharSequence charSequence16 = strComparableMap7.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj17 = null;
        java.lang.CharSequence charSequence18 = strComparableMap7.get(obj17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap22.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap22.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap22.keySet();
        boolean boolean28 = strComparableMap7.equals((java.lang.Object) strComparableMap22);
        java.lang.String str29 = strComparableMap7.toString();
        boolean boolean30 = strComparableMap1.equals((java.lang.Object) strComparableMap7);
        boolean boolean34 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence43 = strComparableMap37.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable46 = null;
        java.lang.CharSequence charSequence48 = strComparableMap45.putIfAbsent(strComparable46, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence50 = strComparableMap45.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet51 = strComparableMap45.entrySet();
        strComparableMap37.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap45);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence59 = strComparableMap54.get((java.lang.Object) true);
        int int60 = strComparableMap54.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable63 = null;
        java.lang.CharSequence charSequence65 = strComparableMap62.putIfAbsent(strComparable63, (java.lang.CharSequence) "");
        boolean boolean67 = strComparableMap62.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence70 = strComparableMap62.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap74 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable75 = null;
        java.lang.CharSequence charSequence77 = strComparableMap74.putIfAbsent(strComparable75, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence80 = strComparableMap74.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean81 = strComparableMap62.remove((java.lang.Object) strComparableMap72, (java.lang.Object) "hi!");
        strComparableMap54.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap72);
        boolean boolean83 = strComparableMap72.isEmpty();
        strComparableMap37.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap72);
        boolean boolean85 = strComparableMap35.containsKey((java.lang.Object) strComparableMap72);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection86 = strComparableMap35.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertNotNull(strComparableSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{null=, =}" + "'", str29, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNotNull(strComparableEntrySet51);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection86);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        java.util.LinkedHashMap<java.io.Serializable, java.lang.constant.ConstantDesc> serializableMap0 = new java.util.LinkedHashMap<java.io.Serializable, java.lang.constant.ConstantDesc>();
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10, (float) (byte) 0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.CharSequence charSequence4 = strComparableMap1.get((java.lang.Object) (byte) 1);
        boolean boolean8 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.String str9 = strComparableMap1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap37.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence58 = strComparableMap53.get((java.lang.Object) true);
        int int59 = strComparableMap53.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet60 = strComparableMap53.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean65 = strComparableMap53.equals((java.lang.Object) 0);
        strComparableMap46.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap53);
        java.lang.CharSequence charSequence68 = strComparableMap37.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "{null=}");
        int int69 = strComparableMap37.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(strComparableSet60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "{null=}" + "'", charSequence68, "{null=}");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = strComparableMap9.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = strComparableMap17.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet23 = strComparableMap17.entrySet();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap17);
        java.lang.Class<?> wildcardClass25 = strComparableMap17.getClass();
        boolean boolean26 = strComparableMap1.containsKey((java.lang.Object) wildcardClass25);
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Cloneable> charSequenceIterableMap28 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Cloneable>();
        java.lang.CharSequence charSequence30 = strComparableMap1.getOrDefault((java.lang.Object) charSequenceIterableMap28, (java.lang.CharSequence) "{{null=, =}={}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNotNull(strComparableEntrySet23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "{{null=, =}={}}" + "'", charSequence30, "{{null=, =}={}}");
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj13 = strComparableMap1.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet14 = strComparableMap1.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet21 = strComparableMap18.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap18.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet23 = strComparableMap18.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean26 = strComparableMap25.isEmpty();
        java.lang.Object obj27 = strComparableMap25.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        strComparableMap25.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        strComparableMap25.clear();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap25);
        java.lang.CharSequence charSequence38 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap25, (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence41 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{{null=, =}={}}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        boolean boolean45 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, hi!=hi!}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet21);
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertNotNull(strComparableSet23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "{null=, =}" + "'", charSequence38, "{null=, =}");
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence34 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj35 = null;
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.lang.CharSequence charSequence41 = strComparableMap37.remove((java.lang.Object) true);
        boolean boolean45 = strComparableMap37.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap1.remove(obj35, (java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap48.get((java.lang.Object) true);
        java.lang.Object obj54 = strComparableMap48.clone();
        java.lang.CharSequence charSequence57 = strComparableMap48.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj58 = null;
        java.lang.CharSequence charSequence59 = strComparableMap48.get(obj58);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean64 = strComparableMap63.isEmpty();
        strComparableMap61.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap63);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet66 = strComparableMap63.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection67 = strComparableMap63.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet68 = strComparableMap63.keySet();
        boolean boolean69 = strComparableMap48.equals((java.lang.Object) strComparableMap63);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        java.lang.String str71 = strComparableMap1.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{null=}");
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "" + "'", charSequence59, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet66);
        org.junit.Assert.assertNotNull(charSequenceCollection67);
        org.junit.Assert.assertNotNull(strComparableSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{null=, =}" + "'", str71, "{null=, =}");
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet52 = strComparableMap47.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence59 = strComparableMap54.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet60 = strComparableMap54.entrySet();
        java.lang.String str61 = strComparableMap54.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean64 = strComparableMap63.isEmpty();
        java.lang.Object obj65 = strComparableMap63.clone();
        java.lang.CharSequence charSequence67 = strComparableMap63.remove((java.lang.Object) true);
        boolean boolean71 = strComparableMap63.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean72 = strComparableMap54.equals((java.lang.Object) "");
        strComparableMap47.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap54);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet74 = strComparableMap47.keySet();
        boolean boolean78 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "{}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection79 = strComparableMap47.values();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet52);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertNotNull(strComparableEntrySet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{null=}" + "'", str61, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "{}");
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strComparableSet74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection79);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean22 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence25 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int26 = strComparableMap18.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean33 = strComparableMap18.equals((java.lang.Object) charSequence32);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection34 = strComparableMap18.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap36.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        strComparableMap36.clear();
        boolean boolean44 = strComparableMap18.containsKey((java.lang.Object) strComparableMap36);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection34);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) ' ', (float) (byte) 10);
        java.lang.CharSequence charSequence5 = strComparableMap2.putIfAbsent((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNull(charSequence5);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence6 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap3.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.lang.Object obj15 = strComparableMap9.clone();
        java.lang.CharSequence charSequence18 = strComparableMap9.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj19 = null;
        java.lang.CharSequence charSequence20 = strComparableMap9.get(obj19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean25 = strComparableMap24.isEmpty();
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap24);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet27 = strComparableMap24.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection28 = strComparableMap24.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet29 = strComparableMap24.keySet();
        boolean boolean30 = strComparableMap9.equals((java.lang.Object) strComparableMap24);
        java.lang.String str31 = strComparableMap9.toString();
        java.lang.CharSequence charSequence34 = strComparableMap9.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence41 = strComparableMap36.get((java.lang.Object) true);
        java.lang.Object obj42 = strComparableMap36.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable45 = null;
        java.lang.CharSequence charSequence47 = strComparableMap44.putIfAbsent(strComparable45, (java.lang.CharSequence) "");
        boolean boolean49 = strComparableMap44.containsValue((java.lang.Object) (short) 100);
        int int50 = strComparableMap44.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence53 = strComparableMap44.getOrDefault((java.lang.Object) strComparableMap51, (java.lang.CharSequence) "");
        java.lang.String str54 = strComparableMap44.toString();
        boolean boolean55 = strComparableMap9.remove(obj42, (java.lang.Object) str54);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        java.lang.CharSequence charSequence61 = strComparableMap58.putIfAbsent(strComparable59, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence63 = strComparableMap58.get((java.lang.Object) true);
        int int64 = strComparableMap58.size();
        java.lang.CharSequence charSequence66 = strComparableMap58.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence69 = strComparableMap58.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj70 = strComparableMap58.clone();
        boolean boolean71 = strComparableMap3.remove((java.lang.Object) strComparableMap56, (java.lang.Object) strComparableMap58);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet72 = strComparableMap56.keySet();
        java.lang.Class<?> wildcardClass73 = strComparableSet72.getClass();
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{null=}");
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "" + "'", charSequence20, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet27);
        org.junit.Assert.assertNotNull(charSequenceCollection28);
        org.junit.Assert.assertNotNull(strComparableSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{null=, =}" + "'", str31, "{null=, =}");
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{null=}");
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "" + "'", charSequence53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{null=}" + "'", str54, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strComparableSet72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = strComparableMap13.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean20 = strComparableMap1.remove((java.lang.Object) strComparableMap11, (java.lang.Object) "hi!");
        java.lang.String str21 = strComparableMap1.toString();
        boolean boolean25 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, hi!=hi!}", (java.lang.CharSequence) "{null=, hi!=hi!}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{null=, =}" + "'", str21, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        boolean boolean14 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.CharSequence charSequence26 = strComparableMap2.get((java.lang.Object) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean33 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet37 = strComparableMap29.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap39.get((java.lang.Object) true);
        int int45 = strComparableMap39.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap47.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = strComparableMap55.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet61 = strComparableMap55.entrySet();
        strComparableMap47.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap55);
        java.lang.Class<?> wildcardClass63 = strComparableMap55.getClass();
        boolean boolean64 = strComparableMap39.containsKey((java.lang.Object) wildcardClass63);
        boolean boolean65 = strComparableMap29.equals((java.lang.Object) strComparableMap39);
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable69 = null;
        java.lang.CharSequence charSequence71 = strComparableMap68.putIfAbsent(strComparable69, (java.lang.CharSequence) "");
        boolean boolean73 = strComparableMap68.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence76 = strComparableMap68.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap78 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean79 = strComparableMap78.isEmpty();
        java.lang.Object obj80 = strComparableMap78.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection81 = strComparableMap78.values();
        strComparableMap68.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap78);
        java.lang.String str83 = strComparableMap68.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap85 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean86 = strComparableMap85.isEmpty();
        java.lang.Object obj87 = strComparableMap85.clone();
        java.lang.CharSequence charSequence89 = strComparableMap85.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence91 = strComparableMap85.get((java.lang.Object) 100L);
        boolean boolean92 = strComparableMap68.containsValue((java.lang.Object) strComparableMap85);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet93 = strComparableMap85.keySet();
        java.lang.CharSequence charSequence94 = strComparableMap22.remove((java.lang.Object) strComparableSet93);
        strComparableMap22.clear();
        boolean boolean99 = strComparableMap22.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNotNull(strComparableSet37);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNotNull(strComparableEntrySet61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(charSequence76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{null=, =}" + "'", str83, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "{}");
        org.junit.Assert.assertNull(charSequence89);
        org.junit.Assert.assertNull(charSequence91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strComparableSet93);
        org.junit.Assert.assertNull(charSequence94);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 0, (float) (short) 10, false);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable6 = null;
        java.lang.CharSequence charSequence8 = strComparableMap5.putIfAbsent(strComparable6, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence10 = strComparableMap5.get((java.lang.Object) true);
        int int11 = strComparableMap5.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet12 = strComparableMap5.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean17 = strComparableMap5.equals((java.lang.Object) 0);
        java.lang.CharSequence charSequence19 = strComparableMap3.getOrDefault((java.lang.Object) 0, (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence21 = strComparableMap3.get((java.lang.Object) (-1));
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(strComparableSet12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "{null=, =}" + "'", charSequence19, "{null=, =}");
        org.junit.Assert.assertNull(charSequence21);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        int int16 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        int int24 = strComparableMap18.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap26.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        boolean boolean31 = strComparableMap26.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence34 = strComparableMap26.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap38.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean45 = strComparableMap26.remove((java.lang.Object) strComparableMap36, (java.lang.Object) "hi!");
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap48.get((java.lang.Object) true);
        int int54 = strComparableMap48.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable57 = null;
        java.lang.CharSequence charSequence59 = strComparableMap56.putIfAbsent(strComparable57, (java.lang.CharSequence) "");
        boolean boolean61 = strComparableMap56.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence64 = strComparableMap56.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable69 = null;
        java.lang.CharSequence charSequence71 = strComparableMap68.putIfAbsent(strComparable69, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence74 = strComparableMap68.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean75 = strComparableMap56.remove((java.lang.Object) strComparableMap66, (java.lang.Object) "hi!");
        strComparableMap48.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap66);
        strComparableMap36.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap66);
        java.lang.CharSequence charSequence80 = strComparableMap36.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.String str81 = strComparableMap36.toString();
        java.lang.CharSequence charSequence82 = strComparableMap1.get((java.lang.Object) str81);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "{{}={null=, =, hi!=hi!}}" + "'", str81, "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertNull(charSequence82);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable4 = null;
        java.lang.CharSequence charSequence6 = strComparableMap3.putIfAbsent(strComparable4, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence8 = strComparableMap3.get((java.lang.Object) true);
        int int9 = strComparableMap3.size();
        java.lang.CharSequence charSequence11 = strComparableMap3.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence14 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str15 = strComparableMap3.toString();
        java.lang.CharSequence charSequence18 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.CharSequence charSequence19 = strComparableMap1.remove((java.lang.Object) strComparableMap3);
        java.lang.Class<?> wildcardClass20 = strComparableMap1.getClass();
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{null=, =}" + "'", str15, "{null=, =}");
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        int int13 = strComparableMap7.size();
        java.lang.CharSequence charSequence15 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap7, (java.lang.CharSequence) "hi!");
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean21 = strComparableMap20.isEmpty();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        boolean boolean29 = strComparableMap24.containsValue((java.lang.Object) (short) 100);
        int int30 = strComparableMap24.size();
        java.lang.CharSequence charSequence32 = strComparableMap18.getOrDefault((java.lang.Object) strComparableMap24, (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable35 = null;
        java.lang.CharSequence charSequence37 = strComparableMap34.putIfAbsent(strComparable35, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence39 = strComparableMap34.get((java.lang.Object) true);
        java.lang.Object obj40 = strComparableMap34.clone();
        java.lang.CharSequence charSequence43 = strComparableMap34.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj44 = null;
        java.lang.CharSequence charSequence45 = strComparableMap34.get(obj44);
        strComparableMap34.clear();
        boolean boolean47 = strComparableMap24.containsKey((java.lang.Object) strComparableMap34);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap24);
        boolean boolean52 = strComparableMap24.replace((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=}");
        int int53 = strComparableMap24.size();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{null=}");
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        strComparableMap15.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean57 = strComparableMap56.isEmpty();
        strComparableMap54.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap56);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable61 = null;
        java.lang.CharSequence charSequence63 = strComparableMap60.putIfAbsent(strComparable61, (java.lang.CharSequence) "");
        boolean boolean65 = strComparableMap60.containsValue((java.lang.Object) (short) 100);
        int int66 = strComparableMap60.size();
        java.lang.CharSequence charSequence68 = strComparableMap54.getOrDefault((java.lang.Object) strComparableMap60, (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable71 = null;
        java.lang.CharSequence charSequence73 = strComparableMap70.putIfAbsent(strComparable71, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence75 = strComparableMap70.get((java.lang.Object) true);
        java.lang.Object obj76 = strComparableMap70.clone();
        java.lang.CharSequence charSequence79 = strComparableMap70.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj80 = null;
        java.lang.CharSequence charSequence81 = strComparableMap70.get(obj80);
        strComparableMap70.clear();
        boolean boolean83 = strComparableMap60.containsKey((java.lang.Object) strComparableMap70);
        java.lang.CharSequence charSequence84 = strComparableMap15.get((java.lang.Object) boolean83);
        boolean boolean88 = strComparableMap15.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.Class<?> wildcardClass89 = strComparableMap15.getClass();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "{null=}");
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertEquals("'" + charSequence81 + "' != '" + "" + "'", charSequence81, "");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(charSequence84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        boolean boolean11 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "{}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet12 = strComparableMap1.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet12);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence10 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap8, (java.lang.CharSequence) "");
        java.lang.Object obj12 = null;
        boolean boolean13 = strComparableMap1.remove((java.lang.Object) 0L, obj12);
        int int14 = strComparableMap1.size();
        strComparableMap1.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.lang.Object obj43 = strComparableMap37.clone();
        java.lang.String str44 = strComparableMap37.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        int int52 = strComparableMap46.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = strComparableMap54.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable63 = null;
        java.lang.CharSequence charSequence65 = strComparableMap62.putIfAbsent(strComparable63, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence67 = strComparableMap62.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet68 = strComparableMap62.entrySet();
        strComparableMap54.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        java.lang.Class<?> wildcardClass70 = strComparableMap62.getClass();
        boolean boolean71 = strComparableMap46.containsKey((java.lang.Object) wildcardClass70);
        boolean boolean72 = strComparableMap37.containsValue((java.lang.Object) strComparableMap46);
        java.lang.CharSequence charSequence73 = strComparableMap27.get((java.lang.Object) strComparableMap46);
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.constant.Constable> cloneableMap75 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.constant.Constable>(1);
        boolean boolean76 = strComparableMap46.containsKey((java.lang.Object) 1);
        java.lang.Object obj77 = strComparableMap46.clone();
        boolean boolean78 = strComparableMap46.isEmpty();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet79 = strComparableMap46.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet80 = strComparableMap46.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{null=}");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{null=}" + "'", str44, "{null=}");
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNotNull(strComparableEntrySet68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "{null=}");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strComparableSet79);
        org.junit.Assert.assertNotNull(strComparableEntrySet80);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.lang.reflect.GenericDeclaration> annotatedElementMap1 = new java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.lang.reflect.GenericDeclaration>((int) 'a');
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        boolean boolean17 = strComparableMap1.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        boolean boolean24 = strComparableMap19.containsValue((java.lang.Object) (short) 100);
        int int25 = strComparableMap19.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence28 = strComparableMap19.getOrDefault((java.lang.Object) strComparableMap26, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationMap31 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>(2, (float) 'a');
        boolean boolean32 = strComparableMap19.equals((java.lang.Object) 'a');
        java.lang.Object obj33 = strComparableMap19.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable36 = null;
        java.lang.CharSequence charSequence38 = strComparableMap35.putIfAbsent(strComparable36, (java.lang.CharSequence) "");
        boolean boolean40 = strComparableMap35.containsValue((java.lang.Object) (short) 100);
        int int41 = strComparableMap35.size();
        boolean boolean42 = strComparableMap35.isEmpty();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection43 = strComparableMap35.values();
        boolean boolean44 = strComparableMap19.containsKey((java.lang.Object) charSequenceCollection43);
        boolean boolean45 = strComparableMap1.containsKey((java.lang.Object) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence52 = strComparableMap47.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet53 = strComparableMap47.entrySet();
        java.lang.String str54 = strComparableMap47.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean57 = strComparableMap56.isEmpty();
        java.lang.Object obj58 = strComparableMap56.clone();
        java.lang.CharSequence charSequence60 = strComparableMap56.remove((java.lang.Object) true);
        boolean boolean64 = strComparableMap56.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean65 = strComparableMap47.equals((java.lang.Object) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable68 = null;
        java.lang.CharSequence charSequence70 = strComparableMap67.putIfAbsent(strComparable68, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence72 = strComparableMap67.get((java.lang.Object) true);
        java.lang.Object obj73 = strComparableMap67.clone();
        java.lang.CharSequence charSequence76 = strComparableMap67.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj77 = null;
        java.lang.CharSequence charSequence78 = strComparableMap67.get(obj77);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap80 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap82 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean83 = strComparableMap82.isEmpty();
        strComparableMap80.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap82);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet85 = strComparableMap82.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection86 = strComparableMap82.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet87 = strComparableMap82.keySet();
        boolean boolean88 = strComparableMap67.equals((java.lang.Object) strComparableMap82);
        java.lang.String str89 = strComparableMap67.toString();
        boolean boolean90 = strComparableMap1.remove((java.lang.Object) strComparableMap47, (java.lang.Object) str89);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "" + "'", charSequence28, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{null=}");
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNotNull(strComparableEntrySet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{null=}" + "'", str54, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{}");
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "{null=}");
        org.junit.Assert.assertNull(charSequence76);
        org.junit.Assert.assertEquals("'" + charSequence78 + "' != '" + "" + "'", charSequence78, "");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet85);
        org.junit.Assert.assertNotNull(charSequenceCollection86);
        org.junit.Assert.assertNotNull(strComparableSet87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "{null=, =}" + "'", str89, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        int int8 = strComparableMap6.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet9 = strComparableMap6.keySet();
        java.lang.String str10 = strComparableMap6.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strComparableSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap12.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet26 = strComparableMap20.entrySet();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.lang.CharSequence charSequence29 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap20, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        boolean boolean36 = strComparableMap31.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean39 = strComparableMap38.isEmpty();
        java.lang.Object obj40 = strComparableMap38.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection41 = strComparableMap38.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable44 = null;
        java.lang.CharSequence charSequence46 = strComparableMap43.putIfAbsent(strComparable44, (java.lang.CharSequence) "");
        boolean boolean48 = strComparableMap43.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap50.get((java.lang.Object) true);
        int int56 = strComparableMap50.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection57 = strComparableMap50.values();
        boolean boolean58 = strComparableMap43.containsValue((java.lang.Object) strComparableMap50);
        boolean boolean59 = strComparableMap38.equals((java.lang.Object) strComparableMap50);
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet61 = strComparableMap31.entrySet();
        java.lang.CharSequence charSequence64 = strComparableMap31.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj65 = null;
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean68 = strComparableMap67.isEmpty();
        java.lang.Object obj69 = strComparableMap67.clone();
        java.lang.CharSequence charSequence71 = strComparableMap67.remove((java.lang.Object) true);
        boolean boolean75 = strComparableMap67.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean76 = strComparableMap31.remove(obj65, (java.lang.Object) "{null=, =}");
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNotNull(strComparableEntrySet26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "{null=, =}" + "'", charSequence29, "{null=, =}");
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection41);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet61);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "{}");
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj13 = strComparableMap1.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet14 = strComparableMap1.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet21 = strComparableMap18.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap18.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet23 = strComparableMap18.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean26 = strComparableMap25.isEmpty();
        java.lang.Object obj27 = strComparableMap25.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        strComparableMap25.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        strComparableMap25.clear();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap25);
        java.lang.CharSequence charSequence38 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap25, (java.lang.CharSequence) "{null=, =}");
        java.lang.Object obj39 = strComparableMap25.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet21);
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertNotNull(strComparableSet23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "{null=, =}" + "'", charSequence38, "{null=, =}");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.Object> genericDeclarationMap0 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.Object>();
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        int int8 = strComparableMap6.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0);
        java.lang.CharSequence charSequence12 = strComparableMap10.get((java.lang.Object) (short) 0);
        boolean boolean14 = strComparableMap6.remove((java.lang.Object) strComparableMap10, (java.lang.Object) 1.0d);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        boolean boolean21 = strComparableMap16.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence24 = strComparableMap16.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean26 = strComparableMap16.containsKey((java.lang.Object) 1);
        boolean boolean30 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        boolean boolean31 = strComparableMap10.containsKey((java.lang.Object) "");
        java.lang.Class<?> wildcardClass32 = strComparableMap10.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence45 = strComparableMap39.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean46 = strComparableMap27.remove((java.lang.Object) strComparableMap37, (java.lang.Object) "hi!");
        boolean boolean47 = strComparableMap1.containsKey((java.lang.Object) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap50.get((java.lang.Object) true);
        int int56 = strComparableMap50.size();
        java.lang.CharSequence charSequence58 = strComparableMap50.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence61 = strComparableMap50.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str62 = strComparableMap50.toString();
        java.lang.CharSequence charSequence63 = strComparableMap48.remove((java.lang.Object) strComparableMap50);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable66 = null;
        java.lang.CharSequence charSequence68 = strComparableMap65.putIfAbsent(strComparable66, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence70 = strComparableMap65.get((java.lang.Object) true);
        int int71 = strComparableMap65.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet72 = strComparableMap65.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap76 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean77 = strComparableMap65.equals((java.lang.Object) 0);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet78 = strComparableMap65.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap80 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean81 = strComparableMap80.isEmpty();
        java.lang.Object obj82 = strComparableMap80.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap84 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap86 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean87 = strComparableMap86.isEmpty();
        strComparableMap84.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap86);
        strComparableMap80.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap86);
        int int90 = strComparableMap80.size();
        boolean boolean91 = strComparableMap48.remove((java.lang.Object) strComparableMap65, (java.lang.Object) strComparableMap80);
        java.lang.String str92 = strComparableMap48.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{null=, =}" + "'", str62, "{null=, =}");
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(strComparableSet72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strComparableSet78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "{}");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "{null=, =}" + "'", str92, "{null=, =}");
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(10, (float) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0, (float) ' ', true);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean20 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection40 = strComparableMap37.values();
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.lang.String str42 = strComparableMap27.toString();
        boolean boolean43 = strComparableMap16.remove((java.lang.Object) strComparableMap25, (java.lang.Object) str42);
        boolean boolean44 = strComparableMap13.equals((java.lang.Object) strComparableMap25);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        boolean boolean51 = strComparableMap46.containsValue((java.lang.Object) (short) 100);
        int int52 = strComparableMap46.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence55 = strComparableMap46.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        java.lang.Object obj59 = strComparableMap57.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection60 = strComparableMap57.values();
        boolean boolean61 = strComparableMap25.remove((java.lang.Object) strComparableMap53, (java.lang.Object) strComparableMap57);
        boolean boolean62 = strComparableMap1.equals((java.lang.Object) strComparableMap57);
        strComparableMap57.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable66 = null;
        java.lang.CharSequence charSequence68 = strComparableMap65.putIfAbsent(strComparable66, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence70 = strComparableMap65.get((java.lang.Object) true);
        int int71 = strComparableMap65.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap73 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable74 = null;
        java.lang.CharSequence charSequence76 = strComparableMap73.putIfAbsent(strComparable74, (java.lang.CharSequence) "");
        boolean boolean78 = strComparableMap73.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence81 = strComparableMap73.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap83 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap85 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable86 = null;
        java.lang.CharSequence charSequence88 = strComparableMap85.putIfAbsent(strComparable86, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence91 = strComparableMap85.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean92 = strComparableMap73.remove((java.lang.Object) strComparableMap83, (java.lang.Object) "hi!");
        strComparableMap65.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap83);
        boolean boolean94 = strComparableMap57.equals((java.lang.Object) strComparableMap83);
        java.lang.Object obj95 = strComparableMap83.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{null=, =}" + "'", str42, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "" + "'", charSequence55, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNull(charSequence76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(charSequence81);
        org.junit.Assert.assertNull(charSequence88);
        org.junit.Assert.assertNull(charSequence91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(obj95);
        org.junit.Assert.assertEquals(obj95.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj95), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj95), "{}");
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.CharSequence charSequence4 = strComparableMap1.get((java.lang.Object) (byte) 1);
        java.lang.CharSequence charSequence7 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=, =}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet8 = strComparableMap1.entrySet();
        java.lang.Class<?> wildcardClass9 = strComparableEntrySet8.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNotNull(strComparableEntrySet8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap12.get((java.lang.Object) true);
        java.lang.Object obj18 = strComparableMap12.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        boolean boolean25 = strComparableMap20.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence28 = strComparableMap20.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean31 = strComparableMap30.isEmpty();
        java.lang.Object obj32 = strComparableMap30.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection33 = strComparableMap30.values();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap30);
        boolean boolean35 = strComparableMap1.remove((java.lang.Object) strComparableMap12, (java.lang.Object) strComparableMap30);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection36 = strComparableMap30.values();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection37 = strComparableMap30.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{null=}");
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection36);
        org.junit.Assert.assertNotNull(charSequenceCollection37);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection19 = strComparableMap16.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        boolean boolean26 = strComparableMap21.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        int int34 = strComparableMap28.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap28.values();
        boolean boolean36 = strComparableMap21.containsValue((java.lang.Object) strComparableMap28);
        boolean boolean37 = strComparableMap16.equals((java.lang.Object) strComparableMap28);
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        boolean boolean39 = strComparableMap16.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean44 = strComparableMap43.isEmpty();
        strComparableMap41.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap43);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet46 = strComparableMap43.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection47 = strComparableMap43.values();
        boolean boolean48 = strComparableMap16.containsValue((java.lang.Object) charSequenceCollection47);
        java.lang.Class<?> wildcardClass49 = charSequenceCollection47.getClass();
        java.lang.CharSequence charSequence51 = strComparableMap1.getOrDefault((java.lang.Object) charSequenceCollection47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence54 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection19);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet46);
        org.junit.Assert.assertNotNull(charSequenceCollection47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "" + "'", charSequence51, "");
        org.junit.Assert.assertNull(charSequence54);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', 1.0f, true);
        java.lang.Class<?> wildcardClass4 = strComparableMap3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        java.lang.Object obj22 = strComparableMap16.clone();
        java.lang.CharSequence charSequence25 = strComparableMap16.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj26 = null;
        java.lang.CharSequence charSequence27 = strComparableMap16.get(obj26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap31.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap31.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet36 = strComparableMap31.keySet();
        boolean boolean37 = strComparableMap16.equals((java.lang.Object) strComparableMap31);
        java.lang.String str38 = strComparableMap16.toString();
        boolean boolean39 = strComparableMap10.equals((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        int int48 = strComparableMap41.size();
        java.lang.CharSequence charSequence49 = strComparableMap10.remove((java.lang.Object) strComparableMap41);
        boolean boolean50 = strComparableMap1.containsKey((java.lang.Object) strComparableMap10);
        java.lang.Object obj51 = null;
        boolean boolean52 = strComparableMap1.containsKey(obj51);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{null=}");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNotNull(strComparableSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=, =}" + "'", str38, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 0, (float) (short) 10, false);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable6 = null;
        java.lang.CharSequence charSequence8 = strComparableMap5.putIfAbsent(strComparable6, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence10 = strComparableMap5.get((java.lang.Object) true);
        int int11 = strComparableMap5.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = strComparableMap13.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence26 = strComparableMap21.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet27 = strComparableMap21.entrySet();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap21);
        java.lang.Class<?> wildcardClass29 = strComparableMap21.getClass();
        boolean boolean30 = strComparableMap5.containsKey((java.lang.Object) wildcardClass29);
        int int31 = strComparableMap5.size();
        java.lang.Object obj32 = strComparableMap5.clone();
        boolean boolean33 = strComparableMap3.containsKey(obj32);
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNotNull(strComparableEntrySet27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{null=}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.lang.CharSequence charSequence10 = strComparableMap6.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence12 = strComparableMap6.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence14 = strComparableMap1.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean20 = strComparableMap19.isEmpty();
        java.lang.Object obj21 = strComparableMap19.clone();
        java.lang.CharSequence charSequence23 = strComparableMap19.remove((java.lang.Object) true);
        boolean boolean27 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        strComparableMap19.clear();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        int int30 = strComparableMap19.size();
        boolean boolean34 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet39 = strComparableMap38.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean42 = strComparableMap41.isEmpty();
        java.lang.Object obj43 = strComparableMap41.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection44 = strComparableMap41.values();
        strComparableMap38.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap41);
        java.lang.CharSequence charSequence47 = strComparableMap19.getOrDefault((java.lang.Object) strComparableMap41, (java.lang.CharSequence) "{{null=, =}={}}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{}");
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection44);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "{{null=, =}={}}" + "'", charSequence47, "{{null=, =}={}}");
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap1.entrySet();
        java.lang.String str32 = strComparableMap1.toString();
        java.lang.CharSequence charSequence35 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{{null=, =}={}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=}" + "'", str32, "{null=}");
        org.junit.Assert.assertNull(charSequence35);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.Object obj5 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence15 = strComparableMap7.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean18 = strComparableMap17.isEmpty();
        java.lang.Object obj19 = strComparableMap17.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap17.values();
        strComparableMap7.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap17);
        java.lang.String str22 = strComparableMap7.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean25 = strComparableMap24.isEmpty();
        java.lang.Object obj26 = strComparableMap24.clone();
        java.lang.CharSequence charSequence28 = strComparableMap24.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence30 = strComparableMap24.get((java.lang.Object) 100L);
        boolean boolean31 = strComparableMap7.containsValue((java.lang.Object) strComparableMap24);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet32 = strComparableMap24.keySet();
        java.lang.CharSequence charSequence33 = strComparableMap1.get((java.lang.Object) strComparableSet32);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable36 = null;
        java.lang.CharSequence charSequence38 = strComparableMap35.putIfAbsent(strComparable36, (java.lang.CharSequence) "");
        boolean boolean40 = strComparableMap35.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence43 = strComparableMap35.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap47.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean54 = strComparableMap35.remove((java.lang.Object) strComparableMap45, (java.lang.Object) "hi!");
        java.lang.CharSequence charSequence57 = strComparableMap35.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.lang.String str58 = strComparableMap35.toString();
        java.lang.CharSequence charSequence59 = null;
        java.lang.CharSequence charSequence60 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap35, charSequence59);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{null=, =}" + "'", str22, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{}");
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strComparableSet32);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "{null=, =, hi!=hi!}" + "'", str58, "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence60);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        boolean boolean17 = strComparableMap12.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence20 = strComparableMap12.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        java.lang.Object obj24 = strComparableMap22.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection25 = strComparableMap22.values();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.String str27 = strComparableMap12.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean30 = strComparableMap29.isEmpty();
        java.lang.Object obj31 = strComparableMap29.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection32 = strComparableMap29.values();
        java.lang.CharSequence charSequence33 = strComparableMap12.get((java.lang.Object) strComparableMap29);
        boolean boolean34 = strComparableMap7.equals((java.lang.Object) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence41 = strComparableMap36.get((java.lang.Object) true);
        java.lang.Object obj42 = strComparableMap36.clone();
        java.lang.CharSequence charSequence45 = strComparableMap36.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj46 = null;
        java.lang.CharSequence charSequence47 = strComparableMap36.get(obj46);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean52 = strComparableMap51.isEmpty();
        strComparableMap49.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet54 = strComparableMap51.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection55 = strComparableMap51.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet56 = strComparableMap51.keySet();
        boolean boolean57 = strComparableMap36.equals((java.lang.Object) strComparableMap51);
        java.lang.String str58 = strComparableMap36.toString();
        java.lang.CharSequence charSequence61 = strComparableMap36.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable64 = null;
        java.lang.CharSequence charSequence66 = strComparableMap63.putIfAbsent(strComparable64, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence68 = strComparableMap63.get((java.lang.Object) true);
        java.lang.Object obj69 = strComparableMap63.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap71 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable72 = null;
        java.lang.CharSequence charSequence74 = strComparableMap71.putIfAbsent(strComparable72, (java.lang.CharSequence) "");
        boolean boolean76 = strComparableMap71.containsValue((java.lang.Object) (short) 100);
        int int77 = strComparableMap71.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap78 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence80 = strComparableMap71.getOrDefault((java.lang.Object) strComparableMap78, (java.lang.CharSequence) "");
        java.lang.String str81 = strComparableMap71.toString();
        boolean boolean82 = strComparableMap36.remove(obj69, (java.lang.Object) str81);
        boolean boolean83 = strComparableMap7.containsKey((java.lang.Object) strComparableMap36);
        java.lang.CharSequence charSequence86 = strComparableMap7.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{null=, =}" + "'", str27, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection32);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{null=}");
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "" + "'", charSequence47, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet54);
        org.junit.Assert.assertNotNull(charSequenceCollection55);
        org.junit.Assert.assertNotNull(strComparableSet56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "{null=, =}" + "'", str58, "{null=, =}");
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "{null=}");
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "" + "'", charSequence80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "{null=}" + "'", str81, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(charSequence86);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean15 = strComparableMap14.isEmpty();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap14);
        boolean boolean17 = strComparableMap2.containsKey((java.lang.Object) strComparableMap12);
        boolean boolean18 = strComparableMap2.isEmpty();
        boolean boolean19 = strComparableMap2.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) (short) 100, true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(1, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        strComparableMap7.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence20 = strComparableMap17.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet21 = strComparableMap17.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable24 = null;
        java.lang.CharSequence charSequence26 = strComparableMap23.putIfAbsent(strComparable24, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence28 = strComparableMap23.get((java.lang.Object) true);
        java.lang.Object obj29 = strComparableMap23.clone();
        java.lang.CharSequence charSequence32 = strComparableMap23.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj33 = null;
        java.lang.CharSequence charSequence34 = strComparableMap23.get(obj33);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean39 = strComparableMap38.isEmpty();
        strComparableMap36.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet41 = strComparableMap38.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection42 = strComparableMap38.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet43 = strComparableMap38.keySet();
        boolean boolean44 = strComparableMap23.equals((java.lang.Object) strComparableMap38);
        java.lang.String str45 = strComparableMap23.toString();
        java.lang.CharSequence charSequence48 = strComparableMap23.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap50.get((java.lang.Object) true);
        java.lang.Object obj56 = strComparableMap50.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        java.lang.CharSequence charSequence61 = strComparableMap58.putIfAbsent(strComparable59, (java.lang.CharSequence) "");
        boolean boolean63 = strComparableMap58.containsValue((java.lang.Object) (short) 100);
        int int64 = strComparableMap58.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence67 = strComparableMap58.getOrDefault((java.lang.Object) strComparableMap65, (java.lang.CharSequence) "");
        java.lang.String str68 = strComparableMap58.toString();
        boolean boolean69 = strComparableMap23.remove(obj56, (java.lang.Object) str68);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable73 = null;
        java.lang.CharSequence charSequence75 = strComparableMap72.putIfAbsent(strComparable73, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence77 = strComparableMap72.get((java.lang.Object) true);
        int int78 = strComparableMap72.size();
        java.lang.CharSequence charSequence80 = strComparableMap72.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence83 = strComparableMap72.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj84 = strComparableMap72.clone();
        boolean boolean85 = strComparableMap17.remove((java.lang.Object) strComparableMap70, (java.lang.Object) strComparableMap72);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet86 = strComparableMap70.keySet();
        boolean boolean87 = strComparableMap9.containsValue((java.lang.Object) strComparableMap70);
        java.lang.CharSequence charSequence88 = strComparableMap3.get((java.lang.Object) strComparableMap70);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet89 = strComparableMap70.keySet();
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNotNull(strComparableEntrySet21);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{null=}");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "" + "'", charSequence34, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet41);
        org.junit.Assert.assertNotNull(charSequenceCollection42);
        org.junit.Assert.assertNotNull(strComparableSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{null=, =}" + "'", str45, "{null=, =}");
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{null=}");
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "" + "'", charSequence67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "{null=}" + "'", str68, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertNull(charSequence83);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strComparableSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(charSequence88);
        org.junit.Assert.assertNotNull(strComparableSet89);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int15 = strComparableMap14.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        int int21 = strComparableMap19.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.lang.CharSequence charSequence25 = strComparableMap19.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        java.lang.Object obj26 = strComparableMap19.clone();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap19.keySet();
        java.lang.Class<?> wildcardClass28 = strComparableSet27.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{hi!={{}={null=, =, hi!=hi!}}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{hi!={{}={null=, =, hi!=hi!}}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{hi!={{}={null=, =, hi!=hi!}}}");
        org.junit.Assert.assertNotNull(strComparableSet27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap37.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence58 = strComparableMap53.get((java.lang.Object) true);
        int int59 = strComparableMap53.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet60 = strComparableMap53.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean65 = strComparableMap53.equals((java.lang.Object) 0);
        strComparableMap46.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap53);
        java.lang.CharSequence charSequence68 = strComparableMap37.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "{null=}");
        java.lang.Object obj69 = strComparableMap37.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection70 = strComparableMap37.values();
        boolean boolean71 = strComparableMap37.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(strComparableSet60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "{null=}" + "'", charSequence68, "{null=}");
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "{null=}");
        org.junit.Assert.assertNotNull(charSequenceCollection70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean31 = strComparableMap8.isEmpty();
        java.lang.CharSequence charSequence34 = strComparableMap8.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable44 = null;
        java.lang.CharSequence charSequence46 = strComparableMap43.putIfAbsent(strComparable44, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence48 = strComparableMap43.get((java.lang.Object) true);
        int int49 = strComparableMap43.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap43.values();
        boolean boolean51 = strComparableMap36.containsValue((java.lang.Object) strComparableMap43);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        boolean boolean58 = strComparableMap53.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence61 = strComparableMap53.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence64 = strComparableMap53.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = strComparableMap53.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence70 = strComparableMap53.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean71 = strComparableMap36.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap74 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence76 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap74, (java.lang.CharSequence) "{null=}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet77 = strComparableMap36.entrySet();
        java.lang.CharSequence charSequence79 = strComparableMap8.getOrDefault((java.lang.Object) strComparableMap36, (java.lang.CharSequence) "{}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "{null=}" + "'", charSequence76, "{null=}");
        org.junit.Assert.assertNotNull(strComparableEntrySet77);
        org.junit.Assert.assertEquals("'" + charSequence79 + "' != '" + "{}" + "'", charSequence79, "{}");
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) ' ', (float) 1, true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int14 = strComparableMap6.size();
        boolean boolean18 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean21 = strComparableMap20.isEmpty();
        java.lang.Object obj22 = strComparableMap20.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean27 = strComparableMap26.isEmpty();
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.lang.CharSequence charSequence30 = strComparableMap6.get((java.lang.Object) strComparableMap26);
        java.lang.CharSequence charSequence32 = strComparableMap3.getOrDefault((java.lang.Object) strComparableMap6, (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean21 = strComparableMap20.isEmpty();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet23 = strComparableMap20.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection24 = strComparableMap20.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet25 = strComparableMap20.keySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap20.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        boolean boolean33 = strComparableMap28.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence36 = strComparableMap28.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean39 = strComparableMap38.isEmpty();
        java.lang.Object obj40 = strComparableMap38.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection41 = strComparableMap38.values();
        strComparableMap28.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        boolean boolean43 = strComparableMap8.remove((java.lang.Object) charSequenceCollection26, (java.lang.Object) strComparableMap28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean46 = strComparableMap45.isEmpty();
        java.lang.Object obj47 = strComparableMap45.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean52 = strComparableMap51.isEmpty();
        strComparableMap49.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        strComparableMap45.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable57 = null;
        java.lang.CharSequence charSequence59 = strComparableMap56.putIfAbsent(strComparable57, (java.lang.CharSequence) "");
        boolean boolean61 = strComparableMap56.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence64 = strComparableMap56.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean67 = strComparableMap66.isEmpty();
        java.lang.Object obj68 = strComparableMap66.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection69 = strComparableMap66.values();
        strComparableMap56.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap66);
        java.lang.String str71 = strComparableMap56.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap73 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean74 = strComparableMap73.isEmpty();
        java.lang.Object obj75 = strComparableMap73.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection76 = strComparableMap73.values();
        java.lang.CharSequence charSequence77 = strComparableMap56.get((java.lang.Object) strComparableMap73);
        boolean boolean78 = strComparableMap51.equals((java.lang.Object) strComparableMap56);
        java.lang.CharSequence charSequence79 = strComparableMap28.remove((java.lang.Object) boolean78);
        java.lang.CharSequence charSequence82 = strComparableMap28.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet23);
        org.junit.Assert.assertNotNull(charSequenceCollection24);
        org.junit.Assert.assertNotNull(strComparableSet25);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{}");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{null=, =}" + "'", str71, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection76);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertNull(charSequence82);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap1.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = strComparableMap15.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet21 = strComparableMap15.entrySet();
        java.lang.String str22 = strComparableMap15.toString();
        boolean boolean26 = strComparableMap15.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean33 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.lang.String str37 = strComparableMap29.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap39.get((java.lang.Object) true);
        java.lang.Object obj45 = strComparableMap39.clone();
        java.lang.CharSequence charSequence48 = strComparableMap39.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap39);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean54 = strComparableMap53.isEmpty();
        strComparableMap51.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap53);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable58 = null;
        java.lang.CharSequence charSequence60 = strComparableMap57.putIfAbsent(strComparable58, (java.lang.CharSequence) "");
        boolean boolean62 = strComparableMap57.containsValue((java.lang.Object) (short) 100);
        int int63 = strComparableMap57.size();
        java.lang.CharSequence charSequence65 = strComparableMap51.getOrDefault((java.lang.Object) strComparableMap57, (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet66 = strComparableMap51.entrySet();
        boolean boolean67 = strComparableMap15.remove((java.lang.Object) strComparableMap29, (java.lang.Object) strComparableEntrySet66);
        java.lang.CharSequence charSequence68 = strComparableMap1.remove((java.lang.Object) strComparableEntrySet66);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable71 = null;
        java.lang.CharSequence charSequence73 = strComparableMap70.putIfAbsent(strComparable71, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence75 = strComparableMap70.get((java.lang.Object) true);
        java.lang.Object obj76 = strComparableMap70.clone();
        java.lang.CharSequence charSequence79 = strComparableMap70.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str80 = strComparableMap70.toString();
        boolean boolean81 = strComparableMap1.equals((java.lang.Object) strComparableMap70);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNotNull(strComparableEntrySet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{null=}" + "'", str22, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{null=}");
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertNotNull(strComparableEntrySet66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "{null=}");
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "{null=, =}" + "'", str80, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int15 = strComparableMap14.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        int int21 = strComparableMap19.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.lang.CharSequence charSequence25 = strComparableMap19.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        java.lang.Object obj26 = strComparableMap19.clone();
        java.lang.CharSequence charSequence29 = strComparableMap19.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{hi!={{}={null=, =, hi!=hi!}}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{hi!={{}={null=, =, hi!=hi!}}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{hi!={{}={null=, =, hi!=hi!}}}");
        org.junit.Assert.assertNull(charSequence29);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.lang.CharSequence charSequence11 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=}");
        java.lang.String str12 = strComparableMap1.toString();
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{null=}" + "'", str12, "{null=}");
        org.junit.Assert.assertNull(charSequence15);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet8 = strComparableMap1.entrySet();
        boolean boolean12 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean19 = strComparableMap15.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence22 = strComparableMap15.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int23 = strComparableMap15.size();
        boolean boolean27 = strComparableMap15.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        boolean boolean28 = strComparableMap1.containsKey((java.lang.Object) boolean27);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strComparableEntrySet8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet15 = strComparableMap8.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean20 = strComparableMap8.equals((java.lang.Object) 0);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable24 = null;
        java.lang.CharSequence charSequence26 = strComparableMap23.putIfAbsent(strComparable24, (java.lang.CharSequence) "");
        boolean boolean28 = strComparableMap23.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence31 = strComparableMap23.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean33 = strComparableMap23.containsKey((java.lang.Object) 1);
        java.lang.Class<?> wildcardClass34 = strComparableMap23.getClass();
        boolean boolean35 = strComparableMap8.containsKey((java.lang.Object) strComparableMap23);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        boolean boolean42 = strComparableMap37.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence45 = strComparableMap37.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence48 = strComparableMap37.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection49 = strComparableMap37.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence56 = strComparableMap51.get((java.lang.Object) true);
        int int57 = strComparableMap51.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection58 = strComparableMap51.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable61 = null;
        java.lang.CharSequence charSequence63 = strComparableMap60.putIfAbsent(strComparable61, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence66 = strComparableMap60.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable69 = null;
        java.lang.CharSequence charSequence71 = strComparableMap68.putIfAbsent(strComparable69, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence73 = strComparableMap68.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet74 = strComparableMap68.entrySet();
        strComparableMap60.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap68);
        java.lang.CharSequence charSequence77 = strComparableMap51.getOrDefault((java.lang.Object) strComparableMap68, (java.lang.CharSequence) "{null=, =}");
        strComparableMap37.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        strComparableMap8.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet80 = strComparableMap51.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(strComparableSet15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection49);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection58);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertNotNull(strComparableEntrySet74);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "{null=, =}" + "'", charSequence77, "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableSet80);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap21.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean28 = strComparableMap9.remove((java.lang.Object) strComparableMap19, (java.lang.Object) "hi!");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean36 = strComparableMap32.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence39 = strComparableMap32.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int40 = strComparableMap32.size();
        boolean boolean44 = strComparableMap32.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean47 = strComparableMap46.isEmpty();
        java.lang.Object obj48 = strComparableMap46.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean53 = strComparableMap52.isEmpty();
        strComparableMap50.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        strComparableMap46.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        java.lang.CharSequence charSequence56 = strComparableMap32.get((java.lang.Object) strComparableMap52);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean63 = strComparableMap59.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence66 = strComparableMap59.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet67 = strComparableMap59.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap69 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable70 = null;
        java.lang.CharSequence charSequence72 = strComparableMap69.putIfAbsent(strComparable70, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence74 = strComparableMap69.get((java.lang.Object) true);
        int int75 = strComparableMap69.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap77 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable78 = null;
        java.lang.CharSequence charSequence80 = strComparableMap77.putIfAbsent(strComparable78, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence83 = strComparableMap77.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap85 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable86 = null;
        java.lang.CharSequence charSequence88 = strComparableMap85.putIfAbsent(strComparable86, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence90 = strComparableMap85.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet91 = strComparableMap85.entrySet();
        strComparableMap77.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap85);
        java.lang.Class<?> wildcardClass93 = strComparableMap85.getClass();
        boolean boolean94 = strComparableMap69.containsKey((java.lang.Object) wildcardClass93);
        boolean boolean95 = strComparableMap59.equals((java.lang.Object) strComparableMap69);
        strComparableMap52.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap59);
        boolean boolean97 = strComparableMap1.equals((java.lang.Object) strComparableMap59);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertNotNull(strComparableSet67);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertNull(charSequence83);
        org.junit.Assert.assertNull(charSequence88);
        org.junit.Assert.assertNull(charSequence90);
        org.junit.Assert.assertNotNull(strComparableEntrySet91);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        int int24 = strComparableMap18.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap26.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        boolean boolean31 = strComparableMap26.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence34 = strComparableMap26.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap38.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean45 = strComparableMap26.remove((java.lang.Object) strComparableMap36, (java.lang.Object) "hi!");
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        boolean boolean47 = strComparableMap36.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        java.lang.Object obj49 = strComparableMap1.clone();
        boolean boolean53 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        boolean boolean60 = strComparableMap55.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence63 = strComparableMap55.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence66 = strComparableMap55.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection67 = strComparableMap55.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap71 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence74 = strComparableMap71.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence77 = strComparableMap71.put((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap79 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean80 = strComparableMap79.isEmpty();
        java.lang.Object obj81 = strComparableMap79.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap83 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap85 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean86 = strComparableMap85.isEmpty();
        strComparableMap83.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap85);
        strComparableMap79.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap85);
        boolean boolean89 = strComparableMap79.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet90 = strComparableMap79.entrySet();
        java.lang.CharSequence charSequence91 = null;
        java.lang.CharSequence charSequence92 = strComparableMap71.getOrDefault((java.lang.Object) strComparableEntrySet90, charSequence91);
        boolean boolean93 = strComparableMap1.remove((java.lang.Object) strComparableMap55, (java.lang.Object) charSequence92);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{null=, hi!=hi!}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{null=, hi!=hi!}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{null=, hi!=hi!}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "hi!" + "'", charSequence66, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection67);
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "{null=}" + "'", charSequence77, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "{}");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet90);
        org.junit.Assert.assertNull(charSequence92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.CharSequence, java.lang.constant.ConstantDesc> charSequenceMap3 = new java.util.LinkedHashMap<java.lang.CharSequence, java.lang.constant.ConstantDesc>((int) (short) -1, (float) '4', false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str13 = strComparableMap1.toString();
        java.lang.CharSequence charSequence16 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence26 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap18.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet36 = strComparableMap18.entrySet();
        java.lang.CharSequence charSequence37 = strComparableMap1.get((java.lang.Object) strComparableEntrySet36);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{null=, =}" + "'", str13, "{null=, =}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNotNull(strComparableEntrySet36);
        org.junit.Assert.assertNull(charSequence37);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>> constantDescMap0 = new java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>>();
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.Cloneable> typeMap1 = new java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.Cloneable>((int) (short) 1);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet10 = strComparableMap2.keySet();
        java.lang.CharSequence charSequence13 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        boolean boolean19 = strComparableMap2.equals((java.lang.Object) strComparableMap15);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet20 = strComparableMap15.entrySet();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(strComparableSet10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet20);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        java.util.LinkedHashMap<java.io.Serializable, java.lang.Cloneable> serializableMap3 = new java.util.LinkedHashMap<java.io.Serializable, java.lang.Cloneable>(10, (float) 10, false);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.lang.CharSequence charSequence18 = strComparableMap1.get((java.lang.Object) 'a');
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        boolean boolean26 = strComparableMap21.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        int int34 = strComparableMap28.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap28.values();
        boolean boolean36 = strComparableMap21.containsValue((java.lang.Object) strComparableMap28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        boolean boolean43 = strComparableMap38.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence46 = strComparableMap38.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence49 = strComparableMap38.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = strComparableMap38.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap38.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean56 = strComparableMap21.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence61 = strComparableMap21.getOrDefault((java.lang.Object) strComparableMap59, (java.lang.CharSequence) "{null=}");
        strComparableMap59.clear();
        java.lang.CharSequence charSequence63 = null;
        java.lang.CharSequence charSequence64 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap59, charSequence63);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence70 = null;
        java.lang.CharSequence charSequence71 = strComparableMap68.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence70);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap68);
        boolean boolean73 = strComparableMap1.equals((java.lang.Object) strComparableMap72);
        java.lang.String str74 = strComparableMap1.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "{null=}" + "'", charSequence61, "{null=}");
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{}" + "'", str74, "{}");
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection13 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = strComparableMap15.get((java.lang.Object) true);
        int int21 = strComparableMap15.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap15.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap24.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap32.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet38 = strComparableMap32.entrySet();
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.lang.CharSequence charSequence41 = strComparableMap15.getOrDefault((java.lang.Object) strComparableMap32, (java.lang.CharSequence) "{null=, =}");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap15);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap15.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet44 = strComparableMap15.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean51 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence54 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int55 = strComparableMap47.size();
        boolean boolean59 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean62 = strComparableMap61.isEmpty();
        java.lang.Object obj63 = strComparableMap61.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean68 = strComparableMap67.isEmpty();
        strComparableMap65.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap67);
        strComparableMap61.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap67);
        java.lang.CharSequence charSequence71 = strComparableMap47.get((java.lang.Object) strComparableMap67);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection72 = strComparableMap67.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet73 = strComparableMap67.entrySet();
        boolean boolean74 = strComparableMap15.containsValue((java.lang.Object) strComparableMap67);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNotNull(strComparableEntrySet38);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=, =}" + "'", charSequence41, "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertNotNull(strComparableEntrySet44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "{}");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertNotNull(charSequenceCollection72);
        org.junit.Assert.assertNotNull(strComparableEntrySet73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean19 = strComparableMap1.isEmpty();
        java.lang.CharSequence charSequence22 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int25 = strComparableMap24.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.lang.CharSequence charSequence33 = strComparableMap24.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence36 = strComparableMap24.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        boolean boolean40 = strComparableMap24.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection41 = strComparableMap24.values();
        boolean boolean42 = strComparableMap1.equals((java.lang.Object) charSequenceCollection41);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean46 = strComparableMap45.isEmpty();
        java.lang.Object obj47 = strComparableMap45.clone();
        java.lang.CharSequence charSequence49 = strComparableMap45.remove((java.lang.Object) true);
        boolean boolean53 = strComparableMap45.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        strComparableMap45.clear();
        java.lang.Object obj55 = null;
        boolean boolean56 = strComparableMap45.equals(obj55);
        java.lang.Object obj57 = strComparableMap45.clone();
        boolean boolean58 = strComparableMap1.remove((java.lang.Object) (-1L), obj57);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{}");
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        java.util.LinkedHashMap<java.lang.constant.Constable, java.io.Serializable> constableMap0 = new java.util.LinkedHashMap<java.lang.constant.Constable, java.io.Serializable>();
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.lang.CharSequence charSequence15 = strComparableMap1.remove((java.lang.Object) 0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap24);
        boolean boolean26 = strComparableMap17.isEmpty();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap17.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable30 = null;
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent(strComparable30, (java.lang.CharSequence) "");
        boolean boolean34 = strComparableMap29.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence37 = strComparableMap29.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean40 = strComparableMap39.isEmpty();
        java.lang.Object obj41 = strComparableMap39.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection42 = strComparableMap39.values();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap39);
        java.lang.String str44 = strComparableMap29.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean47 = strComparableMap46.isEmpty();
        java.lang.Object obj48 = strComparableMap46.clone();
        java.lang.CharSequence charSequence50 = strComparableMap46.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence52 = strComparableMap46.get((java.lang.Object) 100L);
        boolean boolean53 = strComparableMap29.containsValue((java.lang.Object) strComparableMap46);
        boolean boolean54 = strComparableMap29.isEmpty();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        int int56 = strComparableMap29.size();
        java.lang.CharSequence charSequence57 = strComparableMap1.remove((java.lang.Object) int56);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strComparableSet27);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{null=, =}" + "'", str44, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{}");
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNull(charSequence57);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection8 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap10.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap18.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.CharSequence charSequence27 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap18, (java.lang.CharSequence) "{null=, =}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet28 = strComparableMap18.keySet();
        int int29 = strComparableMap18.size();
        java.lang.CharSequence charSequence32 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection8);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "{null=, =}" + "'", charSequence27, "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableSet28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(charSequence32);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) ' ', (float) (byte) 10);
        java.lang.CharSequence charSequence5 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet6 = strComparableMap2.entrySet();
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNotNull(strComparableEntrySet6);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        boolean boolean21 = strComparableMap16.containsValue((java.lang.Object) (short) 100);
        int int22 = strComparableMap16.size();
        java.lang.CharSequence charSequence24 = strComparableMap10.getOrDefault((java.lang.Object) strComparableMap16, (java.lang.CharSequence) "hi!");
        boolean boolean25 = strComparableMap1.equals((java.lang.Object) charSequence24);
        java.lang.CharSequence charSequence28 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable31 = null;
        java.lang.CharSequence charSequence33 = strComparableMap30.putIfAbsent(strComparable31, (java.lang.CharSequence) "");
        boolean boolean35 = strComparableMap30.containsValue((java.lang.Object) (short) 100);
        int int36 = strComparableMap30.size();
        int int37 = strComparableMap30.size();
        boolean boolean38 = strComparableMap1.containsValue((java.lang.Object) strComparableMap30);
        java.lang.CharSequence charSequence41 = null;
        boolean boolean42 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=, =, hi!=hi!}", charSequence41);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj13 = strComparableMap1.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet14 = strComparableMap1.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet21 = strComparableMap18.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap18.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet23 = strComparableMap18.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean26 = strComparableMap25.isEmpty();
        java.lang.Object obj27 = strComparableMap25.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        strComparableMap25.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        strComparableMap25.clear();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap25);
        java.lang.CharSequence charSequence38 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap25, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable41 = null;
        java.lang.CharSequence charSequence43 = strComparableMap40.putIfAbsent(strComparable41, (java.lang.CharSequence) "");
        boolean boolean45 = strComparableMap40.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        boolean boolean57 = strComparableMap52.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable60 = null;
        java.lang.CharSequence charSequence62 = strComparableMap59.putIfAbsent(strComparable60, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence64 = strComparableMap59.get((java.lang.Object) true);
        int int65 = strComparableMap59.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection66 = strComparableMap59.values();
        boolean boolean67 = strComparableMap52.containsValue((java.lang.Object) strComparableMap59);
        boolean boolean68 = strComparableMap47.equals((java.lang.Object) strComparableMap59);
        strComparableMap40.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap47);
        boolean boolean70 = strComparableMap47.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet71 = strComparableMap47.entrySet();
        boolean boolean72 = strComparableMap25.containsValue((java.lang.Object) strComparableEntrySet71);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet21);
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertNotNull(strComparableSet23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "{null=, =}" + "'", charSequence38, "{null=, =}");
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(10, (float) 100L);
        boolean boolean3 = strComparableMap2.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        boolean boolean9 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        strComparableMap1.clear();
        java.lang.Object obj11 = null;
        boolean boolean12 = strComparableMap1.equals(obj11);
        java.lang.Object obj13 = strComparableMap1.clone();
        java.lang.CharSequence charSequence16 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNull(charSequence16);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int15 = strComparableMap14.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        int int21 = strComparableMap19.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.lang.CharSequence charSequence25 = strComparableMap19.put((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{}");
        java.lang.String str26 = strComparableMap19.toString();
        java.lang.Object obj27 = strComparableMap19.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{{null=, =}={}}" + "'", str26, "{{null=, =}={}}");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{{null=, =}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{{null=, =}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{{null=, =}={}}");
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(1, (float) 2);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet10 = strComparableMap2.keySet();
        java.lang.CharSequence charSequence13 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap2.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.lang.Object obj17 = null;
        boolean boolean18 = strComparableMap2.containsValue(obj17);
        boolean boolean19 = strComparableMap2.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(strComparableSet10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        boolean boolean25 = strComparableMap20.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence28 = strComparableMap20.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence31 = strComparableMap20.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable34 = null;
        java.lang.CharSequence charSequence36 = strComparableMap33.putIfAbsent(strComparable34, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence39 = strComparableMap33.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean41 = strComparableMap33.containsValue((java.lang.Object) 10);
        boolean boolean43 = strComparableMap20.remove((java.lang.Object) 10, (java.lang.Object) (-1L));
        boolean boolean44 = strComparableMap1.equals((java.lang.Object) boolean43);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        boolean boolean46 = strComparableMap1.containsValue((java.lang.Object) strComparableMap45);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "hi!" + "'", charSequence31, "hi!");
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence6 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap3.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.lang.Object obj15 = strComparableMap9.clone();
        java.lang.CharSequence charSequence18 = strComparableMap9.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj19 = null;
        java.lang.CharSequence charSequence20 = strComparableMap9.get(obj19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean25 = strComparableMap24.isEmpty();
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap24);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet27 = strComparableMap24.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection28 = strComparableMap24.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet29 = strComparableMap24.keySet();
        boolean boolean30 = strComparableMap9.equals((java.lang.Object) strComparableMap24);
        java.lang.String str31 = strComparableMap9.toString();
        java.lang.CharSequence charSequence34 = strComparableMap9.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence41 = strComparableMap36.get((java.lang.Object) true);
        java.lang.Object obj42 = strComparableMap36.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable45 = null;
        java.lang.CharSequence charSequence47 = strComparableMap44.putIfAbsent(strComparable45, (java.lang.CharSequence) "");
        boolean boolean49 = strComparableMap44.containsValue((java.lang.Object) (short) 100);
        int int50 = strComparableMap44.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence53 = strComparableMap44.getOrDefault((java.lang.Object) strComparableMap51, (java.lang.CharSequence) "");
        java.lang.String str54 = strComparableMap44.toString();
        boolean boolean55 = strComparableMap9.remove(obj42, (java.lang.Object) str54);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        java.lang.CharSequence charSequence61 = strComparableMap58.putIfAbsent(strComparable59, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence63 = strComparableMap58.get((java.lang.Object) true);
        int int64 = strComparableMap58.size();
        java.lang.CharSequence charSequence66 = strComparableMap58.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence69 = strComparableMap58.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj70 = strComparableMap58.clone();
        boolean boolean71 = strComparableMap3.remove((java.lang.Object) strComparableMap56, (java.lang.Object) strComparableMap58);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet72 = strComparableMap3.keySet();
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{null=}");
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "" + "'", charSequence20, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet27);
        org.junit.Assert.assertNotNull(charSequenceCollection28);
        org.junit.Assert.assertNotNull(strComparableSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{null=, =}" + "'", str31, "{null=, =}");
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{null=}");
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "" + "'", charSequence53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{null=}" + "'", str54, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strComparableSet72);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        boolean boolean29 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "{null=}");
        strComparableMap18.clear();
        java.lang.CharSequence charSequence33 = strComparableMap18.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable36 = null;
        java.lang.CharSequence charSequence38 = strComparableMap35.putIfAbsent(strComparable36, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = strComparableMap35.get((java.lang.Object) true);
        int int41 = strComparableMap35.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection42 = strComparableMap35.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable45 = null;
        java.lang.CharSequence charSequence47 = strComparableMap44.putIfAbsent(strComparable45, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence50 = strComparableMap44.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence57 = strComparableMap52.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet58 = strComparableMap52.entrySet();
        strComparableMap44.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        java.lang.CharSequence charSequence61 = strComparableMap35.getOrDefault((java.lang.Object) strComparableMap52, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int64 = strComparableMap63.size();
        boolean boolean65 = strComparableMap63.isEmpty();
        int int66 = strComparableMap63.size();
        java.lang.CharSequence charSequence69 = strComparableMap63.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.CharSequence charSequence72 = strComparableMap63.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap74 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable75 = null;
        java.lang.CharSequence charSequence77 = strComparableMap74.putIfAbsent(strComparable75, (java.lang.CharSequence) "");
        boolean boolean79 = strComparableMap74.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence82 = strComparableMap74.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean84 = strComparableMap74.containsKey((java.lang.Object) 1);
        strComparableMap63.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap74);
        strComparableMap35.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap74);
        java.lang.Object obj87 = strComparableMap35.clone();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap35);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection42);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertNotNull(strComparableEntrySet58);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "{null=, =}" + "'", charSequence61, "{null=, =}");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(charSequence82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "{null=, =}");
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.Cloneable> genericDeclarationMap0 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.Cloneable>();
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable12 = null;
        java.lang.CharSequence charSequence14 = strComparableMap11.putIfAbsent(strComparable12, (java.lang.CharSequence) "");
        boolean boolean16 = strComparableMap11.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence19 = strComparableMap11.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean22 = strComparableMap21.isEmpty();
        java.lang.Object obj23 = strComparableMap21.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection24 = strComparableMap21.values();
        strComparableMap11.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap21);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.CharSequence charSequence32 = strComparableMap21.getOrDefault((java.lang.Object) wildcardClass30, (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet33 = strComparableMap21.keySet();
        java.lang.CharSequence charSequence34 = strComparableMap2.remove((java.lang.Object) strComparableSet33);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean39 = strComparableMap38.isEmpty();
        strComparableMap36.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        boolean boolean44 = strComparableMap38.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "hi!");
        boolean boolean48 = strComparableMap38.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "");
        boolean boolean49 = strComparableMap2.equals((java.lang.Object) "{}");
        java.lang.CharSequence charSequence52 = strComparableMap2.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertNotNull(strComparableSet33);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(charSequence52);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence10 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap8, (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet11 = strComparableMap1.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int14 = strComparableMap13.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        int int20 = strComparableMap18.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0);
        java.lang.CharSequence charSequence24 = strComparableMap22.get((java.lang.Object) (short) 0);
        boolean boolean26 = strComparableMap18.remove((java.lang.Object) strComparableMap22, (java.lang.Object) 1.0d);
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap22.replace(strComparable27, (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap31.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap39.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet45 = strComparableMap39.entrySet();
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap39);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection49 = strComparableMap48.values();
        strComparableMap48.clear();
        boolean boolean51 = strComparableMap31.containsKey((java.lang.Object) strComparableMap48);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet52 = strComparableMap31.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) (short) 100, true);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection57 = strComparableMap56.values();
        boolean boolean58 = strComparableMap31.containsValue((java.lang.Object) charSequenceCollection57);
        java.lang.CharSequence charSequence59 = strComparableMap22.get((java.lang.Object) strComparableMap31);
        java.lang.CharSequence charSequence60 = strComparableMap1.get((java.lang.Object) strComparableMap22);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertNotNull(strComparableEntrySet11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertNotNull(strComparableEntrySet45);
        org.junit.Assert.assertNotNull(charSequenceCollection49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strComparableSet52);
        org.junit.Assert.assertNotNull(charSequenceCollection57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertNull(charSequence60);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap7.get((java.lang.Object) true);
        java.lang.Object obj13 = strComparableMap7.clone();
        java.lang.CharSequence charSequence16 = strComparableMap7.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj17 = null;
        java.lang.CharSequence charSequence18 = strComparableMap7.get(obj17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap22.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap22.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap22.keySet();
        boolean boolean28 = strComparableMap7.equals((java.lang.Object) strComparableMap22);
        java.lang.String str29 = strComparableMap7.toString();
        boolean boolean30 = strComparableMap1.equals((java.lang.Object) strComparableMap7);
        boolean boolean34 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence43 = strComparableMap37.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable46 = null;
        java.lang.CharSequence charSequence48 = strComparableMap45.putIfAbsent(strComparable46, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence50 = strComparableMap45.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet51 = strComparableMap45.entrySet();
        strComparableMap37.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap45);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence59 = strComparableMap54.get((java.lang.Object) true);
        int int60 = strComparableMap54.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable63 = null;
        java.lang.CharSequence charSequence65 = strComparableMap62.putIfAbsent(strComparable63, (java.lang.CharSequence) "");
        boolean boolean67 = strComparableMap62.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence70 = strComparableMap62.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap74 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable75 = null;
        java.lang.CharSequence charSequence77 = strComparableMap74.putIfAbsent(strComparable75, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence80 = strComparableMap74.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean81 = strComparableMap62.remove((java.lang.Object) strComparableMap72, (java.lang.Object) "hi!");
        strComparableMap54.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap72);
        boolean boolean83 = strComparableMap72.isEmpty();
        strComparableMap37.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap72);
        boolean boolean85 = strComparableMap35.containsKey((java.lang.Object) strComparableMap72);
        boolean boolean89 = strComparableMap72.replace((java.lang.Comparable<java.lang.String>) "{null=, hi!=hi!}", (java.lang.CharSequence) "", (java.lang.CharSequence) "{null=, hi!=hi!}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertNotNull(strComparableSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{null=, =}" + "'", str29, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNotNull(strComparableEntrySet51);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean20 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection40 = strComparableMap37.values();
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.lang.String str42 = strComparableMap27.toString();
        boolean boolean43 = strComparableMap16.remove((java.lang.Object) strComparableMap25, (java.lang.Object) str42);
        boolean boolean44 = strComparableMap13.equals((java.lang.Object) strComparableMap25);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        boolean boolean51 = strComparableMap46.containsValue((java.lang.Object) (short) 100);
        int int52 = strComparableMap46.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence55 = strComparableMap46.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        java.lang.Object obj59 = strComparableMap57.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection60 = strComparableMap57.values();
        boolean boolean61 = strComparableMap25.remove((java.lang.Object) strComparableMap53, (java.lang.Object) strComparableMap57);
        boolean boolean62 = strComparableMap1.equals((java.lang.Object) strComparableMap57);
        boolean boolean66 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "{null=}");
        int int67 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap69 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable70 = null;
        java.lang.CharSequence charSequence72 = strComparableMap69.putIfAbsent(strComparable70, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence74 = strComparableMap69.get((java.lang.Object) true);
        java.lang.Object obj75 = strComparableMap69.clone();
        java.lang.CharSequence charSequence78 = strComparableMap69.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj79 = null;
        java.lang.CharSequence charSequence80 = strComparableMap69.get(obj79);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap82 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap84 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean85 = strComparableMap84.isEmpty();
        strComparableMap82.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap84);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet87 = strComparableMap84.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection88 = strComparableMap84.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet89 = strComparableMap84.keySet();
        boolean boolean90 = strComparableMap69.equals((java.lang.Object) strComparableMap84);
        boolean boolean91 = strComparableMap1.containsValue((java.lang.Object) boolean90);
        java.lang.CharSequence charSequence94 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{{null=, =}={}}", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{null=, =}" + "'", str42, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "" + "'", charSequence55, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "{null=}");
        org.junit.Assert.assertNull(charSequence78);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "" + "'", charSequence80, "");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet87);
        org.junit.Assert.assertNotNull(charSequenceCollection88);
        org.junit.Assert.assertNotNull(strComparableSet89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(charSequence94);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        int int24 = strComparableMap18.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap26.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        boolean boolean31 = strComparableMap26.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence34 = strComparableMap26.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap38.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean45 = strComparableMap26.remove((java.lang.Object) strComparableMap36, (java.lang.Object) "hi!");
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        boolean boolean47 = strComparableMap36.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        java.lang.Object obj49 = strComparableMap1.clone();
        boolean boolean53 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet54 = strComparableMap1.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{null=, hi!=hi!}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{null=, hi!=hi!}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{null=, hi!=hi!}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet54);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap12.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection16 = strComparableMap12.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet17 = strComparableMap12.keySet();
        boolean boolean18 = strComparableMap1.equals((java.lang.Object) strComparableSet17);
        java.lang.CharSequence charSequence21 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{{null=, =}={}}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNotNull(charSequenceCollection16);
        org.junit.Assert.assertNotNull(strComparableSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence21);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean21 = strComparableMap20.isEmpty();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet23 = strComparableMap20.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection24 = strComparableMap20.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet25 = strComparableMap20.keySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap20.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        boolean boolean33 = strComparableMap28.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence36 = strComparableMap28.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean39 = strComparableMap38.isEmpty();
        java.lang.Object obj40 = strComparableMap38.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection41 = strComparableMap38.values();
        strComparableMap28.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        boolean boolean43 = strComparableMap8.remove((java.lang.Object) charSequenceCollection26, (java.lang.Object) strComparableMap28);
        boolean boolean44 = strComparableMap8.isEmpty();
        java.lang.CharSequence charSequence47 = strComparableMap8.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet23);
        org.junit.Assert.assertNotNull(charSequenceCollection24);
        org.junit.Assert.assertNotNull(strComparableSet25);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence47);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap21.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean28 = strComparableMap9.remove((java.lang.Object) strComparableMap19, (java.lang.Object) "hi!");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        int int37 = strComparableMap31.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        boolean boolean44 = strComparableMap39.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence47 = strComparableMap39.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence57 = strComparableMap51.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean58 = strComparableMap39.remove((java.lang.Object) strComparableMap49, (java.lang.Object) "hi!");
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        strComparableMap19.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        java.lang.CharSequence charSequence63 = strComparableMap19.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet64 = strComparableMap19.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet65 = strComparableMap19.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNotNull(strComparableSet64);
        org.junit.Assert.assertNotNull(strComparableEntrySet65);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap12.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet26 = strComparableMap20.entrySet();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.lang.CharSequence charSequence29 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap20, (java.lang.CharSequence) "{null=, =}");
        java.lang.Object obj30 = null;
        java.lang.CharSequence charSequence31 = strComparableMap20.remove(obj30);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean36 = strComparableMap35.isEmpty();
        strComparableMap33.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap35);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        boolean boolean44 = strComparableMap39.containsValue((java.lang.Object) (short) 100);
        int int45 = strComparableMap39.size();
        java.lang.CharSequence charSequence47 = strComparableMap33.getOrDefault((java.lang.Object) strComparableMap39, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = strComparableMap20.getOrDefault((java.lang.Object) strComparableMap33, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int52 = strComparableMap51.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap51.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap56);
        java.lang.CharSequence charSequence60 = strComparableMap51.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence63 = strComparableMap51.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        boolean boolean67 = strComparableMap51.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNotNull(strComparableEntrySet26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "{null=, =}" + "'", charSequence29, "{null=, =}");
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "" + "'", charSequence31, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "" + "'", charSequence49, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        strComparableMap15.clear();
        boolean boolean36 = strComparableMap15.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.reflect.AnnotatedElement> typeMap2 = new java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.reflect.AnnotatedElement>((int) (byte) 10, 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap1.containsKey((java.lang.Object) 1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence21 = strComparableMap13.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean24 = strComparableMap23.isEmpty();
        java.lang.Object obj25 = strComparableMap23.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap23.values();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.lang.String str28 = strComparableMap13.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean31 = strComparableMap30.isEmpty();
        java.lang.Object obj32 = strComparableMap30.clone();
        java.lang.CharSequence charSequence34 = strComparableMap30.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence36 = strComparableMap30.get((java.lang.Object) 100L);
        boolean boolean37 = strComparableMap13.containsValue((java.lang.Object) strComparableMap30);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap39.get((java.lang.Object) true);
        int int45 = strComparableMap39.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet46 = strComparableMap39.keySet();
        boolean boolean47 = strComparableMap13.equals((java.lang.Object) strComparableMap39);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable50 = null;
        java.lang.CharSequence charSequence52 = strComparableMap49.putIfAbsent(strComparable50, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence54 = strComparableMap49.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet55 = strComparableMap49.entrySet();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        java.lang.CharSequence charSequence61 = strComparableMap58.putIfAbsent(strComparable59, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence63 = strComparableMap58.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable66 = null;
        java.lang.CharSequence charSequence68 = strComparableMap65.putIfAbsent(strComparable66, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence70 = strComparableMap65.get((java.lang.Object) true);
        int int71 = strComparableMap65.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet72 = strComparableMap65.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap76 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean77 = strComparableMap65.equals((java.lang.Object) 0);
        strComparableMap58.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap65);
        java.lang.CharSequence charSequence80 = strComparableMap49.getOrDefault((java.lang.Object) strComparableMap65, (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence82 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap65, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence85 = strComparableMap65.put((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap87 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean88 = strComparableMap87.isEmpty();
        java.lang.Object obj89 = strComparableMap87.clone();
        java.lang.CharSequence charSequence91 = strComparableMap87.remove((java.lang.Object) true);
        boolean boolean95 = strComparableMap87.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        strComparableMap87.clear();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet97 = strComparableMap87.keySet();
        strComparableMap87.clear();
        java.lang.CharSequence charSequence99 = strComparableMap65.get((java.lang.Object) strComparableMap87);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{null=, =}" + "'", str28, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(strComparableSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNotNull(strComparableEntrySet55);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(strComparableSet72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "{null=}" + "'", charSequence80, "{null=}");
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "" + "'", charSequence82, "");
        org.junit.Assert.assertNull(charSequence85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertEquals(obj89.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj89), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj89), "{}");
        org.junit.Assert.assertNull(charSequence91);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(strComparableSet97);
        org.junit.Assert.assertNull(charSequence99);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) (short) 100, true);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap3.values();
        java.lang.CharSequence charSequence7 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertNull(charSequence7);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap13.get((java.lang.Object) true);
        int int19 = strComparableMap13.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap13.values();
        boolean boolean21 = strComparableMap6.containsValue((java.lang.Object) strComparableMap13);
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap13);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean33 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable41 = null;
        java.lang.CharSequence charSequence43 = strComparableMap40.putIfAbsent(strComparable41, (java.lang.CharSequence) "");
        boolean boolean45 = strComparableMap40.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence48 = strComparableMap40.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean51 = strComparableMap50.isEmpty();
        java.lang.Object obj52 = strComparableMap50.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection53 = strComparableMap50.values();
        strComparableMap40.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap50);
        java.lang.String str55 = strComparableMap40.toString();
        boolean boolean56 = strComparableMap29.remove((java.lang.Object) strComparableMap38, (java.lang.Object) str55);
        boolean boolean57 = strComparableMap26.equals((java.lang.Object) strComparableMap38);
        java.lang.Object obj58 = strComparableMap38.clone();
        java.lang.CharSequence charSequence59 = strComparableMap1.get(obj58);
        java.lang.CharSequence charSequence62 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=, {null=, =}={null=}}", (java.lang.CharSequence) "{null=, {null=, =}={null=}}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{null=, =}" + "'", str55, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{}");
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertNull(charSequence62);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        boolean boolean15 = strComparableMap10.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence18 = strComparableMap10.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean21 = strComparableMap20.isEmpty();
        java.lang.Object obj22 = strComparableMap20.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection23 = strComparableMap20.values();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.lang.String str25 = strComparableMap10.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.lang.CharSequence charSequence31 = strComparableMap27.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence33 = strComparableMap27.get((java.lang.Object) 100L);
        boolean boolean34 = strComparableMap10.containsValue((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence41 = strComparableMap36.get((java.lang.Object) true);
        int int42 = strComparableMap36.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet43 = strComparableMap36.keySet();
        boolean boolean44 = strComparableMap10.equals((java.lang.Object) strComparableMap36);
        java.lang.CharSequence charSequence47 = strComparableMap10.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence50 = strComparableMap10.replace((java.lang.Comparable<java.lang.String>) "{null=, hi!=hi!}", (java.lang.CharSequence) "hi!");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap10);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{null=, =}" + "'", str25, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strComparableSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence50);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet19 = strComparableMap16.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap16.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet21 = strComparableMap16.keySet();
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap16);
        java.lang.String str23 = strComparableMap1.toString();
        java.lang.CharSequence charSequence26 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap1.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet19);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertNotNull(strComparableSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{null=, =}" + "'", str23, "{null=, =}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNotNull(strComparableSet27);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        strComparableMap1.clear();
        java.lang.Object obj14 = null;
        boolean boolean15 = strComparableMap1.equals(obj14);
        strComparableMap1.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = strComparableMap10.get((java.lang.Object) true);
        int int16 = strComparableMap10.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap18.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap26.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence31 = strComparableMap26.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet32 = strComparableMap26.entrySet();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.lang.Class<?> wildcardClass34 = strComparableMap26.getClass();
        boolean boolean35 = strComparableMap10.containsKey((java.lang.Object) wildcardClass34);
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) strComparableMap10);
        java.lang.Object obj37 = strComparableMap10.clone();
        java.lang.String str38 = strComparableMap10.toString();
        java.lang.Class<?> wildcardClass39 = strComparableMap10.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNotNull(strComparableEntrySet32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{null=}");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=}" + "'", str38, "{null=}");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet19 = strComparableMap16.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap16.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet21 = strComparableMap16.keySet();
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap16);
        java.lang.String str23 = strComparableMap1.toString();
        java.lang.CharSequence charSequence26 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        java.lang.Object obj34 = strComparableMap28.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.lang.String str46 = strComparableMap36.toString();
        boolean boolean47 = strComparableMap1.remove(obj34, (java.lang.Object) str46);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean55 = strComparableMap51.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence58 = strComparableMap51.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.lang.String str59 = strComparableMap51.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable62 = null;
        java.lang.CharSequence charSequence64 = strComparableMap61.putIfAbsent(strComparable62, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence66 = strComparableMap61.get((java.lang.Object) true);
        java.lang.Object obj67 = strComparableMap61.clone();
        java.lang.CharSequence charSequence70 = strComparableMap61.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        strComparableMap51.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap61);
        java.lang.CharSequence charSequence73 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap61, (java.lang.CharSequence) "{null=, {null=, =}={null=}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet19);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertNotNull(strComparableSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{null=, =}" + "'", str23, "{null=, =}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{null=}");
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{null=}" + "'", str46, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "{null=}");
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertEquals("'" + charSequence73 + "' != '" + "{null=, {null=, =}={null=}}" + "'", charSequence73, "{null=, {null=, =}={null=}}");
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection8 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap10.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap18.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.CharSequence charSequence27 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap18, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable30 = null;
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent(strComparable30, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap29.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap37.entrySet();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection47 = strComparableMap46.values();
        strComparableMap46.clear();
        boolean boolean49 = strComparableMap29.containsKey((java.lang.Object) strComparableMap46);
        strComparableMap46.clear();
        boolean boolean51 = strComparableMap1.equals((java.lang.Object) strComparableMap46);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection8);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "{null=, =}" + "'", charSequence27, "{null=, =}");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertNotNull(charSequenceCollection47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection13 = strComparableMap1.values();
        strComparableMap1.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(charSequenceCollection13);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        int int13 = strComparableMap7.size();
        java.lang.CharSequence charSequence15 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap7, (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = strComparableMap17.get((java.lang.Object) true);
        java.lang.Object obj23 = strComparableMap17.clone();
        java.lang.CharSequence charSequence26 = strComparableMap17.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj27 = null;
        java.lang.CharSequence charSequence28 = strComparableMap17.get(obj27);
        strComparableMap17.clear();
        boolean boolean30 = strComparableMap7.containsKey((java.lang.Object) strComparableMap17);
        java.lang.CharSequence charSequence33 = strComparableMap17.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, {null=, =}={null=}}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{null=}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "" + "'", charSequence28, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(charSequence33);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        strComparableMap1.clear();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet9 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence15 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence15);
        java.lang.CharSequence charSequence19 = strComparableMap13.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet20 = strComparableMap13.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap22.get((java.lang.Object) true);
        int int28 = strComparableMap22.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable31 = null;
        java.lang.CharSequence charSequence33 = strComparableMap30.putIfAbsent(strComparable31, (java.lang.CharSequence) "");
        boolean boolean35 = strComparableMap30.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence38 = strComparableMap30.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable43 = null;
        java.lang.CharSequence charSequence45 = strComparableMap42.putIfAbsent(strComparable43, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence48 = strComparableMap42.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean49 = strComparableMap30.remove((java.lang.Object) strComparableMap40, (java.lang.Object) "hi!");
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap40);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence57 = strComparableMap52.get((java.lang.Object) true);
        int int58 = strComparableMap52.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable61 = null;
        java.lang.CharSequence charSequence63 = strComparableMap60.putIfAbsent(strComparable61, (java.lang.CharSequence) "");
        boolean boolean65 = strComparableMap60.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence68 = strComparableMap60.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable73 = null;
        java.lang.CharSequence charSequence75 = strComparableMap72.putIfAbsent(strComparable73, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence78 = strComparableMap72.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean79 = strComparableMap60.remove((java.lang.Object) strComparableMap70, (java.lang.Object) "hi!");
        strComparableMap52.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap70);
        strComparableMap40.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap70);
        java.lang.CharSequence charSequence84 = strComparableMap40.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet85 = strComparableMap40.keySet();
        java.lang.CharSequence charSequence87 = strComparableMap13.getOrDefault((java.lang.Object) strComparableSet85, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = strComparableMap1.get((java.lang.Object) strComparableSet85);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNotNull(strComparableSet9);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNotNull(strComparableEntrySet20);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNull(charSequence78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(charSequence84);
        org.junit.Assert.assertNotNull(strComparableSet85);
        org.junit.Assert.assertEquals("'" + charSequence87 + "' != '" + "hi!" + "'", charSequence87, "hi!");
        org.junit.Assert.assertNull(charSequence88);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        java.lang.CharSequence charSequence17 = strComparableMap14.putIfAbsent(strComparable15, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = strComparableMap14.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean22 = strComparableMap14.containsValue((java.lang.Object) 10);
        boolean boolean24 = strComparableMap1.remove((java.lang.Object) 10, (java.lang.Object) (-1L));
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean22 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence25 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int26 = strComparableMap18.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable31 = null;
        java.lang.CharSequence charSequence33 = strComparableMap30.putIfAbsent(strComparable31, (java.lang.CharSequence) "");
        boolean boolean35 = strComparableMap30.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        int int43 = strComparableMap37.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection44 = strComparableMap37.values();
        boolean boolean45 = strComparableMap30.containsValue((java.lang.Object) strComparableMap37);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean50 = strComparableMap49.isEmpty();
        strComparableMap47.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet52 = strComparableMap49.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection53 = strComparableMap49.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet54 = strComparableMap49.keySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection55 = strComparableMap49.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable58 = null;
        java.lang.CharSequence charSequence60 = strComparableMap57.putIfAbsent(strComparable58, (java.lang.CharSequence) "");
        boolean boolean62 = strComparableMap57.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence65 = strComparableMap57.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean68 = strComparableMap67.isEmpty();
        java.lang.Object obj69 = strComparableMap67.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection70 = strComparableMap67.values();
        strComparableMap57.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap67);
        boolean boolean72 = strComparableMap37.remove((java.lang.Object) charSequenceCollection55, (java.lang.Object) strComparableMap57);
        boolean boolean73 = strComparableMap1.equals((java.lang.Object) boolean72);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet52);
        org.junit.Assert.assertNotNull(charSequenceCollection53);
        org.junit.Assert.assertNotNull(strComparableSet54);
        org.junit.Assert.assertNotNull(charSequenceCollection55);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.String str4 = strComparableMap3.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence14 = strComparableMap6.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap6.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int20 = strComparableMap19.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap19.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap24);
        int int26 = strComparableMap24.size();
        strComparableMap6.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap24);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        boolean boolean32 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "{{null=, =}={}}");
        boolean boolean33 = strComparableMap3.containsValue((java.lang.Object) "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.lang.Object obj8 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        boolean boolean15 = strComparableMap10.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence18 = strComparableMap10.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean21 = strComparableMap20.isEmpty();
        java.lang.Object obj22 = strComparableMap20.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection23 = strComparableMap20.values();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean31 = strComparableMap27.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = strComparableMap27.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int35 = strComparableMap27.size();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        boolean boolean37 = strComparableMap10.isEmpty();
        java.lang.CharSequence charSequence38 = strComparableMap1.get((java.lang.Object) strComparableMap10);
        java.lang.String str39 = strComparableMap1.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{null=}");
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{null=}" + "'", str39, "{null=}");
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.lang.CharSequence charSequence11 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=}");
        java.lang.String str12 = strComparableMap1.toString();
        int int13 = strComparableMap1.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{null=}" + "'", str12, "{null=}");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean17 = strComparableMap13.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence20 = strComparableMap13.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        boolean boolean29 = strComparableMap24.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence32 = strComparableMap24.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean35 = strComparableMap34.isEmpty();
        java.lang.Object obj36 = strComparableMap34.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection37 = strComparableMap34.values();
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap34);
        java.lang.String str39 = strComparableMap24.toString();
        boolean boolean40 = strComparableMap13.remove((java.lang.Object) strComparableMap22, (java.lang.Object) str39);
        boolean boolean41 = strComparableMap10.equals((java.lang.Object) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable44 = null;
        java.lang.CharSequence charSequence46 = strComparableMap43.putIfAbsent(strComparable44, (java.lang.CharSequence) "");
        boolean boolean48 = strComparableMap43.containsValue((java.lang.Object) (short) 100);
        int int49 = strComparableMap43.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence52 = strComparableMap43.getOrDefault((java.lang.Object) strComparableMap50, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean55 = strComparableMap54.isEmpty();
        java.lang.Object obj56 = strComparableMap54.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection57 = strComparableMap54.values();
        boolean boolean58 = strComparableMap22.remove((java.lang.Object) strComparableMap50, (java.lang.Object) strComparableMap54);
        strComparableMap22.clear();
        boolean boolean60 = strComparableMap1.equals((java.lang.Object) strComparableMap22);
        java.lang.String str61 = strComparableMap22.toString();
        boolean boolean65 = strComparableMap22.replace((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence68 = strComparableMap22.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable71 = null;
        java.lang.CharSequence charSequence73 = strComparableMap70.putIfAbsent(strComparable71, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence75 = strComparableMap70.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet76 = strComparableMap70.entrySet();
        java.lang.CharSequence charSequence79 = strComparableMap70.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap70);
        java.lang.Object obj81 = strComparableMap70.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{null=, =}" + "'", str39, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "" + "'", charSequence52, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{}" + "'", str61, "{}");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNotNull(strComparableEntrySet76);
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "{null=, {}=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "{null=, {}=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "{null=, {}=}");
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.lang.CharSequence charSequence10 = strComparableMap6.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence12 = strComparableMap6.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence14 = strComparableMap1.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        java.lang.CharSequence charSequence20 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence20);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        boolean boolean14 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.CharSequence charSequence26 = strComparableMap2.get((java.lang.Object) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean33 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet37 = strComparableMap29.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap39.get((java.lang.Object) true);
        int int45 = strComparableMap39.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap47.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = strComparableMap55.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet61 = strComparableMap55.entrySet();
        strComparableMap47.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap55);
        java.lang.Class<?> wildcardClass63 = strComparableMap55.getClass();
        boolean boolean64 = strComparableMap39.containsKey((java.lang.Object) wildcardClass63);
        boolean boolean65 = strComparableMap29.equals((java.lang.Object) strComparableMap39);
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection67 = strComparableMap22.values();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNotNull(strComparableSet37);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNotNull(strComparableEntrySet61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection67);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 10, (float) (short) 1);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet4 = strComparableMap3.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection9 = strComparableMap6.values();
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet11 = strComparableMap6.entrySet();
        java.lang.Object obj12 = strComparableMap6.clone();
        org.junit.Assert.assertNotNull(strComparableEntrySet4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection9);
        org.junit.Assert.assertNotNull(strComparableEntrySet11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        boolean boolean3 = strComparableMap1.isEmpty();
        int int4 = strComparableMap1.size();
        java.lang.CharSequence charSequence7 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        int int8 = strComparableMap1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.lang.invoke.TypeDescriptor> constantDescMap3 = new java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.lang.invoke.TypeDescriptor>(1, (float) 2, false);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) (short) 1, false);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet6 = strComparableMap3.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection7 = strComparableMap3.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap3.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        java.lang.Object obj22 = strComparableMap16.clone();
        java.lang.CharSequence charSequence25 = strComparableMap16.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj26 = null;
        java.lang.CharSequence charSequence27 = strComparableMap16.get(obj26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap31.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap31.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet36 = strComparableMap31.keySet();
        boolean boolean37 = strComparableMap16.equals((java.lang.Object) strComparableMap31);
        java.lang.String str38 = strComparableMap16.toString();
        boolean boolean39 = strComparableMap10.equals((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        int int48 = strComparableMap41.size();
        java.lang.CharSequence charSequence49 = strComparableMap10.remove((java.lang.Object) strComparableMap41);
        boolean boolean50 = strComparableMap3.equals((java.lang.Object) charSequence49);
        strComparableMap3.clear();
        java.lang.Object obj52 = strComparableMap3.clone();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet6);
        org.junit.Assert.assertNotNull(charSequenceCollection7);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{null=}");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNotNull(strComparableSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=, =}" + "'", str38, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{}");
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        int int8 = strComparableMap6.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0);
        java.lang.CharSequence charSequence12 = strComparableMap10.get((java.lang.Object) (short) 0);
        boolean boolean14 = strComparableMap6.remove((java.lang.Object) strComparableMap10, (java.lang.Object) 1.0d);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        int int22 = strComparableMap16.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet23 = strComparableMap16.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean26 = strComparableMap25.isEmpty();
        java.lang.Object obj27 = strComparableMap25.clone();
        java.lang.CharSequence charSequence29 = strComparableMap25.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        java.lang.Object obj37 = strComparableMap31.clone();
        java.lang.CharSequence charSequence40 = strComparableMap31.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj41 = null;
        java.lang.CharSequence charSequence42 = strComparableMap31.get(obj41);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean47 = strComparableMap46.isEmpty();
        strComparableMap44.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet49 = strComparableMap46.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap46.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet51 = strComparableMap46.keySet();
        boolean boolean52 = strComparableMap31.equals((java.lang.Object) strComparableMap46);
        java.lang.String str53 = strComparableMap31.toString();
        boolean boolean54 = strComparableMap25.equals((java.lang.Object) strComparableMap31);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable57 = null;
        java.lang.CharSequence charSequence59 = strComparableMap56.putIfAbsent(strComparable57, (java.lang.CharSequence) "");
        boolean boolean61 = strComparableMap56.containsValue((java.lang.Object) (short) 100);
        int int62 = strComparableMap56.size();
        int int63 = strComparableMap56.size();
        java.lang.CharSequence charSequence64 = strComparableMap25.remove((java.lang.Object) strComparableMap56);
        boolean boolean65 = strComparableMap16.containsKey((java.lang.Object) strComparableMap25);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable68 = null;
        java.lang.CharSequence charSequence70 = strComparableMap67.putIfAbsent(strComparable68, (java.lang.CharSequence) "");
        boolean boolean72 = strComparableMap67.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence75 = strComparableMap67.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap77 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap79 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable80 = null;
        java.lang.CharSequence charSequence82 = strComparableMap79.putIfAbsent(strComparable80, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence85 = strComparableMap79.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean86 = strComparableMap67.remove((java.lang.Object) strComparableMap77, (java.lang.Object) "hi!");
        java.lang.String str87 = strComparableMap67.toString();
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap67);
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet90 = strComparableMap16.entrySet();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(strComparableSet23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{null=}");
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "" + "'", charSequence42, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet49);
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertNotNull(strComparableSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{null=, =}" + "'", str53, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNull(charSequence82);
        org.junit.Assert.assertNull(charSequence85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "{null=, =}" + "'", str87, "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet90);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet15 = strComparableMap8.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean20 = strComparableMap8.equals((java.lang.Object) 0);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) (short) 100, true);
        java.lang.CharSequence charSequence26 = strComparableMap1.remove((java.lang.Object) strComparableMap25);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(strComparableSet15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence26);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence45 = strComparableMap39.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean46 = strComparableMap27.remove((java.lang.Object) strComparableMap37, (java.lang.Object) "hi!");
        boolean boolean47 = strComparableMap1.containsKey((java.lang.Object) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap50.get((java.lang.Object) true);
        int int56 = strComparableMap50.size();
        java.lang.CharSequence charSequence58 = strComparableMap50.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence61 = strComparableMap50.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str62 = strComparableMap50.toString();
        java.lang.CharSequence charSequence63 = strComparableMap48.remove((java.lang.Object) strComparableMap50);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable66 = null;
        java.lang.CharSequence charSequence68 = strComparableMap65.putIfAbsent(strComparable66, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence70 = strComparableMap65.get((java.lang.Object) true);
        int int71 = strComparableMap65.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet72 = strComparableMap65.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap76 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean77 = strComparableMap65.equals((java.lang.Object) 0);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet78 = strComparableMap65.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap80 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean81 = strComparableMap80.isEmpty();
        java.lang.Object obj82 = strComparableMap80.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap84 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap86 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean87 = strComparableMap86.isEmpty();
        strComparableMap84.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap86);
        strComparableMap80.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap86);
        int int90 = strComparableMap80.size();
        boolean boolean91 = strComparableMap48.remove((java.lang.Object) strComparableMap65, (java.lang.Object) strComparableMap80);
        java.lang.CharSequence charSequence94 = strComparableMap48.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet95 = strComparableMap48.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{null=, =}" + "'", str62, "{null=, =}");
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(strComparableSet72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strComparableSet78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "{}");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(charSequence94);
        org.junit.Assert.assertNotNull(strComparableSet95);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Object, java.lang.Cloneable> objMap3 = new java.util.LinkedHashMap<java.lang.Object, java.lang.Cloneable>(1, 0.0f, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap8.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet22 = strComparableMap16.entrySet();
        strComparableMap8.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.constant.Constable> typeMap24 = new java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.constant.Constable>();
        boolean boolean25 = strComparableMap8.equals((java.lang.Object) typeMap24);
        java.lang.CharSequence charSequence26 = strComparableMap1.get((java.lang.Object) typeMap24);
        int int27 = strComparableMap1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNotNull(strComparableEntrySet22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence26 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap18.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence41 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap39, (java.lang.CharSequence) "{null=}");
        strComparableMap39.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean47 = strComparableMap46.isEmpty();
        strComparableMap44.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        boolean boolean55 = strComparableMap50.containsValue((java.lang.Object) (short) 100);
        int int56 = strComparableMap50.size();
        java.lang.CharSequence charSequence58 = strComparableMap44.getOrDefault((java.lang.Object) strComparableMap50, (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet59 = strComparableMap44.entrySet();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet60 = strComparableMap44.keySet();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet61 = strComparableMap44.keySet();
        boolean boolean62 = strComparableMap39.containsKey((java.lang.Object) strComparableMap44);
        java.lang.CharSequence charSequence65 = strComparableMap39.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        strComparableMap39.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=}" + "'", charSequence41, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertNotNull(strComparableEntrySet59);
        org.junit.Assert.assertNotNull(strComparableSet60);
        org.junit.Assert.assertNotNull(strComparableSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(charSequence65);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.lang.Object obj15 = strComparableMap9.clone();
        java.lang.CharSequence charSequence16 = strComparableMap1.get(obj15);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{null=}");
        org.junit.Assert.assertNull(charSequence16);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        java.util.LinkedHashMap<java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> strComparableMapMap1 = new java.util.LinkedHashMap<java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>((int) (short) 10);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap7.get((java.lang.Object) true);
        java.lang.Object obj13 = strComparableMap7.clone();
        java.lang.CharSequence charSequence16 = strComparableMap7.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj17 = null;
        java.lang.CharSequence charSequence18 = strComparableMap7.get(obj17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap22.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap22.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap22.keySet();
        boolean boolean28 = strComparableMap7.equals((java.lang.Object) strComparableMap22);
        java.lang.String str29 = strComparableMap7.toString();
        boolean boolean30 = strComparableMap1.equals((java.lang.Object) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        boolean boolean37 = strComparableMap32.containsValue((java.lang.Object) (short) 100);
        int int38 = strComparableMap32.size();
        int int39 = strComparableMap32.size();
        java.lang.CharSequence charSequence40 = strComparableMap1.remove((java.lang.Object) strComparableMap32);
        java.lang.CharSequence charSequence43 = strComparableMap32.replace((java.lang.Comparable<java.lang.String>) "{null=, hi!=hi!}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        java.lang.CharSequence charSequence46 = strComparableMap32.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertNotNull(strComparableSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{null=, =}" + "'", str29, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNull(charSequence46);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence5 = null;
        java.lang.CharSequence charSequence6 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence5);
        java.lang.CharSequence charSequence9 = strComparableMap3.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.CharSequence charSequence11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap3.put((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", charSequence11);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        java.lang.String str8 = strComparableMap1.toString();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection9 = strComparableMap1.values();
        java.lang.CharSequence charSequence12 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{}");
        java.lang.Object obj13 = strComparableMap1.clone();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        boolean boolean14 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.CharSequence charSequence26 = strComparableMap2.get((java.lang.Object) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean33 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet37 = strComparableMap29.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap39.get((java.lang.Object) true);
        int int45 = strComparableMap39.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap47.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = strComparableMap55.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet61 = strComparableMap55.entrySet();
        strComparableMap47.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap55);
        java.lang.Class<?> wildcardClass63 = strComparableMap55.getClass();
        boolean boolean64 = strComparableMap39.containsKey((java.lang.Object) wildcardClass63);
        boolean boolean65 = strComparableMap29.equals((java.lang.Object) strComparableMap39);
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.lang.Object obj67 = null;
        boolean boolean68 = strComparableMap29.equals(obj67);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet69 = strComparableMap29.keySet();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNotNull(strComparableSet37);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNotNull(strComparableEntrySet61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strComparableSet69);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        boolean boolean26 = strComparableMap1.isEmpty();
        int int27 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable30 = null;
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent(strComparable30, (java.lang.CharSequence) "");
        boolean boolean34 = strComparableMap29.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence37 = strComparableMap29.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean40 = strComparableMap39.isEmpty();
        java.lang.Object obj41 = strComparableMap39.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection42 = strComparableMap39.values();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap39);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean46 = strComparableMap45.isEmpty();
        java.lang.Object obj47 = strComparableMap45.clone();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        java.lang.CharSequence charSequence50 = strComparableMap39.getOrDefault((java.lang.Object) wildcardClass48, (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet51 = strComparableMap39.keySet();
        int int52 = strComparableMap39.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap39);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{}");
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "hi!" + "'", charSequence50, "hi!");
        org.junit.Assert.assertNotNull(strComparableSet51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        java.lang.Object obj14 = strComparableMap12.clone();
        java.lang.CharSequence charSequence16 = strComparableMap12.remove((java.lang.Object) true);
        boolean boolean20 = strComparableMap12.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        strComparableMap12.clear();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet22 = strComparableMap12.keySet();
        boolean boolean23 = strComparableMap1.containsKey((java.lang.Object) strComparableMap12);
        java.lang.CharSequence charSequence26 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=, hi!=hi!}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strComparableSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence26);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.lang.CharSequence charSequence18 = strComparableMap1.get((java.lang.Object) 'a');
        java.lang.CharSequence charSequence21 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, hi!=hi!}");
        java.lang.Class<?> wildcardClass22 = charSequence21.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "{null=, =}" + "'", charSequence21, "{null=, =}");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> constantDescMap2 = new java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>(3, (float) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor, java.lang.String> typeDescriptorMap2 = new java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor, java.lang.String>(0, 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) -1, (float) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>, java.lang.reflect.GenericDeclaration> wildcardClassOfFieldMap1 = new java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>, java.lang.reflect.GenericDeclaration>(100);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> charSequenceIterableMap2 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((int) (short) 0, (float) (byte) 100);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> genericDeclarationMap3 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((int) (byte) 0, 0.0f, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        java.util.LinkedHashMap<java.lang.CharSequence, java.lang.invoke.TypeDescriptor> charSequenceMap0 = new java.util.LinkedHashMap<java.lang.CharSequence, java.lang.invoke.TypeDescriptor>();
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet19 = strComparableMap16.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap16.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet21 = strComparableMap16.keySet();
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap16);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection23 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(1, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 100, (float) '#');
        java.lang.CharSequence charSequence37 = null;
        java.lang.CharSequence charSequence38 = strComparableMap27.getOrDefault((java.lang.Object) (byte) 100, charSequence37);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean45 = strComparableMap41.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence48 = strComparableMap41.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet49 = strComparableMap41.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10, (float) 1L, false);
        strComparableMap41.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap53);
        boolean boolean55 = strComparableMap1.remove((java.lang.Object) (byte) 100, (java.lang.Object) strComparableMap53);
        boolean boolean59 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{{null=, =}={}}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet19);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertNotNull(strComparableSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection23);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNotNull(strComparableSet49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) ' ', (float) (byte) 100, true);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        java.lang.Object obj14 = strComparableMap12.clone();
        java.lang.CharSequence charSequence16 = strComparableMap12.remove((java.lang.Object) true);
        boolean boolean20 = strComparableMap12.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        strComparableMap12.clear();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet22 = strComparableMap12.keySet();
        boolean boolean23 = strComparableMap1.containsKey((java.lang.Object) strComparableMap12);
        java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = null;
        // The following exception was thrown during execution in test generation
        try {
            strComparableMap12.putAll(strComparableMap24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.Map.size()\" because \"m\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strComparableSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        strComparableMap15.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean57 = strComparableMap56.isEmpty();
        strComparableMap54.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap56);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable61 = null;
        java.lang.CharSequence charSequence63 = strComparableMap60.putIfAbsent(strComparable61, (java.lang.CharSequence) "");
        boolean boolean65 = strComparableMap60.containsValue((java.lang.Object) (short) 100);
        int int66 = strComparableMap60.size();
        java.lang.CharSequence charSequence68 = strComparableMap54.getOrDefault((java.lang.Object) strComparableMap60, (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable71 = null;
        java.lang.CharSequence charSequence73 = strComparableMap70.putIfAbsent(strComparable71, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence75 = strComparableMap70.get((java.lang.Object) true);
        java.lang.Object obj76 = strComparableMap70.clone();
        java.lang.CharSequence charSequence79 = strComparableMap70.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj80 = null;
        java.lang.CharSequence charSequence81 = strComparableMap70.get(obj80);
        strComparableMap70.clear();
        boolean boolean83 = strComparableMap60.containsKey((java.lang.Object) strComparableMap70);
        java.lang.CharSequence charSequence84 = strComparableMap15.get((java.lang.Object) boolean83);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap86 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int87 = strComparableMap86.size();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet88 = strComparableMap86.entrySet();
        java.lang.CharSequence charSequence89 = strComparableMap15.remove((java.lang.Object) strComparableMap86);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet90 = strComparableMap15.keySet();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "{null=}");
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertEquals("'" + charSequence81 + "' != '" + "" + "'", charSequence81, "");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(charSequence84);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(strComparableEntrySet88);
        org.junit.Assert.assertNull(charSequence89);
        org.junit.Assert.assertNotNull(strComparableSet90);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        strComparableMap1.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10, (float) 1L, false);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap3.values();
        java.lang.Object obj5 = null;
        java.lang.CharSequence charSequence6 = strComparableMap3.get(obj5);
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertNull(charSequence6);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10, (float) (byte) 100);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.lang.CharSequence charSequence38 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence40 = null;
        java.lang.CharSequence charSequence41 = strComparableMap1.putIfAbsent(strComparable39, charSequence40);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "" + "'", charSequence41, "");
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.lang.String str11 = strComparableMap7.toString();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection12 = strComparableMap7.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection12);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> genericDeclarationMap1 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((int) (short) 0);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        java.lang.Object obj22 = strComparableMap16.clone();
        java.lang.CharSequence charSequence25 = strComparableMap16.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj26 = null;
        java.lang.CharSequence charSequence27 = strComparableMap16.get(obj26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap31.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap31.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet36 = strComparableMap31.keySet();
        boolean boolean37 = strComparableMap16.equals((java.lang.Object) strComparableMap31);
        java.lang.String str38 = strComparableMap16.toString();
        boolean boolean39 = strComparableMap10.equals((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        int int48 = strComparableMap41.size();
        java.lang.CharSequence charSequence49 = strComparableMap10.remove((java.lang.Object) strComparableMap41);
        boolean boolean50 = strComparableMap1.containsKey((java.lang.Object) strComparableMap10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence57 = strComparableMap52.get((java.lang.Object) true);
        int int58 = strComparableMap52.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection59 = strComparableMap52.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable62 = null;
        java.lang.CharSequence charSequence64 = strComparableMap61.putIfAbsent(strComparable62, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence67 = strComparableMap61.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap69 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable70 = null;
        java.lang.CharSequence charSequence72 = strComparableMap69.putIfAbsent(strComparable70, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence74 = strComparableMap69.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet75 = strComparableMap69.entrySet();
        strComparableMap61.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap69);
        java.lang.CharSequence charSequence78 = strComparableMap52.getOrDefault((java.lang.Object) strComparableMap69, (java.lang.CharSequence) "{null=, =}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet79 = strComparableMap69.keySet();
        boolean boolean80 = strComparableMap1.containsKey((java.lang.Object) strComparableSet79);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{null=}");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNotNull(strComparableSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=, =}" + "'", str38, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection59);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertNotNull(strComparableEntrySet75);
        org.junit.Assert.assertEquals("'" + charSequence78 + "' != '" + "{null=, =}" + "'", charSequence78, "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableSet79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap12.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet26 = strComparableMap20.entrySet();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap29.values();
        strComparableMap29.clear();
        boolean boolean32 = strComparableMap12.containsKey((java.lang.Object) strComparableMap29);
        java.lang.CharSequence charSequence35 = strComparableMap29.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.lang.CharSequence charSequence39 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=, hi!=hi!}", (java.lang.CharSequence) "{}");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass40 = charSequence39.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNotNull(strComparableEntrySet26);
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence39);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(100, (float) (byte) 100, true);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean31 = strComparableMap8.isEmpty();
        java.lang.CharSequence charSequence34 = strComparableMap8.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        boolean boolean43 = strComparableMap36.isEmpty();
        java.lang.CharSequence charSequence45 = strComparableMap8.getOrDefault((java.lang.Object) strComparableMap36, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence48 = strComparableMap36.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean49 = strComparableMap36.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean52 = strComparableMap51.isEmpty();
        java.lang.Object obj53 = strComparableMap51.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        strComparableMap55.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap57);
        strComparableMap51.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap57);
        java.lang.String str61 = strComparableMap57.toString();
        java.lang.CharSequence charSequence64 = strComparableMap57.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=}");
        boolean boolean68 = strComparableMap57.replace((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{}");
        boolean boolean69 = strComparableMap36.equals((java.lang.Object) strComparableMap57);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{}" + "'", str61, "{}");
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap1.containsKey((java.lang.Object) 1);
        strComparableMap1.clear();
        strComparableMap1.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence34 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj35 = null;
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.lang.CharSequence charSequence41 = strComparableMap37.remove((java.lang.Object) true);
        boolean boolean45 = strComparableMap37.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap1.remove(obj35, (java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap48.get((java.lang.Object) true);
        java.lang.Object obj54 = strComparableMap48.clone();
        java.lang.CharSequence charSequence57 = strComparableMap48.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj58 = null;
        java.lang.CharSequence charSequence59 = strComparableMap48.get(obj58);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean64 = strComparableMap63.isEmpty();
        strComparableMap61.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap63);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet66 = strComparableMap63.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection67 = strComparableMap63.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet68 = strComparableMap63.keySet();
        boolean boolean69 = strComparableMap48.equals((java.lang.Object) strComparableMap63);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        java.lang.CharSequence charSequence73 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{}");
        boolean boolean74 = strComparableMap1.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap76 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int77 = strComparableMap76.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap81 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap76.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap81);
        int int83 = strComparableMap81.size();
        java.lang.String str84 = strComparableMap81.toString();
        boolean boolean85 = strComparableMap1.containsKey((java.lang.Object) strComparableMap81);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{null=}");
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "" + "'", charSequence59, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet66);
        org.junit.Assert.assertNotNull(charSequenceCollection67);
        org.junit.Assert.assertNotNull(strComparableSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "{}" + "'", str84, "{}");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) (short) 100, true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(1, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        strComparableMap7.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence20 = strComparableMap17.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet21 = strComparableMap17.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable24 = null;
        java.lang.CharSequence charSequence26 = strComparableMap23.putIfAbsent(strComparable24, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence28 = strComparableMap23.get((java.lang.Object) true);
        java.lang.Object obj29 = strComparableMap23.clone();
        java.lang.CharSequence charSequence32 = strComparableMap23.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj33 = null;
        java.lang.CharSequence charSequence34 = strComparableMap23.get(obj33);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean39 = strComparableMap38.isEmpty();
        strComparableMap36.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet41 = strComparableMap38.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection42 = strComparableMap38.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet43 = strComparableMap38.keySet();
        boolean boolean44 = strComparableMap23.equals((java.lang.Object) strComparableMap38);
        java.lang.String str45 = strComparableMap23.toString();
        java.lang.CharSequence charSequence48 = strComparableMap23.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap50.get((java.lang.Object) true);
        java.lang.Object obj56 = strComparableMap50.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        java.lang.CharSequence charSequence61 = strComparableMap58.putIfAbsent(strComparable59, (java.lang.CharSequence) "");
        boolean boolean63 = strComparableMap58.containsValue((java.lang.Object) (short) 100);
        int int64 = strComparableMap58.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence67 = strComparableMap58.getOrDefault((java.lang.Object) strComparableMap65, (java.lang.CharSequence) "");
        java.lang.String str68 = strComparableMap58.toString();
        boolean boolean69 = strComparableMap23.remove(obj56, (java.lang.Object) str68);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable73 = null;
        java.lang.CharSequence charSequence75 = strComparableMap72.putIfAbsent(strComparable73, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence77 = strComparableMap72.get((java.lang.Object) true);
        int int78 = strComparableMap72.size();
        java.lang.CharSequence charSequence80 = strComparableMap72.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence83 = strComparableMap72.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj84 = strComparableMap72.clone();
        boolean boolean85 = strComparableMap17.remove((java.lang.Object) strComparableMap70, (java.lang.Object) strComparableMap72);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet86 = strComparableMap70.keySet();
        boolean boolean87 = strComparableMap9.containsValue((java.lang.Object) strComparableMap70);
        java.lang.CharSequence charSequence88 = strComparableMap3.get((java.lang.Object) strComparableMap70);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap89 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNotNull(strComparableEntrySet21);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{null=}");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "" + "'", charSequence34, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet41);
        org.junit.Assert.assertNotNull(charSequenceCollection42);
        org.junit.Assert.assertNotNull(strComparableSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{null=, =}" + "'", str45, "{null=, =}");
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{null=}");
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "" + "'", charSequence67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "{null=}" + "'", str68, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertNull(charSequence83);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strComparableSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(charSequence88);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap7.get((java.lang.Object) true);
        java.lang.Object obj13 = strComparableMap7.clone();
        java.lang.CharSequence charSequence16 = strComparableMap7.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj17 = null;
        java.lang.CharSequence charSequence18 = strComparableMap7.get(obj17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap22.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap22.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap22.keySet();
        boolean boolean28 = strComparableMap7.equals((java.lang.Object) strComparableMap22);
        java.lang.String str29 = strComparableMap7.toString();
        boolean boolean30 = strComparableMap1.equals((java.lang.Object) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean33 = strComparableMap32.isEmpty();
        java.lang.Object obj34 = strComparableMap32.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean39 = strComparableMap38.isEmpty();
        strComparableMap36.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        strComparableMap32.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        java.lang.String str42 = strComparableMap38.toString();
        java.lang.CharSequence charSequence45 = strComparableMap38.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence47 = strComparableMap1.getOrDefault((java.lang.Object) charSequence45, (java.lang.CharSequence) "{null=, {null=, =}={null=}}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertNotNull(strComparableSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{null=, =}" + "'", str29, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "{null=, {null=, =}={null=}}" + "'", charSequence47, "{null=, {null=, =}={null=}}");
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        strComparableMap1.clear();
        java.lang.CharSequence charSequence16 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection21 = strComparableMap18.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable24 = null;
        java.lang.CharSequence charSequence26 = strComparableMap23.putIfAbsent(strComparable24, (java.lang.CharSequence) "");
        boolean boolean28 = strComparableMap23.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable31 = null;
        java.lang.CharSequence charSequence33 = strComparableMap30.putIfAbsent(strComparable31, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap30.get((java.lang.Object) true);
        int int36 = strComparableMap30.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection37 = strComparableMap30.values();
        boolean boolean38 = strComparableMap23.containsValue((java.lang.Object) strComparableMap30);
        boolean boolean39 = strComparableMap18.equals((java.lang.Object) strComparableMap30);
        boolean boolean40 = strComparableMap1.containsValue((java.lang.Object) boolean39);
        java.lang.CharSequence charSequence43 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence48 = strComparableMap45.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap45.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        boolean boolean54 = strComparableMap45.isEmpty();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet55 = strComparableMap45.keySet();
        java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.ConstantDesc> comparableEntrySetMap56 = new java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.ConstantDesc>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence61 = strComparableMap58.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap58.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap65);
        java.lang.CharSequence charSequence69 = strComparableMap65.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        boolean boolean70 = strComparableMap45.remove((java.lang.Object) comparableEntrySetMap56, (java.lang.Object) "{}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection71 = strComparableMap45.values();
        boolean boolean72 = strComparableMap1.equals((java.lang.Object) strComparableMap45);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection21);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strComparableSet55);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection8 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap10.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap18.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.CharSequence charSequence27 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap18, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean30 = strComparableMap29.isEmpty();
        java.lang.Object obj31 = strComparableMap29.clone();
        java.lang.CharSequence charSequence33 = strComparableMap29.remove((java.lang.Object) true);
        boolean boolean37 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean39 = strComparableMap29.containsValue((java.lang.Object) (-1));
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        boolean boolean41 = strComparableMap29.isEmpty();
        java.lang.CharSequence charSequence44 = null;
        boolean boolean45 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}", charSequence44);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection8);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "{null=, =}" + "'", charSequence27, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap37.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence58 = strComparableMap53.get((java.lang.Object) true);
        int int59 = strComparableMap53.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet60 = strComparableMap53.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean65 = strComparableMap53.equals((java.lang.Object) 0);
        strComparableMap46.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap53);
        java.lang.CharSequence charSequence68 = strComparableMap37.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "{null=}");
        java.lang.Object obj69 = strComparableMap37.clone();
        java.lang.String str70 = strComparableMap37.toString();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet71 = strComparableMap37.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(strComparableSet60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "{null=}" + "'", charSequence68, "{null=}");
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "{null=}");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{null=}" + "'", str70, "{null=}");
        org.junit.Assert.assertNotNull(strComparableSet71);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        java.lang.Object obj22 = strComparableMap16.clone();
        java.lang.CharSequence charSequence25 = strComparableMap16.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj26 = null;
        java.lang.CharSequence charSequence27 = strComparableMap16.get(obj26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap31.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap31.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet36 = strComparableMap31.keySet();
        boolean boolean37 = strComparableMap16.equals((java.lang.Object) strComparableMap31);
        java.lang.String str38 = strComparableMap16.toString();
        boolean boolean39 = strComparableMap10.equals((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        int int48 = strComparableMap41.size();
        java.lang.CharSequence charSequence49 = strComparableMap10.remove((java.lang.Object) strComparableMap41);
        boolean boolean50 = strComparableMap1.containsKey((java.lang.Object) strComparableMap10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        boolean boolean57 = strComparableMap52.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence60 = strComparableMap52.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable65 = null;
        java.lang.CharSequence charSequence67 = strComparableMap64.putIfAbsent(strComparable65, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence70 = strComparableMap64.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean71 = strComparableMap52.remove((java.lang.Object) strComparableMap62, (java.lang.Object) "hi!");
        java.lang.String str72 = strComparableMap52.toString();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        java.lang.String str74 = strComparableMap52.toString();
        boolean boolean78 = strComparableMap52.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "{null=, {null=, =}={null=}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{null=}");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNotNull(strComparableSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=, =}" + "'", str38, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "{null=, =}" + "'", str72, "{null=, =}");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{null=, =}" + "'", str74, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }
}

