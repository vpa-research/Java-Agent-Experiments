package org.huawei.linkedhashmap;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        int int16 = strComparableMap11.size();
        boolean boolean20 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(2);
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap4 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable5 = null;
        java.lang.CharSequence charSequence7 = strComparableMap4.putIfAbsent(strComparable5, (java.lang.CharSequence) "");
        boolean boolean9 = strComparableMap4.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        boolean boolean21 = strComparableMap16.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable24 = null;
        java.lang.CharSequence charSequence26 = strComparableMap23.putIfAbsent(strComparable24, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence28 = strComparableMap23.get((java.lang.Object) true);
        int int29 = strComparableMap23.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap23.values();
        boolean boolean31 = strComparableMap16.containsValue((java.lang.Object) strComparableMap23);
        boolean boolean32 = strComparableMap11.equals((java.lang.Object) strComparableMap23);
        strComparableMap4.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap4.entrySet();
        java.lang.CharSequence charSequence37 = strComparableMap4.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj38 = null;
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean41 = strComparableMap40.isEmpty();
        java.lang.Object obj42 = strComparableMap40.clone();
        java.lang.CharSequence charSequence44 = strComparableMap40.remove((java.lang.Object) true);
        boolean boolean48 = strComparableMap40.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean49 = strComparableMap4.remove(obj38, (java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence56 = strComparableMap51.get((java.lang.Object) true);
        java.lang.Object obj57 = strComparableMap51.clone();
        java.lang.CharSequence charSequence60 = strComparableMap51.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj61 = null;
        java.lang.CharSequence charSequence62 = strComparableMap51.get(obj61);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean67 = strComparableMap66.isEmpty();
        strComparableMap64.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap66);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet69 = strComparableMap66.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection70 = strComparableMap66.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet71 = strComparableMap66.keySet();
        boolean boolean72 = strComparableMap51.equals((java.lang.Object) strComparableMap66);
        strComparableMap4.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        java.lang.CharSequence charSequence76 = strComparableMap4.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{}");
        boolean boolean77 = strComparableMap4.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap79 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable80 = null;
        java.lang.CharSequence charSequence82 = strComparableMap79.putIfAbsent(strComparable80, (java.lang.CharSequence) "");
        boolean boolean84 = strComparableMap79.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence87 = strComparableMap79.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean89 = strComparableMap79.containsKey((java.lang.Object) 1);
        boolean boolean93 = strComparableMap79.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence96 = strComparableMap79.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!");
        boolean boolean97 = strComparableMap4.containsKey((java.lang.Object) strComparableMap79);
        java.lang.CharSequence charSequence99 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap4, (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{}");
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{null=}");
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "" + "'", charSequence62, "");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet69);
        org.junit.Assert.assertNotNull(charSequenceCollection70);
        org.junit.Assert.assertNotNull(strComparableSet71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(charSequence76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(charSequence82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(charSequence87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(charSequence96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertEquals("'" + charSequence99 + "' != '" + "{{}={null=, =, hi!=hi!}}" + "'", charSequence99, "{{}={null=, =, hi!=hi!}}");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet10 = strComparableMap2.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10, (float) 1L, false);
        strComparableMap2.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap14);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean22 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        strComparableMap2.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean29 = strComparableMap28.isEmpty();
        strComparableMap26.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap28);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap28.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection32 = strComparableMap28.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet33 = strComparableMap28.entrySet();
        boolean boolean34 = strComparableMap23.containsValue((java.lang.Object) strComparableMap28);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(strComparableSet10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertNotNull(charSequenceCollection32);
        org.junit.Assert.assertNotNull(strComparableEntrySet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.invoke.TypeDescriptor> typeMap3 = new java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.invoke.TypeDescriptor>(2, (float) (byte) -1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4', (float) (short) 1);
        boolean boolean20 = strComparableMap1.containsValue((java.lang.Object) '4');
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.lang.CharSequence charSequence10 = strComparableMap6.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence12 = strComparableMap6.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence14 = strComparableMap1.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean20 = strComparableMap19.isEmpty();
        java.lang.Object obj21 = strComparableMap19.clone();
        java.lang.CharSequence charSequence23 = strComparableMap19.remove((java.lang.Object) true);
        boolean boolean27 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        strComparableMap19.clear();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean33 = strComparableMap32.isEmpty();
        java.lang.Object obj34 = strComparableMap32.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap32.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        boolean boolean42 = strComparableMap37.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable45 = null;
        java.lang.CharSequence charSequence47 = strComparableMap44.putIfAbsent(strComparable45, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence49 = strComparableMap44.get((java.lang.Object) true);
        int int50 = strComparableMap44.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection51 = strComparableMap44.values();
        boolean boolean52 = strComparableMap37.containsValue((java.lang.Object) strComparableMap44);
        boolean boolean53 = strComparableMap32.equals((java.lang.Object) strComparableMap44);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = strComparableMap55.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable63 = null;
        java.lang.CharSequence charSequence65 = strComparableMap62.putIfAbsent(strComparable63, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence67 = strComparableMap62.get((java.lang.Object) true);
        int int68 = strComparableMap62.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet69 = strComparableMap62.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap73 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean74 = strComparableMap62.equals((java.lang.Object) 0);
        strComparableMap55.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        boolean boolean76 = strComparableMap32.containsValue((java.lang.Object) strComparableMap55);
        java.lang.CharSequence charSequence77 = strComparableMap30.get((java.lang.Object) strComparableMap32);
        strComparableMap19.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap30);
        int int79 = strComparableMap30.size();
        java.lang.CharSequence charSequence82 = strComparableMap30.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{}");
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(strComparableSet69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNull(charSequence82);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = strComparableMap13.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean20 = strComparableMap1.remove((java.lang.Object) strComparableMap11, (java.lang.Object) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean25 = strComparableMap24.isEmpty();
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap24);
        java.lang.String str27 = strComparableMap24.toString();
        java.lang.CharSequence charSequence28 = strComparableMap1.remove((java.lang.Object) str27);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(charSequence28);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection2 = strComparableMap1.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet3 = strComparableMap1.entrySet();
        java.lang.Class<?> wildcardClass4 = strComparableMap1.getClass();
        org.junit.Assert.assertNotNull(charSequenceCollection2);
        org.junit.Assert.assertNotNull(strComparableEntrySet3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        java.util.LinkedHashMap<java.io.Serializable, java.lang.Object> serializableMap0 = new java.util.LinkedHashMap<java.io.Serializable, java.lang.Object>();
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        strComparableMap15.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap15);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        boolean boolean14 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.CharSequence charSequence26 = strComparableMap2.get((java.lang.Object) strComparableMap22);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap22.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet28 = strComparableMap22.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(10, (float) 2, false);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet33 = strComparableMap32.keySet();
        java.lang.CharSequence charSequence34 = strComparableMap22.get((java.lang.Object) strComparableSet33);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertNotNull(strComparableEntrySet28);
        org.junit.Assert.assertNotNull(strComparableSet33);
        org.junit.Assert.assertNull(charSequence34);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        int int11 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap13.get((java.lang.Object) true);
        java.lang.Object obj19 = strComparableMap13.clone();
        java.lang.String str20 = strComparableMap13.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap22.get((java.lang.Object) true);
        int int28 = strComparableMap22.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable31 = null;
        java.lang.CharSequence charSequence33 = strComparableMap30.putIfAbsent(strComparable31, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap30.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence43 = strComparableMap38.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet44 = strComparableMap38.entrySet();
        strComparableMap30.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        java.lang.Class<?> wildcardClass46 = strComparableMap38.getClass();
        boolean boolean47 = strComparableMap22.containsKey((java.lang.Object) wildcardClass46);
        boolean boolean48 = strComparableMap13.containsValue((java.lang.Object) strComparableMap22);
        java.lang.CharSequence charSequence49 = strComparableMap1.remove((java.lang.Object) strComparableMap22);
        int int50 = strComparableMap22.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{null=}");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{null=}" + "'", str20, "{null=}");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNotNull(strComparableEntrySet44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable4 = null;
        java.lang.CharSequence charSequence6 = strComparableMap3.putIfAbsent(strComparable4, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence8 = strComparableMap3.get((java.lang.Object) true);
        java.lang.Object obj9 = strComparableMap3.clone();
        java.lang.CharSequence charSequence12 = strComparableMap3.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj13 = null;
        java.lang.CharSequence charSequence14 = strComparableMap3.get(obj13);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet21 = strComparableMap18.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap18.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet23 = strComparableMap18.keySet();
        boolean boolean24 = strComparableMap3.equals((java.lang.Object) strComparableMap18);
        java.lang.String str25 = strComparableMap3.toString();
        java.lang.CharSequence charSequence26 = strComparableMap1.get((java.lang.Object) str25);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        int int34 = strComparableMap28.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap36.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable45 = null;
        java.lang.CharSequence charSequence47 = strComparableMap44.putIfAbsent(strComparable45, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence49 = strComparableMap44.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet50 = strComparableMap44.entrySet();
        strComparableMap36.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap44);
        java.lang.Class<?> wildcardClass52 = strComparableMap44.getClass();
        boolean boolean53 = strComparableMap28.containsKey((java.lang.Object) wildcardClass52);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean59 = strComparableMap58.isEmpty();
        strComparableMap56.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap58);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet61 = strComparableMap58.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection62 = strComparableMap58.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet63 = strComparableMap58.entrySet();
        boolean boolean64 = strComparableMap28.remove((java.lang.Object) 100.0d, (java.lang.Object) strComparableEntrySet63);
        boolean boolean65 = strComparableMap1.containsValue((java.lang.Object) strComparableEntrySet63);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{null=}");
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet21);
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertNotNull(strComparableSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{null=, =}" + "'", str25, "{null=, =}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNotNull(strComparableEntrySet50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet61);
        org.junit.Assert.assertNotNull(charSequenceCollection62);
        org.junit.Assert.assertNotNull(strComparableEntrySet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        java.lang.Object obj22 = strComparableMap16.clone();
        java.lang.CharSequence charSequence25 = strComparableMap16.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj26 = null;
        java.lang.CharSequence charSequence27 = strComparableMap16.get(obj26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap31.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap31.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet36 = strComparableMap31.keySet();
        boolean boolean37 = strComparableMap16.equals((java.lang.Object) strComparableMap31);
        java.lang.String str38 = strComparableMap16.toString();
        boolean boolean39 = strComparableMap10.equals((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        int int48 = strComparableMap41.size();
        java.lang.CharSequence charSequence49 = strComparableMap10.remove((java.lang.Object) strComparableMap41);
        boolean boolean50 = strComparableMap1.containsKey((java.lang.Object) strComparableMap10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        boolean boolean57 = strComparableMap52.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence60 = strComparableMap52.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable65 = null;
        java.lang.CharSequence charSequence67 = strComparableMap64.putIfAbsent(strComparable65, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence70 = strComparableMap64.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean71 = strComparableMap52.remove((java.lang.Object) strComparableMap62, (java.lang.Object) "hi!");
        java.lang.String str72 = strComparableMap52.toString();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        java.lang.String str74 = strComparableMap52.toString();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet75 = strComparableMap52.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{null=}");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNotNull(strComparableSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=, =}" + "'", str38, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "{null=, =}" + "'", str72, "{null=, =}");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{null=, =}" + "'", str74, "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableSet75);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean31 = strComparableMap8.isEmpty();
        java.lang.CharSequence charSequence34 = strComparableMap8.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        boolean boolean43 = strComparableMap36.isEmpty();
        java.lang.CharSequence charSequence45 = strComparableMap8.getOrDefault((java.lang.Object) strComparableMap36, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        boolean boolean52 = strComparableMap47.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence55 = strComparableMap47.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        java.lang.Object obj59 = strComparableMap57.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection60 = strComparableMap57.values();
        strComparableMap47.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap57);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap47);
        boolean boolean63 = strComparableMap8.containsKey((java.lang.Object) strComparableMap47);
        java.lang.CharSequence charSequence66 = strComparableMap8.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(charSequence66);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        java.util.LinkedHashMap<java.lang.Object, java.util.Collection<java.lang.CharSequence>> objMap0 = new java.util.LinkedHashMap<java.lang.Object, java.util.Collection<java.lang.CharSequence>>();
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.lang.CharSequence charSequence18 = strComparableMap1.get((java.lang.Object) 'a');
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        boolean boolean26 = strComparableMap21.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        int int34 = strComparableMap28.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap28.values();
        boolean boolean36 = strComparableMap21.containsValue((java.lang.Object) strComparableMap28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        boolean boolean43 = strComparableMap38.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence46 = strComparableMap38.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence49 = strComparableMap38.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = strComparableMap38.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap38.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean56 = strComparableMap21.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence61 = strComparableMap21.getOrDefault((java.lang.Object) strComparableMap59, (java.lang.CharSequence) "{null=}");
        strComparableMap59.clear();
        java.lang.CharSequence charSequence63 = null;
        java.lang.CharSequence charSequence64 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap59, charSequence63);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence70 = null;
        java.lang.CharSequence charSequence71 = strComparableMap68.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence70);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap68);
        boolean boolean73 = strComparableMap1.equals((java.lang.Object) strComparableMap72);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap75 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean76 = strComparableMap75.isEmpty();
        java.lang.Object obj77 = strComparableMap75.clone();
        java.lang.CharSequence charSequence79 = strComparableMap75.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence81 = strComparableMap75.get((java.lang.Object) 100L);
        strComparableMap75.clear();
        java.lang.CharSequence charSequence83 = strComparableMap1.get((java.lang.Object) strComparableMap75);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "{null=}" + "'", charSequence61, "{null=}");
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "{}");
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertNull(charSequence81);
        org.junit.Assert.assertNull(charSequence83);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        java.util.LinkedHashMap<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceMap2 = new java.util.LinkedHashMap<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>(2, 1.0f);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 0, (float) (short) 10, false);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable6 = null;
        java.lang.CharSequence charSequence8 = strComparableMap5.putIfAbsent(strComparable6, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence10 = strComparableMap5.get((java.lang.Object) true);
        int int11 = strComparableMap5.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet12 = strComparableMap5.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean17 = strComparableMap5.equals((java.lang.Object) 0);
        java.lang.CharSequence charSequence19 = strComparableMap3.getOrDefault((java.lang.Object) 0, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap21.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.constant.Constable> cloneableMap30 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.constant.Constable>(1);
        boolean boolean31 = strComparableMap21.remove((java.lang.Object) (-1L), (java.lang.Object) 1);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet32 = strComparableMap21.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable35 = null;
        java.lang.CharSequence charSequence37 = strComparableMap34.putIfAbsent(strComparable35, (java.lang.CharSequence) "");
        boolean boolean39 = strComparableMap34.containsValue((java.lang.Object) (short) 100);
        int int40 = strComparableMap34.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence43 = strComparableMap34.getOrDefault((java.lang.Object) strComparableMap41, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable46 = null;
        java.lang.CharSequence charSequence48 = strComparableMap45.putIfAbsent(strComparable46, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence50 = strComparableMap45.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet51 = strComparableMap45.entrySet();
        java.lang.CharSequence charSequence54 = strComparableMap45.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence57 = strComparableMap45.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, =}");
        strComparableMap34.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap45);
        java.lang.CharSequence charSequence59 = strComparableMap21.get((java.lang.Object) strComparableMap45);
        boolean boolean60 = strComparableMap3.equals((java.lang.Object) charSequence59);
        int int61 = strComparableMap3.size();
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(strComparableSet12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "{null=, =}" + "'", charSequence19, "{null=, =}");
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet32);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "" + "'", charSequence43, "");
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNotNull(strComparableEntrySet51);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        java.util.LinkedHashMap<java.lang.Class<?>, java.lang.constant.Constable> wildcardClassMap2 = new java.util.LinkedHashMap<java.lang.Class<?>, java.lang.constant.Constable>((int) (short) 0, (float) (byte) 10);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(3, (float) '4', false);
        boolean boolean7 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=, hi!=hi!}", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        int int8 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        java.lang.Object obj22 = strComparableMap16.clone();
        java.lang.CharSequence charSequence25 = strComparableMap16.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj26 = null;
        java.lang.CharSequence charSequence27 = strComparableMap16.get(obj26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap31.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap31.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet36 = strComparableMap31.keySet();
        boolean boolean37 = strComparableMap16.equals((java.lang.Object) strComparableMap31);
        java.lang.String str38 = strComparableMap16.toString();
        boolean boolean39 = strComparableMap10.equals((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        int int48 = strComparableMap41.size();
        java.lang.CharSequence charSequence49 = strComparableMap10.remove((java.lang.Object) strComparableMap41);
        boolean boolean50 = strComparableMap1.containsKey((java.lang.Object) strComparableMap10);
        boolean boolean51 = strComparableMap1.isEmpty();
        boolean boolean55 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{null=}");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNotNull(strComparableSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=, =}" + "'", str38, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        boolean boolean9 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        strComparableMap1.clear();
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean18 = strComparableMap14.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = strComparableMap14.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        java.lang.CharSequence charSequence28 = strComparableMap25.putIfAbsent(strComparable26, (java.lang.CharSequence) "");
        boolean boolean30 = strComparableMap25.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence33 = strComparableMap25.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean36 = strComparableMap35.isEmpty();
        java.lang.Object obj37 = strComparableMap35.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection38 = strComparableMap35.values();
        strComparableMap25.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap35);
        java.lang.String str40 = strComparableMap25.toString();
        boolean boolean41 = strComparableMap14.remove((java.lang.Object) strComparableMap23, (java.lang.Object) str40);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int44 = strComparableMap43.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap43.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        java.lang.CharSequence charSequence52 = strComparableMap43.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence55 = strComparableMap43.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        boolean boolean59 = strComparableMap43.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection60 = strComparableMap43.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 0, (float) (short) 10, false);
        boolean boolean65 = strComparableMap23.remove((java.lang.Object) strComparableMap43, (java.lang.Object) (byte) 0);
        boolean boolean66 = strComparableMap1.equals((java.lang.Object) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{null=, =}" + "'", str40, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection13 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = strComparableMap15.get((java.lang.Object) true);
        int int21 = strComparableMap15.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap15.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap24.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap32.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet38 = strComparableMap32.entrySet();
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.lang.CharSequence charSequence41 = strComparableMap15.getOrDefault((java.lang.Object) strComparableMap32, (java.lang.CharSequence) "{null=, =}");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap15);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection43 = strComparableMap1.values();
        java.lang.CharSequence charSequence46 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNotNull(strComparableEntrySet38);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=, =}" + "'", charSequence41, "{null=, =}");
        org.junit.Assert.assertNotNull(charSequenceCollection43);
        org.junit.Assert.assertNull(charSequence46);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap21.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean28 = strComparableMap9.remove((java.lang.Object) strComparableMap19, (java.lang.Object) "hi!");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        int int37 = strComparableMap31.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        boolean boolean44 = strComparableMap39.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence47 = strComparableMap39.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence57 = strComparableMap51.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean58 = strComparableMap39.remove((java.lang.Object) strComparableMap49, (java.lang.Object) "hi!");
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        strComparableMap19.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        strComparableMap19.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        strComparableMap1.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        int int13 = strComparableMap7.size();
        java.lang.CharSequence charSequence15 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap7, (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = strComparableMap17.get((java.lang.Object) true);
        java.lang.Object obj23 = strComparableMap17.clone();
        java.lang.CharSequence charSequence26 = strComparableMap17.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj27 = null;
        java.lang.CharSequence charSequence28 = strComparableMap17.get(obj27);
        strComparableMap17.clear();
        boolean boolean30 = strComparableMap7.containsKey((java.lang.Object) strComparableMap17);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection31 = strComparableMap17.values();
        java.lang.Class<?> wildcardClass32 = strComparableMap17.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{null=}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "" + "'", charSequence28, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap2);
        java.lang.Object obj8 = strComparableMap2.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        boolean boolean15 = strComparableMap10.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence18 = strComparableMap10.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean21 = strComparableMap20.isEmpty();
        java.lang.Object obj22 = strComparableMap20.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection23 = strComparableMap20.values();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.lang.String str25 = strComparableMap10.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.lang.CharSequence charSequence31 = strComparableMap27.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence33 = strComparableMap27.get((java.lang.Object) 100L);
        boolean boolean34 = strComparableMap10.containsValue((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence41 = strComparableMap36.get((java.lang.Object) true);
        int int42 = strComparableMap36.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet43 = strComparableMap36.keySet();
        boolean boolean44 = strComparableMap10.equals((java.lang.Object) strComparableMap36);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet52 = strComparableMap46.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        java.lang.Object obj54 = strComparableMap10.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean57 = strComparableMap56.isEmpty();
        java.lang.Object obj58 = strComparableMap56.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection59 = strComparableMap56.values();
        java.lang.CharSequence charSequence61 = strComparableMap10.getOrDefault((java.lang.Object) charSequenceCollection59, (java.lang.CharSequence) "");
        boolean boolean62 = strComparableMap2.containsValue((java.lang.Object) charSequence61);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{null=, =}" + "'", str25, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strComparableSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNotNull(strComparableEntrySet52);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection59);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "" + "'", charSequence61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((int) (byte) -1, (float) 3, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor, java.lang.Object> typeDescriptorMap1 = new java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor, java.lang.Object>((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap21.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean28 = strComparableMap9.remove((java.lang.Object) strComparableMap19, (java.lang.Object) "hi!");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        int int37 = strComparableMap31.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        boolean boolean44 = strComparableMap39.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence47 = strComparableMap39.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence57 = strComparableMap51.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean58 = strComparableMap39.remove((java.lang.Object) strComparableMap49, (java.lang.Object) "hi!");
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        strComparableMap19.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        java.lang.CharSequence charSequence63 = strComparableMap19.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet64 = strComparableMap19.keySet();
        java.lang.String str65 = strComparableMap19.toString();
        java.lang.Object obj66 = strComparableMap19.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNotNull(strComparableSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{{}={null=, =, hi!=hi!}}" + "'", str65, "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{{}={null=, =, hi!=hi!}}");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.lang.Object obj43 = strComparableMap37.clone();
        java.lang.CharSequence charSequence46 = strComparableMap37.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj47 = null;
        java.lang.CharSequence charSequence48 = strComparableMap37.get(obj47);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean53 = strComparableMap52.isEmpty();
        strComparableMap50.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet55 = strComparableMap52.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection56 = strComparableMap52.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet57 = strComparableMap52.keySet();
        boolean boolean58 = strComparableMap37.equals((java.lang.Object) strComparableMap52);
        java.lang.String str59 = strComparableMap37.toString();
        java.lang.CharSequence charSequence62 = strComparableMap37.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable65 = null;
        java.lang.CharSequence charSequence67 = strComparableMap64.putIfAbsent(strComparable65, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence69 = strComparableMap64.get((java.lang.Object) true);
        java.lang.Object obj70 = strComparableMap64.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable73 = null;
        java.lang.CharSequence charSequence75 = strComparableMap72.putIfAbsent(strComparable73, (java.lang.CharSequence) "");
        boolean boolean77 = strComparableMap72.containsValue((java.lang.Object) (short) 100);
        int int78 = strComparableMap72.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap79 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence81 = strComparableMap72.getOrDefault((java.lang.Object) strComparableMap79, (java.lang.CharSequence) "");
        java.lang.String str82 = strComparableMap72.toString();
        boolean boolean83 = strComparableMap37.remove(obj70, (java.lang.Object) str82);
        boolean boolean84 = strComparableMap27.equals((java.lang.Object) boolean83);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap86 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean87 = strComparableMap86.isEmpty();
        java.lang.Object obj88 = strComparableMap86.clone();
        java.lang.CharSequence charSequence90 = strComparableMap86.remove((java.lang.Object) true);
        boolean boolean94 = strComparableMap86.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        strComparableMap86.clear();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet96 = strComparableMap86.keySet();
        boolean boolean97 = strComparableMap27.containsKey((java.lang.Object) strComparableMap86);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet98 = strComparableMap86.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{null=}");
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "" + "'", charSequence48, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet55);
        org.junit.Assert.assertNotNull(charSequenceCollection56);
        org.junit.Assert.assertNotNull(strComparableSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{null=, =}" + "'", str59, "{null=, =}");
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{null=}");
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertEquals("'" + charSequence81 + "' != '" + "" + "'", charSequence81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "{null=}" + "'", str82, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "{}");
        org.junit.Assert.assertNull(charSequence90);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(strComparableSet96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(strComparableSet98);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 0, 1.0f);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.lang.CharSequence charSequence18 = strComparableMap1.get((java.lang.Object) 'a');
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        boolean boolean26 = strComparableMap21.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        int int34 = strComparableMap28.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap28.values();
        boolean boolean36 = strComparableMap21.containsValue((java.lang.Object) strComparableMap28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        boolean boolean43 = strComparableMap38.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence46 = strComparableMap38.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence49 = strComparableMap38.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = strComparableMap38.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap38.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean56 = strComparableMap21.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence61 = strComparableMap21.getOrDefault((java.lang.Object) strComparableMap59, (java.lang.CharSequence) "{null=}");
        strComparableMap59.clear();
        java.lang.CharSequence charSequence63 = null;
        java.lang.CharSequence charSequence64 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap59, charSequence63);
        java.lang.String str65 = strComparableMap59.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "{null=}" + "'", charSequence61, "{null=}");
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{}" + "'", str65, "{}");
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet10 = strComparableMap2.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap12.get((java.lang.Object) true);
        int int18 = strComparableMap12.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence26 = strComparableMap20.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap28.entrySet();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap28);
        java.lang.Class<?> wildcardClass36 = strComparableMap28.getClass();
        boolean boolean37 = strComparableMap12.containsKey((java.lang.Object) wildcardClass36);
        boolean boolean38 = strComparableMap2.equals((java.lang.Object) strComparableMap12);
        boolean boolean39 = strComparableMap2.isEmpty();
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.constant.Constable> genericDeclarationMap42 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.constant.Constable>((int) (short) 0, (float) (short) 10);
        java.lang.CharSequence charSequence43 = strComparableMap2.remove((java.lang.Object) genericDeclarationMap42);
        strComparableMap2.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(strComparableSet10);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(charSequence43);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 1, 100.0f, true);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        strComparableMap15.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean57 = strComparableMap56.isEmpty();
        strComparableMap54.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap56);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable61 = null;
        java.lang.CharSequence charSequence63 = strComparableMap60.putIfAbsent(strComparable61, (java.lang.CharSequence) "");
        boolean boolean65 = strComparableMap60.containsValue((java.lang.Object) (short) 100);
        int int66 = strComparableMap60.size();
        java.lang.CharSequence charSequence68 = strComparableMap54.getOrDefault((java.lang.Object) strComparableMap60, (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable71 = null;
        java.lang.CharSequence charSequence73 = strComparableMap70.putIfAbsent(strComparable71, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence75 = strComparableMap70.get((java.lang.Object) true);
        java.lang.Object obj76 = strComparableMap70.clone();
        java.lang.CharSequence charSequence79 = strComparableMap70.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj80 = null;
        java.lang.CharSequence charSequence81 = strComparableMap70.get(obj80);
        strComparableMap70.clear();
        boolean boolean83 = strComparableMap60.containsKey((java.lang.Object) strComparableMap70);
        java.lang.CharSequence charSequence84 = strComparableMap15.get((java.lang.Object) boolean83);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap86 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int87 = strComparableMap86.size();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet88 = strComparableMap86.entrySet();
        java.lang.CharSequence charSequence89 = strComparableMap15.remove((java.lang.Object) strComparableMap86);
        java.lang.String str90 = strComparableMap15.toString();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "{null=}");
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertEquals("'" + charSequence81 + "' != '" + "" + "'", charSequence81, "");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(charSequence84);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(strComparableEntrySet88);
        org.junit.Assert.assertNull(charSequence89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "{}" + "'", str90, "{}");
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) ' ', (float) 100);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) 'a', (float) 10L, true);
        strComparableMap3.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet5 = strComparableMap3.entrySet();
        org.junit.Assert.assertNotNull(strComparableEntrySet5);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        strComparableMap1.clear();
        java.lang.Object obj14 = null;
        boolean boolean15 = strComparableMap1.equals(obj14);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean22 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.Object obj24 = strComparableMap18.clone();
        boolean boolean25 = strComparableMap1.containsKey(obj24);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean32 = strComparableMap28.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence35 = strComparableMap28.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int36 = strComparableMap28.size();
        boolean boolean40 = strComparableMap28.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean43 = strComparableMap42.isEmpty();
        java.lang.Object obj44 = strComparableMap42.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean49 = strComparableMap48.isEmpty();
        strComparableMap46.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        strComparableMap42.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        java.lang.CharSequence charSequence52 = strComparableMap28.get((java.lang.Object) strComparableMap48);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean59 = strComparableMap55.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence62 = strComparableMap55.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet63 = strComparableMap55.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable66 = null;
        java.lang.CharSequence charSequence68 = strComparableMap65.putIfAbsent(strComparable66, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence70 = strComparableMap65.get((java.lang.Object) true);
        int int71 = strComparableMap65.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap73 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable74 = null;
        java.lang.CharSequence charSequence76 = strComparableMap73.putIfAbsent(strComparable74, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence79 = strComparableMap73.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap81 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable82 = null;
        java.lang.CharSequence charSequence84 = strComparableMap81.putIfAbsent(strComparable82, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence86 = strComparableMap81.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet87 = strComparableMap81.entrySet();
        strComparableMap73.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap81);
        java.lang.Class<?> wildcardClass89 = strComparableMap81.getClass();
        boolean boolean90 = strComparableMap65.containsKey((java.lang.Object) wildcardClass89);
        boolean boolean91 = strComparableMap55.equals((java.lang.Object) strComparableMap65);
        strComparableMap48.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap55);
        java.lang.Object obj93 = null;
        boolean boolean94 = strComparableMap55.equals(obj93);
        java.lang.CharSequence charSequence95 = strComparableMap1.get(obj93);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{}");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertNotNull(strComparableSet63);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNull(charSequence76);
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertNull(charSequence84);
        org.junit.Assert.assertNull(charSequence86);
        org.junit.Assert.assertNotNull(strComparableEntrySet87);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(charSequence95);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap37.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence58 = strComparableMap53.get((java.lang.Object) true);
        int int59 = strComparableMap53.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet60 = strComparableMap53.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean65 = strComparableMap53.equals((java.lang.Object) 0);
        strComparableMap46.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap53);
        java.lang.CharSequence charSequence68 = strComparableMap37.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "{null=}");
        int int69 = strComparableMap53.size();
        int int70 = strComparableMap53.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(strComparableSet60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "{null=}" + "'", charSequence68, "{null=}");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet13 = strComparableMap1.entrySet();
        int int14 = strComparableMap1.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNotNull(strComparableEntrySet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Object, java.lang.reflect.Type> objMap3 = new java.util.LinkedHashMap<java.lang.Object, java.lang.reflect.Type>(0, 0.0f, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.io.Serializable, java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> serializableMap1 = new java.util.LinkedHashMap<java.io.Serializable, java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> constantDescMap3 = new java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>((int) (byte) -1, (float) 'a', false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 100, (float) (byte) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap4 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable5 = null;
        java.lang.CharSequence charSequence7 = strComparableMap4.putIfAbsent(strComparable5, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence10 = strComparableMap4.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap12.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet18 = strComparableMap12.entrySet();
        strComparableMap4.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap21.values();
        strComparableMap21.clear();
        boolean boolean24 = strComparableMap4.containsKey((java.lang.Object) strComparableMap21);
        java.lang.CharSequence charSequence27 = strComparableMap4.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        java.lang.CharSequence charSequence29 = strComparableMap2.getOrDefault((java.lang.Object) strComparableMap4, (java.lang.CharSequence) "{null=, hi!=hi!}");
        java.lang.CharSequence charSequence32 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{{null=, =}={}}");
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNotNull(strComparableEntrySet18);
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "{null=, hi!=hi!}" + "'", charSequence29, "{null=, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence32);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        int int8 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        java.lang.Object obj22 = strComparableMap16.clone();
        java.lang.CharSequence charSequence25 = strComparableMap16.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj26 = null;
        java.lang.CharSequence charSequence27 = strComparableMap16.get(obj26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap31.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap31.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet36 = strComparableMap31.keySet();
        boolean boolean37 = strComparableMap16.equals((java.lang.Object) strComparableMap31);
        java.lang.String str38 = strComparableMap16.toString();
        boolean boolean39 = strComparableMap10.equals((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        int int48 = strComparableMap41.size();
        java.lang.CharSequence charSequence49 = strComparableMap10.remove((java.lang.Object) strComparableMap41);
        boolean boolean50 = strComparableMap1.containsKey((java.lang.Object) strComparableMap10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        boolean boolean57 = strComparableMap52.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence60 = strComparableMap52.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean63 = strComparableMap62.isEmpty();
        java.lang.Object obj64 = strComparableMap62.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection65 = strComparableMap62.values();
        strComparableMap52.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean69 = strComparableMap68.isEmpty();
        java.lang.Object obj70 = strComparableMap68.clone();
        java.lang.Class<?> wildcardClass71 = obj70.getClass();
        java.lang.CharSequence charSequence73 = strComparableMap62.getOrDefault((java.lang.Object) wildcardClass71, (java.lang.CharSequence) "hi!");
        boolean boolean74 = strComparableMap10.containsValue((java.lang.Object) "hi!");
        java.lang.CharSequence charSequence77 = null;
        boolean boolean78 = strComparableMap10.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}", charSequence77);
        int int79 = strComparableMap10.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{null=}");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNotNull(strComparableSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=, =}" + "'", str38, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{}");
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertEquals("'" + charSequence73 + "' != '" + "hi!" + "'", charSequence73, "hi!");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap7.get((java.lang.Object) true);
        java.lang.Object obj13 = strComparableMap7.clone();
        java.lang.CharSequence charSequence16 = strComparableMap7.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj17 = null;
        java.lang.CharSequence charSequence18 = strComparableMap7.get(obj17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap22.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap22.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap22.keySet();
        boolean boolean28 = strComparableMap7.equals((java.lang.Object) strComparableMap22);
        java.lang.String str29 = strComparableMap7.toString();
        boolean boolean30 = strComparableMap1.equals((java.lang.Object) strComparableMap7);
        boolean boolean34 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence43 = strComparableMap37.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable46 = null;
        java.lang.CharSequence charSequence48 = strComparableMap45.putIfAbsent(strComparable46, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence50 = strComparableMap45.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet51 = strComparableMap45.entrySet();
        strComparableMap37.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap45);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence59 = strComparableMap54.get((java.lang.Object) true);
        int int60 = strComparableMap54.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable63 = null;
        java.lang.CharSequence charSequence65 = strComparableMap62.putIfAbsent(strComparable63, (java.lang.CharSequence) "");
        boolean boolean67 = strComparableMap62.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence70 = strComparableMap62.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap74 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable75 = null;
        java.lang.CharSequence charSequence77 = strComparableMap74.putIfAbsent(strComparable75, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence80 = strComparableMap74.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean81 = strComparableMap62.remove((java.lang.Object) strComparableMap72, (java.lang.Object) "hi!");
        strComparableMap54.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap72);
        boolean boolean83 = strComparableMap72.isEmpty();
        strComparableMap37.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap72);
        boolean boolean85 = strComparableMap35.containsKey((java.lang.Object) strComparableMap72);
        java.lang.Class<?> wildcardClass86 = strComparableMap35.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertNotNull(strComparableSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{null=, =}" + "'", str29, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNotNull(strComparableEntrySet51);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = strComparableMap13.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean20 = strComparableMap1.remove((java.lang.Object) strComparableMap11, (java.lang.Object) "hi!");
        java.lang.CharSequence charSequence23 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean24 = strComparableMap1.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence26 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap18.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence41 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap39, (java.lang.CharSequence) "{null=}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet42 = strComparableMap1.entrySet();
        java.lang.String str43 = strComparableMap1.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=}" + "'", charSequence41, "{null=}");
        org.junit.Assert.assertNotNull(strComparableEntrySet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{null=}" + "'", str43, "{null=}");
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean22 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence25 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int26 = strComparableMap18.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean33 = strComparableMap18.equals((java.lang.Object) charSequence32);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection34 = strComparableMap18.values();
        java.lang.CharSequence charSequence37 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=, {null=, =}={null=}}");
        java.lang.Class<?> wildcardClass38 = strComparableMap18.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection34);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        int int8 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        java.lang.Object obj22 = strComparableMap16.clone();
        java.lang.CharSequence charSequence25 = strComparableMap16.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj26 = null;
        java.lang.CharSequence charSequence27 = strComparableMap16.get(obj26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap31.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap31.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet36 = strComparableMap31.keySet();
        boolean boolean37 = strComparableMap16.equals((java.lang.Object) strComparableMap31);
        java.lang.String str38 = strComparableMap16.toString();
        boolean boolean39 = strComparableMap10.equals((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        int int48 = strComparableMap41.size();
        java.lang.CharSequence charSequence49 = strComparableMap10.remove((java.lang.Object) strComparableMap41);
        boolean boolean50 = strComparableMap1.containsKey((java.lang.Object) strComparableMap10);
        boolean boolean51 = strComparableMap1.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence57 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence57);
        boolean boolean59 = strComparableMap1.containsKey((java.lang.Object) "");
        strComparableMap1.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{null=}");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNotNull(strComparableSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=, =}" + "'", str38, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        java.lang.Object obj52 = strComparableMap47.clone();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{}");
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection2 = strComparableMap1.values();
        java.lang.String str3 = strComparableMap1.toString();
        org.junit.Assert.assertNotNull(charSequenceCollection2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection8 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap10.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap18.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.CharSequence charSequence27 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap18, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int30 = strComparableMap29.size();
        boolean boolean31 = strComparableMap29.isEmpty();
        int int32 = strComparableMap29.size();
        java.lang.CharSequence charSequence35 = strComparableMap29.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.CharSequence charSequence38 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable41 = null;
        java.lang.CharSequence charSequence43 = strComparableMap40.putIfAbsent(strComparable41, (java.lang.CharSequence) "");
        boolean boolean45 = strComparableMap40.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence48 = strComparableMap40.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean50 = strComparableMap40.containsKey((java.lang.Object) 1);
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap40);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap40);
        boolean boolean53 = strComparableMap40.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection8);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "{null=, =}" + "'", charSequence27, "{null=, =}");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        boolean boolean3 = strComparableMap1.isEmpty();
        int int4 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.lang.CharSequence charSequence10 = strComparableMap6.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence12 = strComparableMap6.get((java.lang.Object) 100L);
        java.lang.String str13 = strComparableMap6.toString();
        java.lang.String str14 = strComparableMap6.toString();
        boolean boolean15 = strComparableMap1.containsKey((java.lang.Object) str14);
        java.lang.Class<?> wildcardClass16 = strComparableMap1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        java.util.LinkedHashMap<java.lang.constant.Constable, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> constableMap0 = new java.util.LinkedHashMap<java.lang.constant.Constable, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>();
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet6 = strComparableMap3.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap3.equals((java.lang.Object) charSequence11);
        java.lang.Object obj13 = strComparableMap3.clone();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet6);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap12.get((java.lang.Object) true);
        java.lang.Object obj18 = strComparableMap12.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        boolean boolean25 = strComparableMap20.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence28 = strComparableMap20.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean31 = strComparableMap30.isEmpty();
        java.lang.Object obj32 = strComparableMap30.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection33 = strComparableMap30.values();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap30);
        boolean boolean35 = strComparableMap1.remove((java.lang.Object) strComparableMap12, (java.lang.Object) strComparableMap30);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection36 = strComparableMap30.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap38.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap45);
        boolean boolean47 = strComparableMap38.isEmpty();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet48 = strComparableMap38.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        boolean boolean55 = strComparableMap50.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence58 = strComparableMap50.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean61 = strComparableMap60.isEmpty();
        java.lang.Object obj62 = strComparableMap60.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection63 = strComparableMap60.values();
        strComparableMap50.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap60);
        java.lang.String str65 = strComparableMap50.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean68 = strComparableMap67.isEmpty();
        java.lang.Object obj69 = strComparableMap67.clone();
        java.lang.CharSequence charSequence71 = strComparableMap67.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence73 = strComparableMap67.get((java.lang.Object) 100L);
        boolean boolean74 = strComparableMap50.containsValue((java.lang.Object) strComparableMap67);
        boolean boolean75 = strComparableMap50.isEmpty();
        strComparableMap38.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap50);
        java.lang.CharSequence charSequence77 = strComparableMap30.get((java.lang.Object) strComparableMap38);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{null=}");
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection36);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strComparableSet48);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{null=, =}" + "'", str65, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "{}");
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(charSequence77);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = strComparableMap10.get((java.lang.Object) true);
        int int16 = strComparableMap10.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap18.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap26.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence31 = strComparableMap26.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet32 = strComparableMap26.entrySet();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.lang.Class<?> wildcardClass34 = strComparableMap26.getClass();
        boolean boolean35 = strComparableMap10.containsKey((java.lang.Object) wildcardClass34);
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) strComparableMap10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean39 = strComparableMap38.isEmpty();
        java.lang.Object obj40 = strComparableMap38.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean45 = strComparableMap44.isEmpty();
        strComparableMap42.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap44);
        strComparableMap38.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap44);
        strComparableMap38.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean51 = strComparableMap50.isEmpty();
        java.lang.Object obj52 = strComparableMap50.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection53 = strComparableMap50.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        boolean boolean60 = strComparableMap55.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable63 = null;
        java.lang.CharSequence charSequence65 = strComparableMap62.putIfAbsent(strComparable63, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence67 = strComparableMap62.get((java.lang.Object) true);
        int int68 = strComparableMap62.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection69 = strComparableMap62.values();
        boolean boolean70 = strComparableMap55.containsValue((java.lang.Object) strComparableMap62);
        boolean boolean71 = strComparableMap50.equals((java.lang.Object) strComparableMap62);
        java.lang.CharSequence charSequence72 = strComparableMap38.get((java.lang.Object) strComparableMap50);
        java.lang.CharSequence charSequence73 = strComparableMap1.get((java.lang.Object) strComparableMap38);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNotNull(strComparableEntrySet32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{}");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection53);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNull(charSequence73);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean22 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence25 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int26 = strComparableMap18.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean33 = strComparableMap18.equals((java.lang.Object) charSequence32);
        java.lang.CharSequence charSequence36 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap12.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet26 = strComparableMap20.entrySet();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.lang.CharSequence charSequence29 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap20, (java.lang.CharSequence) "{null=, =}");
        java.lang.Class<?> wildcardClass30 = charSequence29.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNotNull(strComparableEntrySet26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "{null=, =}" + "'", charSequence29, "{null=, =}");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean15 = strComparableMap14.isEmpty();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap14);
        strComparableMap8.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap14);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        boolean boolean24 = strComparableMap19.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence27 = strComparableMap19.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean30 = strComparableMap29.isEmpty();
        java.lang.Object obj31 = strComparableMap29.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection32 = strComparableMap29.values();
        strComparableMap19.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.lang.String str34 = strComparableMap19.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean37 = strComparableMap36.isEmpty();
        java.lang.Object obj38 = strComparableMap36.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection39 = strComparableMap36.values();
        java.lang.CharSequence charSequence40 = strComparableMap19.get((java.lang.Object) strComparableMap36);
        boolean boolean41 = strComparableMap14.equals((java.lang.Object) strComparableMap19);
        boolean boolean45 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence46 = strComparableMap2.remove((java.lang.Object) "{{}={null=, =, hi!=hi!}}");
        boolean boolean47 = strComparableMap2.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{null=, =}" + "'", str34, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection39);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence45 = strComparableMap39.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean46 = strComparableMap27.remove((java.lang.Object) strComparableMap37, (java.lang.Object) "hi!");
        boolean boolean47 = strComparableMap1.containsKey((java.lang.Object) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap50.get((java.lang.Object) true);
        int int56 = strComparableMap50.size();
        java.lang.CharSequence charSequence58 = strComparableMap50.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence61 = strComparableMap50.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str62 = strComparableMap50.toString();
        java.lang.CharSequence charSequence63 = strComparableMap48.remove((java.lang.Object) strComparableMap50);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet64 = strComparableMap48.keySet();
        java.lang.Comparable<java.lang.String> strComparable65 = null;
        java.lang.CharSequence charSequence66 = null;
        java.lang.CharSequence charSequence67 = strComparableMap48.replace(strComparable65, charSequence66);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{null=, =}" + "'", str62, "{null=, =}");
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNotNull(strComparableSet64);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "" + "'", charSequence67, "");
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean22 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence25 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int26 = strComparableMap18.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        boolean boolean28 = strComparableMap1.isEmpty();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet29 = strComparableMap1.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableSet29);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap21.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean28 = strComparableMap9.remove((java.lang.Object) strComparableMap19, (java.lang.Object) "hi!");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        strComparableMap1.clear();
        java.lang.CharSequence charSequence33 = null;
        boolean boolean34 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "hi!", charSequence33);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection40 = strComparableMap37.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable43 = null;
        java.lang.CharSequence charSequence45 = strComparableMap42.putIfAbsent(strComparable43, (java.lang.CharSequence) "");
        boolean boolean47 = strComparableMap42.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable50 = null;
        java.lang.CharSequence charSequence52 = strComparableMap49.putIfAbsent(strComparable50, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence54 = strComparableMap49.get((java.lang.Object) true);
        int int55 = strComparableMap49.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection56 = strComparableMap49.values();
        boolean boolean57 = strComparableMap42.containsValue((java.lang.Object) strComparableMap49);
        boolean boolean58 = strComparableMap37.equals((java.lang.Object) strComparableMap49);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable61 = null;
        java.lang.CharSequence charSequence63 = strComparableMap60.putIfAbsent(strComparable61, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence65 = strComparableMap60.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable68 = null;
        java.lang.CharSequence charSequence70 = strComparableMap67.putIfAbsent(strComparable68, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence72 = strComparableMap67.get((java.lang.Object) true);
        int int73 = strComparableMap67.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet74 = strComparableMap67.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap78 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean79 = strComparableMap67.equals((java.lang.Object) 0);
        strComparableMap60.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap67);
        boolean boolean81 = strComparableMap37.containsValue((java.lang.Object) strComparableMap60);
        java.lang.CharSequence charSequence82 = strComparableMap35.get((java.lang.Object) strComparableMap37);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection83 = strComparableMap35.values();
        java.lang.CharSequence charSequence84 = strComparableMap1.get((java.lang.Object) strComparableMap35);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection40);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(strComparableSet74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(charSequence82);
        org.junit.Assert.assertNotNull(charSequenceCollection83);
        org.junit.Assert.assertNull(charSequence84);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        int int4 = strComparableMap3.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean15 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        boolean boolean27 = strComparableMap22.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence30 = strComparableMap22.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean33 = strComparableMap32.isEmpty();
        java.lang.Object obj34 = strComparableMap32.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap32.values();
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.lang.String str37 = strComparableMap22.toString();
        boolean boolean38 = strComparableMap11.remove((java.lang.Object) strComparableMap20, (java.lang.Object) str37);
        boolean boolean39 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence50 = strComparableMap41.getOrDefault((java.lang.Object) strComparableMap48, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean53 = strComparableMap52.isEmpty();
        java.lang.Object obj54 = strComparableMap52.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection55 = strComparableMap52.values();
        boolean boolean56 = strComparableMap20.remove((java.lang.Object) strComparableMap48, (java.lang.Object) strComparableMap52);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet57 = strComparableMap52.entrySet();
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        java.lang.CharSequence charSequence61 = strComparableMap3.put((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence64 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{null=, =}" + "'", str37, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "" + "'", charSequence50, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet57);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "{null=, =}" + "'", charSequence64, "{null=, =}");
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean14 = strComparableMap13.isEmpty();
        java.lang.Object obj15 = strComparableMap13.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection16 = strComparableMap13.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        java.lang.CharSequence charSequence28 = strComparableMap25.putIfAbsent(strComparable26, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap25.get((java.lang.Object) true);
        int int31 = strComparableMap25.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection32 = strComparableMap25.values();
        boolean boolean33 = strComparableMap18.containsValue((java.lang.Object) strComparableMap25);
        boolean boolean34 = strComparableMap13.equals((java.lang.Object) strComparableMap25);
        java.lang.CharSequence charSequence35 = strComparableMap1.get((java.lang.Object) strComparableMap13);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet36 = strComparableMap13.keySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNotNull(strComparableSet36);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.lang.CharSequence charSequence11 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        int int19 = strComparableMap13.size();
        int int20 = strComparableMap13.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap22.get((java.lang.Object) true);
        java.lang.Object obj28 = strComparableMap22.clone();
        java.lang.String str29 = strComparableMap22.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        int int37 = strComparableMap31.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence45 = strComparableMap39.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence52 = strComparableMap47.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet53 = strComparableMap47.entrySet();
        strComparableMap39.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap47);
        java.lang.Class<?> wildcardClass55 = strComparableMap47.getClass();
        boolean boolean56 = strComparableMap31.containsKey((java.lang.Object) wildcardClass55);
        boolean boolean57 = strComparableMap22.containsValue((java.lang.Object) strComparableMap31);
        java.lang.Object obj58 = strComparableMap31.clone();
        boolean boolean59 = strComparableMap13.containsKey(obj58);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean64 = strComparableMap63.isEmpty();
        strComparableMap61.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap63);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable68 = null;
        java.lang.CharSequence charSequence70 = strComparableMap67.putIfAbsent(strComparable68, (java.lang.CharSequence) "");
        boolean boolean72 = strComparableMap67.containsValue((java.lang.Object) (short) 100);
        int int73 = strComparableMap67.size();
        java.lang.CharSequence charSequence75 = strComparableMap61.getOrDefault((java.lang.Object) strComparableMap67, (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet76 = strComparableMap61.entrySet();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet77 = strComparableMap61.keySet();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet78 = strComparableMap61.keySet();
        java.lang.CharSequence charSequence80 = strComparableMap13.getOrDefault((java.lang.Object) strComparableSet78, (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.CharSequence charSequence82 = strComparableMap1.getOrDefault((java.lang.Object) charSequence80, (java.lang.CharSequence) "{null=, =}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{null=}");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{null=}" + "'", str29, "{null=}");
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNotNull(strComparableEntrySet53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{null=}");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "hi!" + "'", charSequence75, "hi!");
        org.junit.Assert.assertNotNull(strComparableEntrySet76);
        org.junit.Assert.assertNotNull(strComparableSet77);
        org.junit.Assert.assertNotNull(strComparableSet78);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "{null=, =, hi!=hi!}" + "'", charSequence80, "{null=, =, hi!=hi!}");
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "{null=, =}" + "'", charSequence82, "{null=, =}");
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap2);
        java.lang.CharSequence charSequence10 = strComparableMap7.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet11 = strComparableMap7.keySet();
        java.lang.CharSequence charSequence14 = strComparableMap7.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNotNull(strComparableSet11);
        org.junit.Assert.assertNull(charSequence14);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.CharSequence, java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> charSequenceMap2 = new java.util.LinkedHashMap<java.lang.CharSequence, java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>((int) (byte) -1, (float) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.Class<?> wildcardClass16 = charSequence15.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "" + "'", charSequence15, "");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.lang.CharSequence charSequence10 = strComparableMap6.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence12 = strComparableMap6.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence14 = strComparableMap1.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet18 = strComparableMap1.entrySet();
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap1.putIfAbsent(strComparable19, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNotNull(strComparableEntrySet18);
        org.junit.Assert.assertNull(charSequence21);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap2);
        java.lang.String str8 = strComparableMap7.toString();
        strComparableMap7.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean18 = strComparableMap17.isEmpty();
        java.lang.Object obj19 = strComparableMap17.clone();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.CharSequence charSequence22 = strComparableMap11.getOrDefault((java.lang.Object) wildcardClass20, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence25 = strComparableMap11.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet26 = strComparableMap11.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNotNull(strComparableSet26);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        int int8 = strComparableMap6.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet9 = strComparableMap6.keySet();
        java.lang.Object obj10 = strComparableMap6.clone();
        int int11 = strComparableMap6.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strComparableSet9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.lang.Object obj43 = strComparableMap37.clone();
        java.lang.String str44 = strComparableMap37.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        int int52 = strComparableMap46.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = strComparableMap54.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable63 = null;
        java.lang.CharSequence charSequence65 = strComparableMap62.putIfAbsent(strComparable63, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence67 = strComparableMap62.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet68 = strComparableMap62.entrySet();
        strComparableMap54.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        java.lang.Class<?> wildcardClass70 = strComparableMap62.getClass();
        boolean boolean71 = strComparableMap46.containsKey((java.lang.Object) wildcardClass70);
        boolean boolean72 = strComparableMap37.containsValue((java.lang.Object) strComparableMap46);
        java.lang.CharSequence charSequence73 = strComparableMap27.get((java.lang.Object) strComparableMap46);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet74 = strComparableMap46.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{null=}");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{null=}" + "'", str44, "{null=}");
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNotNull(strComparableEntrySet68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertNotNull(strComparableEntrySet74);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        java.util.LinkedHashMap<java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.constant.Constable> strComparableMapMap1 = new java.util.LinkedHashMap<java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.constant.Constable>((int) (byte) 10);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        boolean boolean18 = strComparableMap10.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean19 = strComparableMap1.equals((java.lang.Object) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        boolean boolean26 = strComparableMap21.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean29 = strComparableMap28.isEmpty();
        java.lang.Object obj30 = strComparableMap28.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection31 = strComparableMap28.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable34 = null;
        java.lang.CharSequence charSequence36 = strComparableMap33.putIfAbsent(strComparable34, (java.lang.CharSequence) "");
        boolean boolean38 = strComparableMap33.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable41 = null;
        java.lang.CharSequence charSequence43 = strComparableMap40.putIfAbsent(strComparable41, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence45 = strComparableMap40.get((java.lang.Object) true);
        int int46 = strComparableMap40.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection47 = strComparableMap40.values();
        boolean boolean48 = strComparableMap33.containsValue((java.lang.Object) strComparableMap40);
        boolean boolean49 = strComparableMap28.equals((java.lang.Object) strComparableMap40);
        strComparableMap21.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap28);
        boolean boolean51 = strComparableMap28.isEmpty();
        java.lang.CharSequence charSequence54 = strComparableMap28.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable57 = null;
        java.lang.CharSequence charSequence59 = strComparableMap56.putIfAbsent(strComparable57, (java.lang.CharSequence) "");
        boolean boolean61 = strComparableMap56.containsValue((java.lang.Object) (short) 100);
        int int62 = strComparableMap56.size();
        boolean boolean63 = strComparableMap56.isEmpty();
        java.lang.CharSequence charSequence65 = strComparableMap28.getOrDefault((java.lang.Object) strComparableMap56, (java.lang.CharSequence) "");
        boolean boolean66 = strComparableMap1.equals((java.lang.Object) strComparableMap56);
        java.util.LinkedHashMap<java.util.Collection<java.lang.CharSequence>, java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> charSequenceCollectionMap67 = new java.util.LinkedHashMap<java.util.Collection<java.lang.CharSequence>, java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>();
        java.lang.CharSequence charSequence68 = strComparableMap1.get((java.lang.Object) charSequenceCollectionMap67);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection31);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "" + "'", charSequence65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(charSequence68);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection8 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap10.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap18.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.CharSequence charSequence27 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap18, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable30 = null;
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent(strComparable30, (java.lang.CharSequence) "");
        boolean boolean34 = strComparableMap29.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean37 = strComparableMap36.isEmpty();
        java.lang.Object obj38 = strComparableMap36.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection39 = strComparableMap36.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap48.get((java.lang.Object) true);
        int int54 = strComparableMap48.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection55 = strComparableMap48.values();
        boolean boolean56 = strComparableMap41.containsValue((java.lang.Object) strComparableMap48);
        boolean boolean57 = strComparableMap36.equals((java.lang.Object) strComparableMap48);
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet59 = strComparableMap29.entrySet();
        java.lang.CharSequence charSequence62 = strComparableMap29.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean63 = strComparableMap18.equals((java.lang.Object) strComparableMap29);
        int int64 = strComparableMap18.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) ' ');
        boolean boolean70 = strComparableMap66.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{{null=, =}={}}", (java.lang.CharSequence) "hi!");
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap66);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection8);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "{null=, =}" + "'", charSequence27, "{null=, =}");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection39);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet59);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence14 = strComparableMap6.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap18.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean25 = strComparableMap6.remove((java.lang.Object) strComparableMap16, (java.lang.Object) "hi!");
        boolean boolean26 = strComparableMap1.containsValue((java.lang.Object) boolean25);
        java.lang.CharSequence charSequence28 = null;
        java.lang.CharSequence charSequence29 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", charSequence28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        boolean boolean36 = strComparableMap31.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence39 = strComparableMap31.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean42 = strComparableMap41.isEmpty();
        java.lang.Object obj43 = strComparableMap41.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection44 = strComparableMap41.values();
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap41);
        java.lang.String str46 = strComparableMap31.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean49 = strComparableMap48.isEmpty();
        java.lang.Object obj50 = strComparableMap48.clone();
        java.lang.CharSequence charSequence52 = strComparableMap48.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence54 = strComparableMap48.get((java.lang.Object) 100L);
        boolean boolean55 = strComparableMap31.containsValue((java.lang.Object) strComparableMap48);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable58 = null;
        java.lang.CharSequence charSequence60 = strComparableMap57.putIfAbsent(strComparable58, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence62 = strComparableMap57.get((java.lang.Object) true);
        int int63 = strComparableMap57.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet64 = strComparableMap57.keySet();
        boolean boolean65 = strComparableMap31.equals((java.lang.Object) strComparableMap57);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable68 = null;
        java.lang.CharSequence charSequence70 = strComparableMap67.putIfAbsent(strComparable68, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence72 = strComparableMap67.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet73 = strComparableMap67.entrySet();
        java.lang.String str74 = strComparableMap67.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap76 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean77 = strComparableMap76.isEmpty();
        java.lang.Object obj78 = strComparableMap76.clone();
        java.lang.CharSequence charSequence80 = strComparableMap76.remove((java.lang.Object) true);
        boolean boolean84 = strComparableMap76.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean85 = strComparableMap67.equals((java.lang.Object) "");
        java.lang.CharSequence charSequence86 = strComparableMap31.remove((java.lang.Object) strComparableMap67);
        java.lang.CharSequence charSequence89 = strComparableMap31.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection90 = strComparableMap31.values();
        java.lang.CharSequence charSequence91 = strComparableMap1.remove((java.lang.Object) strComparableMap31);
        boolean boolean95 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{null=, =}" + "'", str46, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(strComparableSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNotNull(strComparableEntrySet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{null=}" + "'", str74, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "{}");
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(charSequence86);
        org.junit.Assert.assertEquals("'" + charSequence89 + "' != '" + "" + "'", charSequence89, "");
        org.junit.Assert.assertNotNull(charSequenceCollection90);
        org.junit.Assert.assertNull(charSequence91);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.io.Serializable, java.lang.CharSequence> serializableMap2 = new java.util.LinkedHashMap<java.io.Serializable, java.lang.CharSequence>((int) (short) 0, 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        int int8 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = strComparableMap10.get((java.lang.Object) true);
        java.lang.Object obj16 = strComparableMap10.clone();
        java.lang.String str17 = strComparableMap10.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap19.get((java.lang.Object) true);
        int int25 = strComparableMap19.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap27.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable36 = null;
        java.lang.CharSequence charSequence38 = strComparableMap35.putIfAbsent(strComparable36, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = strComparableMap35.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet41 = strComparableMap35.entrySet();
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap35);
        java.lang.Class<?> wildcardClass43 = strComparableMap35.getClass();
        boolean boolean44 = strComparableMap19.containsKey((java.lang.Object) wildcardClass43);
        boolean boolean45 = strComparableMap10.containsValue((java.lang.Object) strComparableMap19);
        java.lang.Object obj46 = strComparableMap19.clone();
        boolean boolean47 = strComparableMap1.containsKey(obj46);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean52 = strComparableMap51.isEmpty();
        strComparableMap49.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        boolean boolean60 = strComparableMap55.containsValue((java.lang.Object) (short) 100);
        int int61 = strComparableMap55.size();
        java.lang.CharSequence charSequence63 = strComparableMap49.getOrDefault((java.lang.Object) strComparableMap55, (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet64 = strComparableMap49.entrySet();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet65 = strComparableMap49.keySet();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet66 = strComparableMap49.keySet();
        java.lang.CharSequence charSequence68 = strComparableMap1.getOrDefault((java.lang.Object) strComparableSet66, (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap69 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{null=}");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{null=}" + "'", str17, "{null=}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNotNull(strComparableEntrySet41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{null=}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertNotNull(strComparableEntrySet64);
        org.junit.Assert.assertNotNull(strComparableSet65);
        org.junit.Assert.assertNotNull(strComparableSet66);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "{null=, =, hi!=hi!}" + "'", charSequence68, "{null=, =, hi!=hi!}");
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection2 = strComparableMap1.values();
        java.lang.CharSequence charSequence5 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, {null=, =}={null=}}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertNotNull(charSequenceCollection2);
        org.junit.Assert.assertNull(charSequence5);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet19 = strComparableMap16.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap16.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet21 = strComparableMap16.keySet();
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap16);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet23 = strComparableMap16.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet19);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertNotNull(strComparableSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet23);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap1.putIfAbsent(strComparable11, (java.lang.CharSequence) "{null=, hi!=hi!}");
        strComparableMap1.clear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet8 = strComparableMap1.entrySet();
        java.lang.String str9 = strComparableMap1.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strComparableEntrySet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{null=}" + "'", str9, "{null=}");
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        int int4 = strComparableMap3.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean15 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        boolean boolean27 = strComparableMap22.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence30 = strComparableMap22.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean33 = strComparableMap32.isEmpty();
        java.lang.Object obj34 = strComparableMap32.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap32.values();
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.lang.String str37 = strComparableMap22.toString();
        boolean boolean38 = strComparableMap11.remove((java.lang.Object) strComparableMap20, (java.lang.Object) str37);
        boolean boolean39 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence50 = strComparableMap41.getOrDefault((java.lang.Object) strComparableMap48, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean53 = strComparableMap52.isEmpty();
        java.lang.Object obj54 = strComparableMap52.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection55 = strComparableMap52.values();
        boolean boolean56 = strComparableMap20.remove((java.lang.Object) strComparableMap48, (java.lang.Object) strComparableMap52);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet57 = strComparableMap52.entrySet();
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        java.lang.CharSequence charSequence61 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "{{null=}={null=, =}}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{null=, =}" + "'", str37, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "" + "'", charSequence50, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet57);
        org.junit.Assert.assertNull(charSequence61);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        java.lang.Object obj14 = strComparableMap12.clone();
        java.lang.CharSequence charSequence16 = strComparableMap12.remove((java.lang.Object) true);
        boolean boolean20 = strComparableMap12.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        strComparableMap12.clear();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet22 = strComparableMap12.keySet();
        boolean boolean23 = strComparableMap1.containsKey((java.lang.Object) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int26 = strComparableMap25.size();
        boolean boolean27 = strComparableMap25.isEmpty();
        java.lang.CharSequence charSequence30 = strComparableMap25.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=, =}");
        java.lang.String str31 = strComparableMap25.toString();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap25);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strComparableSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{{null=}={null=, =}}" + "'", str31, "{{null=}={null=, =}}");
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection52 = strComparableMap15.values();
        java.lang.Object obj53 = strComparableMap15.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) ' ', (float) 100L, false);
        boolean boolean61 = strComparableMap57.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, =}");
        strComparableMap57.clear();
        boolean boolean63 = strComparableMap15.equals((java.lang.Object) strComparableMap57);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        int int8 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = strComparableMap10.get((java.lang.Object) true);
        java.lang.Object obj16 = strComparableMap10.clone();
        java.lang.String str17 = strComparableMap10.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap19.get((java.lang.Object) true);
        int int25 = strComparableMap19.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap27.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable36 = null;
        java.lang.CharSequence charSequence38 = strComparableMap35.putIfAbsent(strComparable36, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = strComparableMap35.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet41 = strComparableMap35.entrySet();
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap35);
        java.lang.Class<?> wildcardClass43 = strComparableMap35.getClass();
        boolean boolean44 = strComparableMap19.containsKey((java.lang.Object) wildcardClass43);
        boolean boolean45 = strComparableMap10.containsValue((java.lang.Object) strComparableMap19);
        java.lang.Object obj46 = strComparableMap19.clone();
        boolean boolean47 = strComparableMap1.containsKey(obj46);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable50 = null;
        java.lang.CharSequence charSequence52 = strComparableMap49.putIfAbsent(strComparable50, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap49.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean57 = strComparableMap49.containsValue((java.lang.Object) 10);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection58 = strComparableMap49.values();
        java.lang.CharSequence charSequence59 = strComparableMap1.remove((java.lang.Object) strComparableMap49);
        int int60 = strComparableMap49.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{null=}");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{null=}" + "'", str17, "{null=}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNotNull(strComparableEntrySet41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{null=}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection58);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence45 = strComparableMap39.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean46 = strComparableMap27.remove((java.lang.Object) strComparableMap37, (java.lang.Object) "hi!");
        boolean boolean47 = strComparableMap1.containsKey((java.lang.Object) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap50.get((java.lang.Object) true);
        int int56 = strComparableMap50.size();
        java.lang.CharSequence charSequence58 = strComparableMap50.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence61 = strComparableMap50.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str62 = strComparableMap50.toString();
        java.lang.CharSequence charSequence63 = strComparableMap48.remove((java.lang.Object) strComparableMap50);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable66 = null;
        java.lang.CharSequence charSequence68 = strComparableMap65.putIfAbsent(strComparable66, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence70 = strComparableMap65.get((java.lang.Object) true);
        int int71 = strComparableMap65.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet72 = strComparableMap65.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap76 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean77 = strComparableMap65.equals((java.lang.Object) 0);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet78 = strComparableMap65.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap80 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean81 = strComparableMap80.isEmpty();
        java.lang.Object obj82 = strComparableMap80.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap84 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap86 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean87 = strComparableMap86.isEmpty();
        strComparableMap84.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap86);
        strComparableMap80.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap86);
        int int90 = strComparableMap80.size();
        boolean boolean91 = strComparableMap48.remove((java.lang.Object) strComparableMap65, (java.lang.Object) strComparableMap80);
        java.lang.CharSequence charSequence94 = strComparableMap65.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{}");
        java.lang.String str95 = strComparableMap65.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{null=, =}" + "'", str62, "{null=, =}");
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(strComparableSet72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strComparableSet78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "{}");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(charSequence94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "{null=, {null=}={}}" + "'", str95, "{null=, {null=}={}}");
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        boolean boolean21 = strComparableMap16.containsValue((java.lang.Object) (short) 100);
        int int22 = strComparableMap16.size();
        java.lang.CharSequence charSequence24 = strComparableMap10.getOrDefault((java.lang.Object) strComparableMap16, (java.lang.CharSequence) "hi!");
        boolean boolean25 = strComparableMap1.equals((java.lang.Object) charSequence24);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        java.lang.Object obj33 = strComparableMap27.clone();
        java.lang.String str34 = strComparableMap27.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean39 = strComparableMap38.isEmpty();
        strComparableMap36.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable43 = null;
        java.lang.CharSequence charSequence45 = strComparableMap42.putIfAbsent(strComparable43, (java.lang.CharSequence) "");
        boolean boolean47 = strComparableMap42.containsValue((java.lang.Object) (short) 100);
        int int48 = strComparableMap42.size();
        java.lang.CharSequence charSequence50 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap42, (java.lang.CharSequence) "hi!");
        boolean boolean51 = strComparableMap27.equals((java.lang.Object) charSequence50);
        java.lang.CharSequence charSequence52 = strComparableMap1.remove((java.lang.Object) boolean51);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{null=}");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{null=}" + "'", str34, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "hi!" + "'", charSequence50, "hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence52);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.Object obj5 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence15 = strComparableMap7.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean18 = strComparableMap17.isEmpty();
        java.lang.Object obj19 = strComparableMap17.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap17.values();
        strComparableMap7.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap17);
        java.lang.String str22 = strComparableMap7.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean25 = strComparableMap24.isEmpty();
        java.lang.Object obj26 = strComparableMap24.clone();
        java.lang.CharSequence charSequence28 = strComparableMap24.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence30 = strComparableMap24.get((java.lang.Object) 100L);
        boolean boolean31 = strComparableMap7.containsValue((java.lang.Object) strComparableMap24);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet32 = strComparableMap24.keySet();
        java.lang.CharSequence charSequence33 = strComparableMap1.get((java.lang.Object) strComparableSet32);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean36 = strComparableMap35.isEmpty();
        java.lang.CharSequence charSequence38 = strComparableMap35.get((java.lang.Object) (byte) 1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable41 = null;
        java.lang.CharSequence charSequence43 = strComparableMap40.putIfAbsent(strComparable41, (java.lang.CharSequence) "");
        java.lang.Object obj44 = strComparableMap40.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        boolean boolean51 = strComparableMap46.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence54 = strComparableMap46.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean57 = strComparableMap56.isEmpty();
        java.lang.Object obj58 = strComparableMap56.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection59 = strComparableMap56.values();
        strComparableMap46.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap56);
        java.lang.String str61 = strComparableMap46.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean64 = strComparableMap63.isEmpty();
        java.lang.Object obj65 = strComparableMap63.clone();
        java.lang.CharSequence charSequence67 = strComparableMap63.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence69 = strComparableMap63.get((java.lang.Object) 100L);
        boolean boolean70 = strComparableMap46.containsValue((java.lang.Object) strComparableMap63);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet71 = strComparableMap63.keySet();
        java.lang.CharSequence charSequence72 = strComparableMap40.get((java.lang.Object) strComparableSet71);
        java.lang.Class<?> wildcardClass73 = strComparableMap40.getClass();
        java.lang.CharSequence charSequence75 = strComparableMap35.getOrDefault((java.lang.Object) wildcardClass73, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence76 = strComparableMap1.remove((java.lang.Object) "hi!");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{null=, =}" + "'", str22, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{}");
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strComparableSet32);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{null=}");
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{null=, =}" + "'", str61, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "{}");
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strComparableSet71);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "hi!" + "'", charSequence75, "hi!");
        org.junit.Assert.assertNull(charSequence76);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence34 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj35 = null;
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.lang.CharSequence charSequence41 = strComparableMap37.remove((java.lang.Object) true);
        boolean boolean45 = strComparableMap37.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap1.remove(obj35, (java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap48.get((java.lang.Object) true);
        java.lang.Object obj54 = strComparableMap48.clone();
        java.lang.CharSequence charSequence57 = strComparableMap48.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj58 = null;
        java.lang.CharSequence charSequence59 = strComparableMap48.get(obj58);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean64 = strComparableMap63.isEmpty();
        strComparableMap61.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap63);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet66 = strComparableMap63.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection67 = strComparableMap63.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet68 = strComparableMap63.keySet();
        boolean boolean69 = strComparableMap48.equals((java.lang.Object) strComparableMap63);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap74 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean75 = strComparableMap74.isEmpty();
        strComparableMap72.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap74);
        boolean boolean77 = strComparableMap48.containsValue((java.lang.Object) strComparableMap72);
        java.lang.Class<?> wildcardClass78 = strComparableMap72.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{null=}");
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "" + "'", charSequence59, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet66);
        org.junit.Assert.assertNotNull(charSequenceCollection67);
        org.junit.Assert.assertNotNull(strComparableSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.lang.CharSequence charSequence18 = strComparableMap1.get((java.lang.Object) 'a');
        int int19 = strComparableMap1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence26 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap18.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence41 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap39, (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence44 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap46.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap53);
        strComparableMap53.clear();
        java.lang.CharSequence charSequence56 = strComparableMap1.get((java.lang.Object) strComparableMap53);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet57 = strComparableMap53.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=}" + "'", charSequence41, "{null=}");
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertNotNull(strComparableSet57);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, 100.0f, false);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable6 = null;
        java.lang.CharSequence charSequence8 = strComparableMap5.putIfAbsent(strComparable6, (java.lang.CharSequence) "");
        boolean boolean10 = strComparableMap5.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence13 = strComparableMap5.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean16 = strComparableMap15.isEmpty();
        java.lang.Object obj17 = strComparableMap15.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection18 = strComparableMap15.values();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap15);
        java.lang.String str20 = strComparableMap5.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        java.lang.Object obj24 = strComparableMap22.clone();
        java.lang.CharSequence charSequence26 = strComparableMap22.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence28 = strComparableMap22.get((java.lang.Object) 100L);
        boolean boolean29 = strComparableMap5.containsValue((java.lang.Object) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        boolean boolean36 = strComparableMap31.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence39 = strComparableMap31.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable44 = null;
        java.lang.CharSequence charSequence46 = strComparableMap43.putIfAbsent(strComparable44, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence49 = strComparableMap43.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean50 = strComparableMap31.remove((java.lang.Object) strComparableMap41, (java.lang.Object) "hi!");
        boolean boolean51 = strComparableMap5.containsKey((java.lang.Object) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap5);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence59 = strComparableMap54.get((java.lang.Object) true);
        int int60 = strComparableMap54.size();
        java.lang.CharSequence charSequence62 = strComparableMap54.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence65 = strComparableMap54.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str66 = strComparableMap54.toString();
        java.lang.CharSequence charSequence67 = strComparableMap52.remove((java.lang.Object) strComparableMap54);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection68 = strComparableMap52.values();
        boolean boolean69 = strComparableMap3.containsValue((java.lang.Object) charSequenceCollection68);
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{null=, =}" + "'", str20, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "{null=, =}" + "'", str66, "{null=, =}");
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNotNull(charSequenceCollection68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean20 = strComparableMap19.isEmpty();
        java.lang.Object obj21 = strComparableMap19.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap19.values();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean30 = strComparableMap26.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = strComparableMap26.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int34 = strComparableMap26.size();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.lang.CharSequence charSequence36 = strComparableMap1.get((java.lang.Object) strComparableMap26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass37 = charSequence36.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(charSequence36);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        boolean boolean8 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{{null=}={null=, =}}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence10 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap8, (java.lang.CharSequence) "");
        java.lang.String str11 = strComparableMap1.toString();
        java.lang.Object obj12 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        java.lang.CharSequence charSequence17 = strComparableMap14.putIfAbsent(strComparable15, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = strComparableMap14.get((java.lang.Object) true);
        int int20 = strComparableMap14.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean31 = strComparableMap27.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = strComparableMap27.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        boolean boolean43 = strComparableMap38.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence46 = strComparableMap38.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean49 = strComparableMap48.isEmpty();
        java.lang.Object obj50 = strComparableMap48.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection51 = strComparableMap48.values();
        strComparableMap38.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        java.lang.String str53 = strComparableMap38.toString();
        boolean boolean54 = strComparableMap27.remove((java.lang.Object) strComparableMap36, (java.lang.Object) str53);
        boolean boolean55 = strComparableMap24.equals((java.lang.Object) strComparableMap36);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable58 = null;
        java.lang.CharSequence charSequence60 = strComparableMap57.putIfAbsent(strComparable58, (java.lang.CharSequence) "");
        boolean boolean62 = strComparableMap57.containsValue((java.lang.Object) (short) 100);
        int int63 = strComparableMap57.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence66 = strComparableMap57.getOrDefault((java.lang.Object) strComparableMap64, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean69 = strComparableMap68.isEmpty();
        java.lang.Object obj70 = strComparableMap68.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection71 = strComparableMap68.values();
        boolean boolean72 = strComparableMap36.remove((java.lang.Object) strComparableMap64, (java.lang.Object) strComparableMap68);
        java.lang.CharSequence charSequence74 = strComparableMap14.getOrDefault((java.lang.Object) strComparableMap68, (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap76 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap78 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean79 = strComparableMap78.isEmpty();
        strComparableMap76.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap78);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet81 = strComparableMap78.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap83 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable84 = null;
        java.lang.CharSequence charSequence86 = strComparableMap83.putIfAbsent(strComparable84, (java.lang.CharSequence) "");
        boolean boolean87 = strComparableMap78.equals((java.lang.Object) charSequence86);
        boolean boolean88 = strComparableMap1.remove((java.lang.Object) "hi!", (java.lang.Object) strComparableMap78);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{null=}" + "'", str11, "{null=}");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{null=}");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{null=, =}" + "'", str53, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "" + "'", charSequence66, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + charSequence74 + "' != '" + "hi!" + "'", charSequence74, "hi!");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet81);
        org.junit.Assert.assertNull(charSequence86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet8 = strComparableMap1.entrySet();
        strComparableMap1.clear();
        java.lang.Object obj10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault(obj10, (java.lang.CharSequence) "{}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strComparableEntrySet8);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "{}" + "'", charSequence12, "{}");
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap3.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence14 = strComparableMap6.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection19 = strComparableMap16.values();
        strComparableMap6.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        java.lang.String str21 = strComparableMap6.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean24 = strComparableMap23.isEmpty();
        java.lang.Object obj25 = strComparableMap23.clone();
        java.lang.CharSequence charSequence27 = strComparableMap23.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence29 = strComparableMap23.get((java.lang.Object) 100L);
        boolean boolean30 = strComparableMap6.containsValue((java.lang.Object) strComparableMap23);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap32.get((java.lang.Object) true);
        int int38 = strComparableMap32.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet39 = strComparableMap32.keySet();
        boolean boolean40 = strComparableMap6.equals((java.lang.Object) strComparableMap32);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable43 = null;
        java.lang.CharSequence charSequence45 = strComparableMap42.putIfAbsent(strComparable43, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence47 = strComparableMap42.get((java.lang.Object) true);
        java.lang.Object obj48 = strComparableMap42.clone();
        java.lang.String str49 = strComparableMap42.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence56 = strComparableMap51.get((java.lang.Object) true);
        int int57 = strComparableMap51.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable60 = null;
        java.lang.CharSequence charSequence62 = strComparableMap59.putIfAbsent(strComparable60, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence65 = strComparableMap59.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable68 = null;
        java.lang.CharSequence charSequence70 = strComparableMap67.putIfAbsent(strComparable68, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence72 = strComparableMap67.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet73 = strComparableMap67.entrySet();
        strComparableMap59.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap67);
        java.lang.Class<?> wildcardClass75 = strComparableMap67.getClass();
        boolean boolean76 = strComparableMap51.containsKey((java.lang.Object) wildcardClass75);
        boolean boolean77 = strComparableMap42.containsValue((java.lang.Object) strComparableMap51);
        java.lang.CharSequence charSequence78 = strComparableMap32.get((java.lang.Object) strComparableMap51);
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.constant.Constable> cloneableMap80 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.constant.Constable>(1);
        boolean boolean81 = strComparableMap51.containsKey((java.lang.Object) 1);
        boolean boolean82 = strComparableMap3.equals((java.lang.Object) boolean81);
        int int83 = strComparableMap3.size();
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{null=, =}" + "'", str21, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(strComparableSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{null=}");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{null=}" + "'", str49, "{null=}");
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNotNull(strComparableEntrySet73);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(charSequence78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj13 = strComparableMap1.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet14 = strComparableMap1.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet21 = strComparableMap18.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap18.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet23 = strComparableMap18.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean26 = strComparableMap25.isEmpty();
        java.lang.Object obj27 = strComparableMap25.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        strComparableMap25.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        strComparableMap25.clear();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap25);
        java.lang.CharSequence charSequence38 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap25, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean45 = strComparableMap41.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence48 = strComparableMap41.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        boolean boolean55 = strComparableMap50.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence58 = strComparableMap50.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean61 = strComparableMap60.isEmpty();
        java.lang.Object obj62 = strComparableMap60.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection63 = strComparableMap60.values();
        strComparableMap50.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap60);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean67 = strComparableMap66.isEmpty();
        java.lang.Object obj68 = strComparableMap66.clone();
        java.lang.Class<?> wildcardClass69 = obj68.getClass();
        java.lang.CharSequence charSequence71 = strComparableMap60.getOrDefault((java.lang.Object) wildcardClass69, (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet72 = strComparableMap60.keySet();
        java.lang.CharSequence charSequence73 = strComparableMap41.remove((java.lang.Object) strComparableSet72);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap75 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet76 = strComparableMap75.keySet();
        java.lang.CharSequence charSequence77 = strComparableMap41.remove((java.lang.Object) strComparableSet76);
        java.lang.CharSequence charSequence78 = null;
        java.lang.CharSequence charSequence79 = strComparableMap25.getOrDefault((java.lang.Object) strComparableMap41, charSequence78);
        java.lang.String str80 = strComparableMap25.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet21);
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertNotNull(strComparableSet23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "{null=, =}" + "'", charSequence38, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "{}");
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertEquals("'" + charSequence71 + "' != '" + "hi!" + "'", charSequence71, "hi!");
        org.junit.Assert.assertNotNull(strComparableSet72);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertNotNull(strComparableSet76);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "{}" + "'", str80, "{}");
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) ' ', (float) '#');
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.Class<?>> comparableEntrySetMap0 = new java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.Class<?>>();
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.CharSequence charSequence18 = strComparableMap11.put((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(100);
        strComparableMap11.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet22 = strComparableMap20.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNotNull(strComparableSet22);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0);
        java.lang.Object obj2 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection3 = strComparableMap1.values();
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection3);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(10, (float) 2, false);
        java.lang.CharSequence charSequence6 = strComparableMap3.put((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{{null=}={null=, =}}");
        org.junit.Assert.assertNull(charSequence6);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        boolean boolean21 = strComparableMap16.containsValue((java.lang.Object) (short) 100);
        int int22 = strComparableMap16.size();
        java.lang.CharSequence charSequence24 = strComparableMap10.getOrDefault((java.lang.Object) strComparableMap16, (java.lang.CharSequence) "hi!");
        boolean boolean25 = strComparableMap1.equals((java.lang.Object) charSequence24);
        java.lang.CharSequence charSequence28 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable31 = null;
        java.lang.CharSequence charSequence33 = strComparableMap30.putIfAbsent(strComparable31, (java.lang.CharSequence) "");
        boolean boolean35 = strComparableMap30.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        int int43 = strComparableMap37.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection44 = strComparableMap37.values();
        boolean boolean45 = strComparableMap30.containsValue((java.lang.Object) strComparableMap37);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        boolean boolean52 = strComparableMap47.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence55 = strComparableMap47.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence58 = strComparableMap47.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence61 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence64 = strComparableMap47.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean65 = strComparableMap30.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence70 = strComparableMap30.getOrDefault((java.lang.Object) strComparableMap68, (java.lang.CharSequence) "{null=}");
        boolean boolean71 = strComparableMap1.containsValue((java.lang.Object) strComparableMap30);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet72 = strComparableMap1.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "{null=}" + "'", charSequence70, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strComparableSet72);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (float) (short) 10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap4 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable5 = null;
        java.lang.CharSequence charSequence7 = strComparableMap4.putIfAbsent(strComparable5, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = strComparableMap4.get((java.lang.Object) true);
        java.lang.Object obj10 = strComparableMap4.clone();
        java.lang.String str11 = strComparableMap4.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean16 = strComparableMap15.isEmpty();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        boolean boolean24 = strComparableMap19.containsValue((java.lang.Object) (short) 100);
        int int25 = strComparableMap19.size();
        java.lang.CharSequence charSequence27 = strComparableMap13.getOrDefault((java.lang.Object) strComparableMap19, (java.lang.CharSequence) "hi!");
        boolean boolean28 = strComparableMap4.equals((java.lang.Object) charSequence27);
        java.lang.CharSequence charSequence31 = strComparableMap4.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable34 = null;
        java.lang.CharSequence charSequence36 = strComparableMap33.putIfAbsent(strComparable34, (java.lang.CharSequence) "");
        boolean boolean38 = strComparableMap33.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable41 = null;
        java.lang.CharSequence charSequence43 = strComparableMap40.putIfAbsent(strComparable41, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence45 = strComparableMap40.get((java.lang.Object) true);
        int int46 = strComparableMap40.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection47 = strComparableMap40.values();
        boolean boolean48 = strComparableMap33.containsValue((java.lang.Object) strComparableMap40);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        boolean boolean55 = strComparableMap50.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence58 = strComparableMap50.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence61 = strComparableMap50.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = strComparableMap50.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence67 = strComparableMap50.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean68 = strComparableMap33.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap71 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence73 = strComparableMap33.getOrDefault((java.lang.Object) strComparableMap71, (java.lang.CharSequence) "{null=}");
        boolean boolean74 = strComparableMap4.containsValue((java.lang.Object) strComparableMap33);
        strComparableMap2.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap33);
        java.lang.Object obj76 = strComparableMap33.clone();
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{null=}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{null=}" + "'", str11, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "hi!" + "'", charSequence61, "hi!");
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + charSequence73 + "' != '" + "{null=}" + "'", charSequence73, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "{null=}");
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence34 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj35 = null;
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.lang.CharSequence charSequence41 = strComparableMap37.remove((java.lang.Object) true);
        boolean boolean45 = strComparableMap37.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap1.remove(obj35, (java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap48.get((java.lang.Object) true);
        java.lang.Object obj54 = strComparableMap48.clone();
        java.lang.CharSequence charSequence57 = strComparableMap48.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj58 = null;
        java.lang.CharSequence charSequence59 = strComparableMap48.get(obj58);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean64 = strComparableMap63.isEmpty();
        strComparableMap61.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap63);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet66 = strComparableMap63.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection67 = strComparableMap63.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet68 = strComparableMap63.keySet();
        boolean boolean69 = strComparableMap48.equals((java.lang.Object) strComparableMap63);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        int int71 = strComparableMap1.size();
        int int72 = strComparableMap1.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{null=}");
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "" + "'", charSequence59, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet66);
        org.junit.Assert.assertNotNull(charSequenceCollection67);
        org.junit.Assert.assertNotNull(strComparableSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj13 = strComparableMap1.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet14 = strComparableMap1.entrySet();
        strComparableMap1.clear();
        int int16 = strComparableMap1.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.lang.String str8 = strComparableMap1.toString();
        java.lang.String str9 = strComparableMap1.toString();
        int int10 = strComparableMap1.size();
        java.lang.Object obj11 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean16 = strComparableMap15.isEmpty();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        boolean boolean24 = strComparableMap19.containsValue((java.lang.Object) (short) 100);
        int int25 = strComparableMap19.size();
        java.lang.CharSequence charSequence27 = strComparableMap13.getOrDefault((java.lang.Object) strComparableMap19, (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet28 = strComparableMap13.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap13);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        java.lang.Object obj33 = strComparableMap31.clone();
        java.lang.CharSequence charSequence35 = strComparableMap31.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence37 = strComparableMap31.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence40 = strComparableMap31.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable43 = null;
        java.lang.CharSequence charSequence45 = strComparableMap42.putIfAbsent(strComparable43, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence48 = strComparableMap42.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap50.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet56 = strComparableMap50.entrySet();
        strComparableMap42.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap50);
        java.lang.CharSequence charSequence59 = strComparableMap31.getOrDefault((java.lang.Object) strComparableMap50, (java.lang.CharSequence) "{null=, =}");
        java.lang.Object obj60 = null;
        java.lang.CharSequence charSequence61 = strComparableMap50.remove(obj60);
        java.lang.Object obj62 = strComparableMap50.clone();
        java.lang.CharSequence charSequence63 = strComparableMap1.remove((java.lang.Object) strComparableMap50);
        java.lang.Object obj64 = strComparableMap1.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{null=}" + "'", str9, "{null=}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "{null=}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertNotNull(strComparableEntrySet28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNotNull(strComparableEntrySet56);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "{null=, =}" + "'", charSequence59, "{null=, =}");
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "" + "'", charSequence61, "");
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "{null=}");
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap37.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence58 = strComparableMap53.get((java.lang.Object) true);
        int int59 = strComparableMap53.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet60 = strComparableMap53.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean65 = strComparableMap53.equals((java.lang.Object) 0);
        strComparableMap46.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap53);
        java.lang.CharSequence charSequence68 = strComparableMap37.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "{null=}");
        java.lang.Object obj69 = strComparableMap37.clone();
        int int70 = strComparableMap37.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(strComparableSet60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "{null=}" + "'", charSequence68, "{null=}");
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "{null=}");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection21 = strComparableMap18.values();
        java.lang.CharSequence charSequence22 = strComparableMap1.get((java.lang.Object) strComparableMap18);
        int int23 = strComparableMap1.size();
        strComparableMap1.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection21);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        java.util.LinkedHashMap<java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.String> strComparableMapMap0 = new java.util.LinkedHashMap<java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.String>();
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = strComparableMap9.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = strComparableMap17.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet23 = strComparableMap17.entrySet();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap17);
        java.lang.Class<?> wildcardClass25 = strComparableMap17.getClass();
        boolean boolean26 = strComparableMap1.containsKey((java.lang.Object) wildcardClass25);
        int int27 = strComparableMap1.size();
        java.lang.Object obj28 = strComparableMap1.clone();
        boolean boolean32 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, {null=, =}={null=}}", (java.lang.CharSequence) "{{null=, =}={}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNotNull(strComparableEntrySet23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{null=}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        boolean boolean3 = strComparableMap1.isEmpty();
        int int4 = strComparableMap1.size();
        java.lang.CharSequence charSequence7 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.CharSequence charSequence10 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        boolean boolean17 = strComparableMap12.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence20 = strComparableMap12.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap12.containsKey((java.lang.Object) 1);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection24 = strComparableMap12.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap26.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        boolean boolean31 = strComparableMap26.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean34 = strComparableMap33.isEmpty();
        java.lang.Object obj35 = strComparableMap33.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection36 = strComparableMap33.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        boolean boolean43 = strComparableMap38.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable46 = null;
        java.lang.CharSequence charSequence48 = strComparableMap45.putIfAbsent(strComparable46, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence50 = strComparableMap45.get((java.lang.Object) true);
        int int51 = strComparableMap45.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection52 = strComparableMap45.values();
        boolean boolean53 = strComparableMap38.containsValue((java.lang.Object) strComparableMap45);
        boolean boolean54 = strComparableMap33.equals((java.lang.Object) strComparableMap45);
        strComparableMap26.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap33);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet56 = strComparableMap26.entrySet();
        boolean boolean57 = strComparableMap12.containsKey((java.lang.Object) strComparableEntrySet56);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection24);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection36);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.invoke.TypeDescriptor> charSequenceIterableMap3 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.invoke.TypeDescriptor>((int) '4', (float) 10, true);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(2, (float) 3, true);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet10 = strComparableMap2.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10, (float) 1L, false);
        strComparableMap2.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap14);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet16 = strComparableMap2.entrySet();
        java.lang.CharSequence charSequence19 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{null=, hi!=hi!}", (java.lang.CharSequence) "hi!");
        strComparableMap2.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(strComparableSet10);
        org.junit.Assert.assertNotNull(strComparableEntrySet16);
        org.junit.Assert.assertNull(charSequence19);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable4 = null;
        java.lang.CharSequence charSequence6 = strComparableMap3.putIfAbsent(strComparable4, (java.lang.CharSequence) "");
        boolean boolean8 = strComparableMap3.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence11 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap3.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean21 = strComparableMap1.containsKey((java.lang.Object) charSequence20);
        java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.ConstantDesc> comparableEntrySetMap22 = new java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.ConstantDesc>();
        java.lang.CharSequence charSequence23 = strComparableMap1.get((java.lang.Object) comparableEntrySetMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(1, (float) 1);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.lang.CharSequence charSequence30 = strComparableMap26.put((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection31 = strComparableMap26.values();
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNotNull(charSequenceCollection31);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean14 = strComparableMap13.isEmpty();
        java.lang.Object obj15 = strComparableMap13.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection16 = strComparableMap13.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        java.lang.CharSequence charSequence28 = strComparableMap25.putIfAbsent(strComparable26, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap25.get((java.lang.Object) true);
        int int31 = strComparableMap25.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection32 = strComparableMap25.values();
        boolean boolean33 = strComparableMap18.containsValue((java.lang.Object) strComparableMap25);
        boolean boolean34 = strComparableMap13.equals((java.lang.Object) strComparableMap25);
        java.lang.CharSequence charSequence35 = strComparableMap1.get((java.lang.Object) strComparableMap13);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) ' ', (float) (byte) 10);
        java.lang.CharSequence charSequence41 = strComparableMap38.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        boolean boolean42 = strComparableMap13.equals((java.lang.Object) charSequence41);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap4 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean8 = strComparableMap4.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = strComparableMap4.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        boolean boolean20 = strComparableMap15.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence23 = strComparableMap15.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean26 = strComparableMap25.isEmpty();
        java.lang.Object obj27 = strComparableMap25.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection28 = strComparableMap25.values();
        strComparableMap15.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap25);
        java.lang.String str30 = strComparableMap15.toString();
        boolean boolean31 = strComparableMap4.remove((java.lang.Object) strComparableMap13, (java.lang.Object) str30);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable34 = null;
        java.lang.CharSequence charSequence36 = strComparableMap33.putIfAbsent(strComparable34, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence38 = strComparableMap33.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet39 = strComparableMap33.entrySet();
        java.lang.String str40 = strComparableMap33.toString();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection41 = strComparableMap33.values();
        boolean boolean42 = strComparableMap4.equals((java.lang.Object) strComparableMap33);
        boolean boolean46 = strComparableMap4.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet47 = strComparableMap4.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable50 = null;
        java.lang.CharSequence charSequence52 = strComparableMap49.putIfAbsent(strComparable50, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence54 = strComparableMap49.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet55 = strComparableMap49.entrySet();
        java.lang.CharSequence charSequence58 = strComparableMap49.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence61 = strComparableMap49.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, =}");
        strComparableMap4.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        boolean boolean63 = strComparableMap1.containsKey((java.lang.Object) strComparableMap4);
        java.util.LinkedHashMap<java.lang.Cloneable, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>> cloneableMap66 = new java.util.LinkedHashMap<java.lang.Cloneable, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>>(0, (float) 2);
        java.lang.Class<?> wildcardClass67 = cloneableMap66.getClass();
        boolean boolean68 = strComparableMap1.equals((java.lang.Object) wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{null=, =}" + "'", str30, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNotNull(strComparableEntrySet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{null=}" + "'", str40, "{null=}");
        org.junit.Assert.assertNotNull(charSequenceCollection41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strComparableSet47);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNotNull(strComparableEntrySet55);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        java.util.LinkedHashMap<java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.Class<?>> strComparableMapMap2 = new java.util.LinkedHashMap<java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.Class<?>>((int) (short) 1, (float) 3);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        boolean boolean9 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet10 = strComparableMap3.entrySet();
        boolean boolean14 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=, {null=}={}}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.lang.CharSequence charSequence18 = strComparableMap1.get((java.lang.Object) 'a');
        java.lang.CharSequence charSequence21 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, hi!=hi!}");
        boolean boolean22 = strComparableMap1.isEmpty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "{null=, =}" + "'", charSequence21, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence34 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj35 = null;
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.lang.CharSequence charSequence41 = strComparableMap37.remove((java.lang.Object) true);
        boolean boolean45 = strComparableMap37.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap1.remove(obj35, (java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap48.get((java.lang.Object) true);
        java.lang.Object obj54 = strComparableMap48.clone();
        java.lang.CharSequence charSequence57 = strComparableMap48.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj58 = null;
        java.lang.CharSequence charSequence59 = strComparableMap48.get(obj58);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean64 = strComparableMap63.isEmpty();
        strComparableMap61.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap63);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet66 = strComparableMap63.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection67 = strComparableMap63.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet68 = strComparableMap63.keySet();
        boolean boolean69 = strComparableMap48.equals((java.lang.Object) strComparableMap63);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        strComparableMap48.clear();
        java.lang.Object obj72 = strComparableMap48.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{null=}");
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "" + "'", charSequence59, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet66);
        org.junit.Assert.assertNotNull(charSequenceCollection67);
        org.junit.Assert.assertNotNull(strComparableSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "{}");
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        int int8 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        java.lang.Object obj22 = strComparableMap16.clone();
        java.lang.CharSequence charSequence25 = strComparableMap16.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj26 = null;
        java.lang.CharSequence charSequence27 = strComparableMap16.get(obj26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap31.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap31.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet36 = strComparableMap31.keySet();
        boolean boolean37 = strComparableMap16.equals((java.lang.Object) strComparableMap31);
        java.lang.String str38 = strComparableMap16.toString();
        boolean boolean39 = strComparableMap10.equals((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        int int48 = strComparableMap41.size();
        java.lang.CharSequence charSequence49 = strComparableMap10.remove((java.lang.Object) strComparableMap41);
        boolean boolean50 = strComparableMap1.containsKey((java.lang.Object) strComparableMap10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence58 = strComparableMap52.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable61 = null;
        java.lang.CharSequence charSequence63 = strComparableMap60.putIfAbsent(strComparable61, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence65 = strComparableMap60.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet66 = strComparableMap60.entrySet();
        strComparableMap52.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap60);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap69 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection70 = strComparableMap69.values();
        strComparableMap69.clear();
        boolean boolean72 = strComparableMap52.containsKey((java.lang.Object) strComparableMap69);
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet74 = strComparableMap10.keySet();
        java.lang.Class<?> wildcardClass75 = strComparableMap10.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{null=}");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNotNull(strComparableSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=, =}" + "'", str38, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNotNull(strComparableEntrySet66);
        org.junit.Assert.assertNotNull(charSequenceCollection70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strComparableSet74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        java.util.LinkedHashMap<java.lang.String, java.lang.Cloneable> strMap0 = new java.util.LinkedHashMap<java.lang.String, java.lang.Cloneable>();
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) ' ', (float) (byte) 10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean9 = strComparableMap5.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence12 = strComparableMap5.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        boolean boolean21 = strComparableMap16.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence24 = strComparableMap16.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean27 = strComparableMap26.isEmpty();
        java.lang.Object obj28 = strComparableMap26.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection29 = strComparableMap26.values();
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.lang.String str31 = strComparableMap16.toString();
        boolean boolean32 = strComparableMap5.remove((java.lang.Object) strComparableMap14, (java.lang.Object) str31);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable35 = null;
        java.lang.CharSequence charSequence37 = strComparableMap34.putIfAbsent(strComparable35, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence39 = strComparableMap34.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet40 = strComparableMap34.entrySet();
        java.lang.String str41 = strComparableMap34.toString();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection42 = strComparableMap34.values();
        boolean boolean43 = strComparableMap5.equals((java.lang.Object) strComparableMap34);
        boolean boolean47 = strComparableMap5.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.lang.Class<?> wildcardClass48 = strComparableMap5.getClass();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap50.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap57);
        boolean boolean59 = strComparableMap50.isEmpty();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet60 = strComparableMap50.keySet();
        java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.ConstantDesc> comparableEntrySetMap61 = new java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.ConstantDesc>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence66 = strComparableMap63.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap63.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap70);
        java.lang.CharSequence charSequence74 = strComparableMap70.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        boolean boolean75 = strComparableMap50.remove((java.lang.Object) comparableEntrySetMap61, (java.lang.Object) "{}");
        strComparableMap50.clear();
        boolean boolean77 = strComparableMap2.remove((java.lang.Object) strComparableMap5, (java.lang.Object) strComparableMap50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{null=, =}" + "'", str31, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNotNull(strComparableEntrySet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{null=}" + "'", str41, "{null=}");
        org.junit.Assert.assertNotNull(charSequenceCollection42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strComparableSet60);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap1.containsKey((java.lang.Object) 1);
        strComparableMap1.clear();
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence28 = strComparableMap17.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection29 = strComparableMap17.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        int int37 = strComparableMap31.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection38 = strComparableMap31.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable41 = null;
        java.lang.CharSequence charSequence43 = strComparableMap40.putIfAbsent(strComparable41, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence46 = strComparableMap40.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap48.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet54 = strComparableMap48.entrySet();
        strComparableMap40.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        java.lang.CharSequence charSequence57 = strComparableMap31.getOrDefault((java.lang.Object) strComparableMap48, (java.lang.CharSequence) "{null=, =}");
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet59 = strComparableMap31.entrySet();
        boolean boolean60 = strComparableMap1.containsKey((java.lang.Object) strComparableMap31);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "hi!" + "'", charSequence28, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection29);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection38);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNotNull(strComparableEntrySet54);
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "{null=, =}" + "'", charSequence57, "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap1.putIfAbsent(strComparable11, (java.lang.CharSequence) "{null=, hi!=hi!}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean18 = strComparableMap17.isEmpty();
        strComparableMap15.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap17);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet20 = strComparableMap17.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection21 = strComparableMap17.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet22 = strComparableMap17.entrySet();
        boolean boolean23 = strComparableMap1.containsKey((java.lang.Object) strComparableEntrySet22);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet20);
        org.junit.Assert.assertNotNull(charSequenceCollection21);
        org.junit.Assert.assertNotNull(strComparableEntrySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap2);
        java.lang.String str8 = strComparableMap7.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean14 = strComparableMap13.isEmpty();
        strComparableMap11.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap13);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet16 = strComparableMap13.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection17 = strComparableMap13.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet18 = strComparableMap13.keySet();
        java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>> charSequenceIterableMap19 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>>();
        java.lang.CharSequence charSequence20 = strComparableMap13.remove((java.lang.Object) charSequenceIterableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (float) (short) 10);
        java.lang.CharSequence charSequence26 = strComparableMap23.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        boolean boolean27 = strComparableMap13.containsValue((java.lang.Object) charSequence26);
        java.lang.CharSequence charSequence29 = strComparableMap7.getOrDefault((java.lang.Object) boolean27, (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet16);
        org.junit.Assert.assertNotNull(charSequenceCollection17);
        org.junit.Assert.assertNotNull(strComparableSet18);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "{null=, =, hi!=hi!}" + "'", charSequence29, "{null=, =, hi!=hi!}");
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence26 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap18.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence41 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap39, (java.lang.CharSequence) "{null=}");
        java.lang.String str42 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean47 = strComparableMap46.isEmpty();
        strComparableMap44.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        boolean boolean49 = strComparableMap1.containsValue((java.lang.Object) strComparableMap46);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        strComparableMap50.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=}" + "'", charSequence41, "{null=}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{null=}" + "'", str42, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean10 = strComparableMap1.isEmpty();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet11 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence21 = strComparableMap13.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean24 = strComparableMap23.isEmpty();
        java.lang.Object obj25 = strComparableMap23.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap23.values();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.lang.String str28 = strComparableMap13.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean31 = strComparableMap30.isEmpty();
        java.lang.Object obj32 = strComparableMap30.clone();
        java.lang.CharSequence charSequence34 = strComparableMap30.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence36 = strComparableMap30.get((java.lang.Object) 100L);
        boolean boolean37 = strComparableMap13.containsValue((java.lang.Object) strComparableMap30);
        boolean boolean38 = strComparableMap13.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap13);
        java.lang.Object obj40 = null;
        java.lang.CharSequence charSequence41 = strComparableMap13.get(obj40);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strComparableSet11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{null=, =}" + "'", str28, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "" + "'", charSequence41, "");
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str13 = strComparableMap1.toString();
        java.lang.CharSequence charSequence16 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{{null=, =}={}}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{null=, =}" + "'", str13, "{null=, =}");
        org.junit.Assert.assertNull(charSequence16);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap37.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.lang.Object obj45 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection46 = strComparableMap1.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet47 = strComparableMap1.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{null=, =}");
        org.junit.Assert.assertNotNull(charSequenceCollection46);
        org.junit.Assert.assertNotNull(strComparableEntrySet47);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection16 = strComparableMap1.values();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "" + "'", charSequence15, "");
        org.junit.Assert.assertNotNull(charSequenceCollection16);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        boolean boolean21 = strComparableMap16.containsValue((java.lang.Object) (short) 100);
        int int22 = strComparableMap16.size();
        java.lang.CharSequence charSequence24 = strComparableMap10.getOrDefault((java.lang.Object) strComparableMap16, (java.lang.CharSequence) "hi!");
        boolean boolean25 = strComparableMap1.equals((java.lang.Object) charSequence24);
        java.lang.CharSequence charSequence28 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable31 = null;
        java.lang.CharSequence charSequence33 = strComparableMap30.putIfAbsent(strComparable31, (java.lang.CharSequence) "");
        boolean boolean35 = strComparableMap30.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        int int43 = strComparableMap37.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection44 = strComparableMap37.values();
        boolean boolean45 = strComparableMap30.containsValue((java.lang.Object) strComparableMap37);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        boolean boolean52 = strComparableMap47.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence55 = strComparableMap47.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence58 = strComparableMap47.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence61 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence64 = strComparableMap47.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean65 = strComparableMap30.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence70 = strComparableMap30.getOrDefault((java.lang.Object) strComparableMap68, (java.lang.CharSequence) "{null=}");
        boolean boolean71 = strComparableMap1.containsValue((java.lang.Object) strComparableMap30);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection72 = strComparableMap30.values();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "{null=}" + "'", charSequence70, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection72);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        int int11 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap13.get((java.lang.Object) true);
        java.lang.Object obj19 = strComparableMap13.clone();
        java.lang.String str20 = strComparableMap13.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap22.get((java.lang.Object) true);
        int int28 = strComparableMap22.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable31 = null;
        java.lang.CharSequence charSequence33 = strComparableMap30.putIfAbsent(strComparable31, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap30.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence43 = strComparableMap38.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet44 = strComparableMap38.entrySet();
        strComparableMap30.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        java.lang.Class<?> wildcardClass46 = strComparableMap38.getClass();
        boolean boolean47 = strComparableMap22.containsKey((java.lang.Object) wildcardClass46);
        boolean boolean48 = strComparableMap13.containsValue((java.lang.Object) strComparableMap22);
        java.lang.CharSequence charSequence49 = strComparableMap1.remove((java.lang.Object) strComparableMap22);
        boolean boolean53 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{{null=, =}={}}", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        boolean boolean60 = strComparableMap55.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence63 = strComparableMap55.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean66 = strComparableMap65.isEmpty();
        java.lang.Object obj67 = strComparableMap65.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection68 = strComparableMap65.values();
        strComparableMap55.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap65);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap71 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean72 = strComparableMap71.isEmpty();
        java.lang.Object obj73 = strComparableMap71.clone();
        java.lang.Class<?> wildcardClass74 = obj73.getClass();
        java.lang.CharSequence charSequence76 = strComparableMap65.getOrDefault((java.lang.Object) wildcardClass74, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence79 = strComparableMap65.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=}");
        boolean boolean80 = strComparableMap1.containsKey((java.lang.Object) "{null=}");
        boolean boolean81 = strComparableMap1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{null=}");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{null=}" + "'", str20, "{null=}");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNotNull(strComparableEntrySet44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "{}");
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "hi!" + "'", charSequence76, "hi!");
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        java.util.LinkedHashMap<java.lang.String, java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> strMap2 = new java.util.LinkedHashMap<java.lang.String, java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>(10, (float) 10L);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        java.util.LinkedHashMap<java.io.Serializable, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> serializableMap1 = new java.util.LinkedHashMap<java.io.Serializable, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((int) '#');
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.lang.CharSequence charSequence10 = strComparableMap6.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence12 = strComparableMap6.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence14 = strComparableMap1.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        boolean boolean21 = strComparableMap16.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence24 = strComparableMap16.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean27 = strComparableMap26.isEmpty();
        java.lang.Object obj28 = strComparableMap26.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection29 = strComparableMap26.values();
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean37 = strComparableMap33.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = strComparableMap33.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int41 = strComparableMap33.size();
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap33);
        boolean boolean43 = strComparableMap1.containsValue((java.lang.Object) strComparableMap16);
        strComparableMap16.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence21 = strComparableMap13.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean24 = strComparableMap23.isEmpty();
        java.lang.Object obj25 = strComparableMap23.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap23.values();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.lang.String str28 = strComparableMap13.toString();
        boolean boolean29 = strComparableMap2.remove((java.lang.Object) strComparableMap11, (java.lang.Object) str28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet37 = strComparableMap31.entrySet();
        java.lang.String str38 = strComparableMap31.toString();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection39 = strComparableMap31.values();
        boolean boolean40 = strComparableMap2.equals((java.lang.Object) strComparableMap31);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable43 = null;
        java.lang.CharSequence charSequence45 = strComparableMap42.putIfAbsent(strComparable43, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence48 = strComparableMap42.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap50.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet56 = strComparableMap50.entrySet();
        strComparableMap42.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap50);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable60 = null;
        java.lang.CharSequence charSequence62 = strComparableMap59.putIfAbsent(strComparable60, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence64 = strComparableMap59.get((java.lang.Object) true);
        int int65 = strComparableMap59.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable68 = null;
        java.lang.CharSequence charSequence70 = strComparableMap67.putIfAbsent(strComparable68, (java.lang.CharSequence) "");
        boolean boolean72 = strComparableMap67.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence75 = strComparableMap67.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap77 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap79 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable80 = null;
        java.lang.CharSequence charSequence82 = strComparableMap79.putIfAbsent(strComparable80, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence85 = strComparableMap79.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean86 = strComparableMap67.remove((java.lang.Object) strComparableMap77, (java.lang.Object) "hi!");
        strComparableMap59.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap77);
        boolean boolean88 = strComparableMap77.isEmpty();
        strComparableMap42.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap77);
        java.lang.Object obj90 = strComparableMap42.clone();
        boolean boolean94 = strComparableMap42.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence95 = strComparableMap31.get((java.lang.Object) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet96 = strComparableMap31.keySet();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{null=, =}" + "'", str28, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNotNull(strComparableEntrySet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=}" + "'", str38, "{null=}");
        org.junit.Assert.assertNotNull(charSequenceCollection39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNotNull(strComparableEntrySet56);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNull(charSequence82);
        org.junit.Assert.assertNull(charSequence85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "{null=, hi!=hi!}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "{null=, hi!=hi!}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "{null=, hi!=hi!}");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(charSequence95);
        org.junit.Assert.assertNotNull(strComparableSet96);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap15.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable24 = null;
        java.lang.CharSequence charSequence26 = strComparableMap23.putIfAbsent(strComparable24, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence28 = strComparableMap23.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet29 = strComparableMap23.entrySet();
        strComparableMap15.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        boolean boolean37 = strComparableMap32.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean40 = strComparableMap39.isEmpty();
        java.lang.Object obj41 = strComparableMap39.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection42 = strComparableMap39.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable45 = null;
        java.lang.CharSequence charSequence47 = strComparableMap44.putIfAbsent(strComparable45, (java.lang.CharSequence) "");
        boolean boolean49 = strComparableMap44.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence56 = strComparableMap51.get((java.lang.Object) true);
        int int57 = strComparableMap51.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection58 = strComparableMap51.values();
        boolean boolean59 = strComparableMap44.containsValue((java.lang.Object) strComparableMap51);
        boolean boolean60 = strComparableMap39.equals((java.lang.Object) strComparableMap51);
        strComparableMap32.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap39);
        boolean boolean62 = strComparableMap39.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet63 = strComparableMap39.entrySet();
        java.lang.CharSequence charSequence65 = strComparableMap23.getOrDefault((java.lang.Object) strComparableMap39, (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap39);
        java.lang.CharSequence charSequence67 = strComparableMap1.remove((java.lang.Object) strComparableMap39);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNotNull(strComparableEntrySet29);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection42);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet63);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "{null=, =, hi!=hi!}" + "'", charSequence65, "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence67);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean19 = strComparableMap1.isEmpty();
        boolean boolean23 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{{null=}={null=, =}}", (java.lang.CharSequence) "{{null=}={null=, =}}", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=, {null=, =}={null=}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence26);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 1, (float) 10L);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        boolean boolean21 = strComparableMap16.containsValue((java.lang.Object) (short) 100);
        int int22 = strComparableMap16.size();
        java.lang.CharSequence charSequence24 = strComparableMap10.getOrDefault((java.lang.Object) strComparableMap16, (java.lang.CharSequence) "hi!");
        boolean boolean25 = strComparableMap1.equals((java.lang.Object) charSequence24);
        java.lang.CharSequence charSequence28 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable31 = null;
        java.lang.CharSequence charSequence33 = strComparableMap30.putIfAbsent(strComparable31, (java.lang.CharSequence) "");
        boolean boolean35 = strComparableMap30.containsValue((java.lang.Object) (short) 100);
        int int36 = strComparableMap30.size();
        int int37 = strComparableMap30.size();
        boolean boolean38 = strComparableMap1.containsValue((java.lang.Object) strComparableMap30);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection39 = strComparableMap30.values();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection39);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> charSequenceIterableMap2 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>((int) (short) 100, 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence6 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap3.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.lang.Object obj15 = strComparableMap9.clone();
        java.lang.CharSequence charSequence18 = strComparableMap9.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj19 = null;
        java.lang.CharSequence charSequence20 = strComparableMap9.get(obj19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean25 = strComparableMap24.isEmpty();
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap24);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet27 = strComparableMap24.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection28 = strComparableMap24.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet29 = strComparableMap24.keySet();
        boolean boolean30 = strComparableMap9.equals((java.lang.Object) strComparableMap24);
        java.lang.String str31 = strComparableMap9.toString();
        java.lang.CharSequence charSequence34 = strComparableMap9.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence41 = strComparableMap36.get((java.lang.Object) true);
        java.lang.Object obj42 = strComparableMap36.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable45 = null;
        java.lang.CharSequence charSequence47 = strComparableMap44.putIfAbsent(strComparable45, (java.lang.CharSequence) "");
        boolean boolean49 = strComparableMap44.containsValue((java.lang.Object) (short) 100);
        int int50 = strComparableMap44.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence53 = strComparableMap44.getOrDefault((java.lang.Object) strComparableMap51, (java.lang.CharSequence) "");
        java.lang.String str54 = strComparableMap44.toString();
        boolean boolean55 = strComparableMap9.remove(obj42, (java.lang.Object) str54);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        java.lang.CharSequence charSequence61 = strComparableMap58.putIfAbsent(strComparable59, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence63 = strComparableMap58.get((java.lang.Object) true);
        int int64 = strComparableMap58.size();
        java.lang.CharSequence charSequence66 = strComparableMap58.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence69 = strComparableMap58.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj70 = strComparableMap58.clone();
        boolean boolean71 = strComparableMap3.remove((java.lang.Object) strComparableMap56, (java.lang.Object) strComparableMap58);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection72 = strComparableMap56.values();
        java.lang.Class<?> wildcardClass73 = charSequenceCollection72.getClass();
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{null=}");
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "" + "'", charSequence20, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet27);
        org.junit.Assert.assertNotNull(charSequenceCollection28);
        org.junit.Assert.assertNotNull(strComparableSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{null=, =}" + "'", str31, "{null=, =}");
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{null=}");
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "" + "'", charSequence53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{null=}" + "'", str54, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap0 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable3 = null;
        java.lang.CharSequence charSequence5 = strComparableMap2.putIfAbsent(strComparable3, (java.lang.CharSequence) "");
        boolean boolean7 = strComparableMap2.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence10 = strComparableMap2.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        java.lang.Object obj14 = strComparableMap12.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap12.values();
        strComparableMap2.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.lang.CharSequence charSequence17 = strComparableMap0.remove((java.lang.Object) strComparableMap12);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet18 = strComparableMap0.entrySet();
        boolean boolean19 = strComparableMap0.isEmpty();
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNotNull(strComparableEntrySet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap4 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean8 = strComparableMap4.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap4);
        java.lang.Object obj10 = strComparableMap4.clone();
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault(obj10, (java.lang.CharSequence) "{null=, {null=, =}={null=}}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "{null=, {null=, =}={null=}}" + "'", charSequence12, "{null=, {null=, =}={null=}}");
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection13 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = strComparableMap15.get((java.lang.Object) true);
        int int21 = strComparableMap15.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap15.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap24.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap32.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet38 = strComparableMap32.entrySet();
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.lang.CharSequence charSequence41 = strComparableMap15.getOrDefault((java.lang.Object) strComparableMap32, (java.lang.CharSequence) "{null=, =}");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap15);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap15.entrySet();
        boolean boolean47 = strComparableMap15.replace((java.lang.Comparable<java.lang.String>) "{{null=}={null=, =}}", (java.lang.CharSequence) "{{null=}={null=, =}}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNotNull(strComparableEntrySet38);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=, =}" + "'", charSequence41, "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        boolean boolean17 = strComparableMap1.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        boolean boolean24 = strComparableMap19.containsValue((java.lang.Object) (short) 100);
        int int25 = strComparableMap19.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence28 = strComparableMap19.getOrDefault((java.lang.Object) strComparableMap26, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationMap31 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>(2, (float) 'a');
        boolean boolean32 = strComparableMap19.equals((java.lang.Object) 'a');
        java.lang.Object obj33 = strComparableMap19.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable36 = null;
        java.lang.CharSequence charSequence38 = strComparableMap35.putIfAbsent(strComparable36, (java.lang.CharSequence) "");
        boolean boolean40 = strComparableMap35.containsValue((java.lang.Object) (short) 100);
        int int41 = strComparableMap35.size();
        boolean boolean42 = strComparableMap35.isEmpty();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection43 = strComparableMap35.values();
        boolean boolean44 = strComparableMap19.containsKey((java.lang.Object) charSequenceCollection43);
        boolean boolean45 = strComparableMap1.containsKey((java.lang.Object) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        boolean boolean57 = strComparableMap52.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable60 = null;
        java.lang.CharSequence charSequence62 = strComparableMap59.putIfAbsent(strComparable60, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence64 = strComparableMap59.get((java.lang.Object) true);
        int int65 = strComparableMap59.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection66 = strComparableMap59.values();
        boolean boolean67 = strComparableMap52.containsValue((java.lang.Object) strComparableMap59);
        boolean boolean68 = strComparableMap47.equals((java.lang.Object) strComparableMap59);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable71 = null;
        java.lang.CharSequence charSequence73 = strComparableMap70.putIfAbsent(strComparable71, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence75 = strComparableMap70.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap77 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable78 = null;
        java.lang.CharSequence charSequence80 = strComparableMap77.putIfAbsent(strComparable78, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence82 = strComparableMap77.get((java.lang.Object) true);
        int int83 = strComparableMap77.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet84 = strComparableMap77.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap88 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean89 = strComparableMap77.equals((java.lang.Object) 0);
        strComparableMap70.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap77);
        boolean boolean91 = strComparableMap47.containsValue((java.lang.Object) strComparableMap70);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap92 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap47);
        boolean boolean96 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence97 = strComparableMap19.get((java.lang.Object) "");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "" + "'", charSequence28, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{null=}");
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertNull(charSequence82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(strComparableSet84);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(charSequence97);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.lang.reflect.GenericDeclaration> constantDescMap3 = new java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.lang.reflect.GenericDeclaration>((int) 'a', (float) (short) 0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence16 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, hi!=hi!}", (java.lang.CharSequence) "{null=, {null=, =}={null=}}");
        boolean boolean20 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{{null=}={null=, =}}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap21.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean28 = strComparableMap9.remove((java.lang.Object) strComparableMap19, (java.lang.Object) "hi!");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        boolean boolean30 = strComparableMap19.isEmpty();
        strComparableMap19.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        int int13 = strComparableMap7.size();
        java.lang.CharSequence charSequence15 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap7, (java.lang.CharSequence) "hi!");
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean21 = strComparableMap20.isEmpty();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        boolean boolean29 = strComparableMap24.containsValue((java.lang.Object) (short) 100);
        int int30 = strComparableMap24.size();
        java.lang.CharSequence charSequence32 = strComparableMap18.getOrDefault((java.lang.Object) strComparableMap24, (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable35 = null;
        java.lang.CharSequence charSequence37 = strComparableMap34.putIfAbsent(strComparable35, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence39 = strComparableMap34.get((java.lang.Object) true);
        java.lang.Object obj40 = strComparableMap34.clone();
        java.lang.CharSequence charSequence43 = strComparableMap34.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj44 = null;
        java.lang.CharSequence charSequence45 = strComparableMap34.get(obj44);
        strComparableMap34.clear();
        boolean boolean47 = strComparableMap24.containsKey((java.lang.Object) strComparableMap34);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap24);
        boolean boolean49 = strComparableMap1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{null=}");
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.lang.CharSequence charSequence18 = strComparableMap1.get((java.lang.Object) 'a');
        java.lang.CharSequence charSequence21 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, hi!=hi!}");
        boolean boolean25 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean35 = strComparableMap34.isEmpty();
        java.lang.Object obj36 = strComparableMap34.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection37 = strComparableMap34.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        boolean boolean44 = strComparableMap39.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        int int52 = strComparableMap46.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection53 = strComparableMap46.values();
        boolean boolean54 = strComparableMap39.containsValue((java.lang.Object) strComparableMap46);
        boolean boolean55 = strComparableMap34.equals((java.lang.Object) strComparableMap46);
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap34);
        boolean boolean57 = strComparableMap34.isEmpty();
        java.lang.CharSequence charSequence60 = strComparableMap34.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable63 = null;
        java.lang.CharSequence charSequence65 = strComparableMap62.putIfAbsent(strComparable63, (java.lang.CharSequence) "");
        boolean boolean67 = strComparableMap62.containsValue((java.lang.Object) (short) 100);
        int int68 = strComparableMap62.size();
        boolean boolean69 = strComparableMap62.isEmpty();
        java.lang.CharSequence charSequence71 = strComparableMap34.getOrDefault((java.lang.Object) strComparableMap62, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence73 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap62, (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence76 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, {null=, =}={null=}}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "{null=, =}" + "'", charSequence21, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection37);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + charSequence71 + "' != '" + "" + "'", charSequence71, "");
        org.junit.Assert.assertEquals("'" + charSequence73 + "' != '" + "{null=, =}" + "'", charSequence73, "{null=, =}");
        org.junit.Assert.assertNull(charSequence76);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        boolean boolean14 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.CharSequence charSequence26 = strComparableMap2.get((java.lang.Object) strComparableMap22);
        boolean boolean27 = strComparableMap22.isEmpty();
        strComparableMap22.clear();
        java.lang.Object obj29 = strComparableMap22.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) (short) 10);
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection19 = strComparableMap18.values();
        strComparableMap18.clear();
        boolean boolean21 = strComparableMap1.containsKey((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNotNull(charSequenceCollection19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj13 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence16 = strComparableMap1.get((java.lang.Object) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence23 = strComparableMap20.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap20.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean29 = strComparableMap28.isEmpty();
        strComparableMap26.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        boolean boolean37 = strComparableMap32.containsValue((java.lang.Object) (short) 100);
        int int38 = strComparableMap32.size();
        java.lang.CharSequence charSequence40 = strComparableMap26.getOrDefault((java.lang.Object) strComparableMap32, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass41 = strComparableMap32.getClass();
        java.lang.CharSequence charSequence43 = strComparableMap20.getOrDefault((java.lang.Object) strComparableMap32, (java.lang.CharSequence) "{}");
        java.lang.CharSequence charSequence44 = strComparableMap1.get((java.lang.Object) "{}");
        java.lang.CharSequence charSequence47 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=, =}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "{}" + "'", charSequence43, "{}");
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "" + "'", charSequence47, "");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean6 = strComparableMap5.isEmpty();
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet8 = strComparableMap5.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection9 = strComparableMap5.values();
        boolean boolean10 = strComparableMap1.containsKey((java.lang.Object) strComparableMap5);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap13.get((java.lang.Object) true);
        int int19 = strComparableMap13.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap13.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence28 = strComparableMap22.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable31 = null;
        java.lang.CharSequence charSequence33 = strComparableMap30.putIfAbsent(strComparable31, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap30.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet36 = strComparableMap30.entrySet();
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap30);
        java.lang.CharSequence charSequence39 = strComparableMap13.getOrDefault((java.lang.Object) strComparableMap30, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int42 = strComparableMap41.size();
        boolean boolean43 = strComparableMap41.isEmpty();
        int int44 = strComparableMap41.size();
        java.lang.CharSequence charSequence47 = strComparableMap41.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.CharSequence charSequence50 = strComparableMap41.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        boolean boolean57 = strComparableMap52.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence60 = strComparableMap52.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean62 = strComparableMap52.containsKey((java.lang.Object) 1);
        strComparableMap41.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        boolean boolean65 = strComparableMap5.remove((java.lang.Object) "{null=}", (java.lang.Object) strComparableMap52);
        strComparableMap52.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet8);
        org.junit.Assert.assertNotNull(charSequenceCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNotNull(strComparableEntrySet36);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "{null=, =}" + "'", charSequence39, "{null=, =}");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence34 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj35 = null;
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.lang.CharSequence charSequence41 = strComparableMap37.remove((java.lang.Object) true);
        boolean boolean45 = strComparableMap37.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap1.remove(obj35, (java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap48.get((java.lang.Object) true);
        java.lang.Object obj54 = strComparableMap48.clone();
        java.lang.CharSequence charSequence57 = strComparableMap48.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj58 = null;
        java.lang.CharSequence charSequence59 = strComparableMap48.get(obj58);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean64 = strComparableMap63.isEmpty();
        strComparableMap61.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap63);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet66 = strComparableMap63.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection67 = strComparableMap63.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet68 = strComparableMap63.keySet();
        boolean boolean69 = strComparableMap48.equals((java.lang.Object) strComparableMap63);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet71 = strComparableMap48.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{null=}");
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "" + "'", charSequence59, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet66);
        org.junit.Assert.assertNotNull(charSequenceCollection67);
        org.junit.Assert.assertNotNull(strComparableSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strComparableSet71);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet6 = strComparableMap3.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection7 = strComparableMap3.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap3.keySet();
        java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>> charSequenceIterableMap9 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>>();
        java.lang.CharSequence charSequence10 = strComparableMap3.remove((java.lang.Object) charSequenceIterableMap9);
        java.lang.Object obj11 = strComparableMap3.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int14 = strComparableMap13.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        int int20 = strComparableMap18.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet21 = strComparableMap18.keySet();
        boolean boolean22 = strComparableMap3.equals((java.lang.Object) strComparableSet21);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet6);
        org.junit.Assert.assertNotNull(charSequenceCollection7);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "{}");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(strComparableSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = strComparableMap17.get((java.lang.Object) true);
        java.lang.Object obj23 = strComparableMap17.clone();
        java.lang.CharSequence charSequence26 = strComparableMap17.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj27 = null;
        java.lang.CharSequence charSequence28 = strComparableMap17.get(obj27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean33 = strComparableMap32.isEmpty();
        strComparableMap30.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet35 = strComparableMap32.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection36 = strComparableMap32.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet37 = strComparableMap32.keySet();
        boolean boolean38 = strComparableMap17.equals((java.lang.Object) strComparableMap32);
        java.lang.String str39 = strComparableMap17.toString();
        java.lang.CharSequence charSequence42 = strComparableMap17.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean47 = strComparableMap46.isEmpty();
        strComparableMap44.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet49 = strComparableMap46.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        boolean boolean55 = strComparableMap46.equals((java.lang.Object) charSequence54);
        boolean boolean56 = strComparableMap11.remove((java.lang.Object) "{null=, =}", (java.lang.Object) charSequence54);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        java.lang.CharSequence charSequence61 = strComparableMap58.putIfAbsent(strComparable59, (java.lang.CharSequence) "");
        boolean boolean63 = strComparableMap58.containsValue((java.lang.Object) (short) 100);
        int int64 = strComparableMap58.size();
        boolean boolean65 = strComparableMap58.isEmpty();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection66 = strComparableMap58.values();
        boolean boolean68 = strComparableMap58.containsKey((java.lang.Object) (short) -1);
        boolean boolean69 = strComparableMap58.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap73 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet74 = strComparableMap73.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap76 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean77 = strComparableMap76.isEmpty();
        java.lang.Object obj78 = strComparableMap76.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection79 = strComparableMap76.values();
        strComparableMap73.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap76);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet81 = strComparableMap76.entrySet();
        boolean boolean82 = strComparableMap11.remove((java.lang.Object) strComparableMap58, (java.lang.Object) strComparableMap76);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap84 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap86 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean87 = strComparableMap86.isEmpty();
        strComparableMap84.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap86);
        boolean boolean92 = strComparableMap86.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "hi!");
        strComparableMap11.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap86);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{null=}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "" + "'", charSequence28, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet35);
        org.junit.Assert.assertNotNull(charSequenceCollection36);
        org.junit.Assert.assertNotNull(strComparableSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{null=, =}" + "'", str39, "{null=, =}");
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet49);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection79);
        org.junit.Assert.assertNotNull(strComparableEntrySet81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap12.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet26 = strComparableMap20.entrySet();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap29.values();
        strComparableMap29.clear();
        boolean boolean32 = strComparableMap12.containsKey((java.lang.Object) strComparableMap29);
        java.lang.CharSequence charSequence35 = strComparableMap29.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        boolean boolean43 = strComparableMap38.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence46 = strComparableMap38.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean49 = strComparableMap48.isEmpty();
        java.lang.Object obj50 = strComparableMap48.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection51 = strComparableMap48.values();
        strComparableMap38.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        java.lang.String str53 = strComparableMap38.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean56 = strComparableMap55.isEmpty();
        java.lang.Object obj57 = strComparableMap55.clone();
        java.lang.CharSequence charSequence59 = strComparableMap55.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence61 = strComparableMap55.get((java.lang.Object) 100L);
        boolean boolean62 = strComparableMap38.containsValue((java.lang.Object) strComparableMap55);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable65 = null;
        java.lang.CharSequence charSequence67 = strComparableMap64.putIfAbsent(strComparable65, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence69 = strComparableMap64.get((java.lang.Object) true);
        int int70 = strComparableMap64.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet71 = strComparableMap64.keySet();
        boolean boolean72 = strComparableMap38.equals((java.lang.Object) strComparableMap64);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap74 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable75 = null;
        java.lang.CharSequence charSequence77 = strComparableMap74.putIfAbsent(strComparable75, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence79 = strComparableMap74.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet80 = strComparableMap74.entrySet();
        java.lang.String str81 = strComparableMap74.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap83 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean84 = strComparableMap83.isEmpty();
        java.lang.Object obj85 = strComparableMap83.clone();
        java.lang.CharSequence charSequence87 = strComparableMap83.remove((java.lang.Object) true);
        boolean boolean91 = strComparableMap83.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean92 = strComparableMap74.equals((java.lang.Object) "");
        java.lang.CharSequence charSequence93 = strComparableMap38.remove((java.lang.Object) strComparableMap74);
        java.lang.CharSequence charSequence96 = strComparableMap38.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection97 = strComparableMap38.values();
        java.lang.CharSequence charSequence98 = strComparableMap29.get((java.lang.Object) charSequenceCollection97);
        java.lang.Class<?> wildcardClass99 = charSequenceCollection97.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNotNull(strComparableEntrySet26);
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{null=, =}" + "'", str53, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{}");
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(strComparableSet71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertNotNull(strComparableEntrySet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "{null=}" + "'", str81, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "{}");
        org.junit.Assert.assertNull(charSequence87);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(charSequence93);
        org.junit.Assert.assertEquals("'" + charSequence96 + "' != '" + "" + "'", charSequence96, "");
        org.junit.Assert.assertNotNull(charSequenceCollection97);
        org.junit.Assert.assertNull(charSequence98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        boolean boolean9 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{{null=, =}={}}", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet11 = strComparableMap1.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNotNull(strComparableEntrySet11);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap12.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet26 = strComparableMap20.entrySet();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap29.values();
        strComparableMap29.clear();
        boolean boolean32 = strComparableMap12.containsKey((java.lang.Object) strComparableMap29);
        java.lang.CharSequence charSequence35 = strComparableMap29.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.lang.CharSequence charSequence39 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=, hi!=hi!}", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap48.get((java.lang.Object) true);
        int int54 = strComparableMap48.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection55 = strComparableMap48.values();
        boolean boolean56 = strComparableMap41.containsValue((java.lang.Object) strComparableMap48);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        java.lang.CharSequence charSequence61 = strComparableMap58.putIfAbsent(strComparable59, (java.lang.CharSequence) "");
        boolean boolean63 = strComparableMap58.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence66 = strComparableMap58.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence69 = strComparableMap58.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = strComparableMap58.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence75 = strComparableMap58.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean76 = strComparableMap41.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap79 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence81 = strComparableMap41.getOrDefault((java.lang.Object) strComparableMap79, (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence82 = strComparableMap1.get((java.lang.Object) charSequence81);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNotNull(strComparableEntrySet26);
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "hi!" + "'", charSequence69, "hi!");
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + charSequence81 + "' != '" + "{null=}" + "'", charSequence81, "{null=}");
        org.junit.Assert.assertNull(charSequence82);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.lang.CharSequence charSequence10 = strComparableMap6.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence12 = strComparableMap6.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence14 = strComparableMap1.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        boolean boolean21 = strComparableMap16.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence24 = strComparableMap16.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean27 = strComparableMap26.isEmpty();
        java.lang.Object obj28 = strComparableMap26.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection29 = strComparableMap26.values();
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean37 = strComparableMap33.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = strComparableMap33.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int41 = strComparableMap33.size();
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap33);
        boolean boolean43 = strComparableMap1.containsValue((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int46 = strComparableMap45.size();
        boolean boolean47 = strComparableMap45.isEmpty();
        java.lang.CharSequence charSequence49 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap45, (java.lang.CharSequence) "{null=, {null=, =}={null=}}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "{null=, {null=, =}={null=}}" + "'", charSequence49, "{null=, {null=, =}={null=}}");
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap10.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap18.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable36 = null;
        java.lang.CharSequence charSequence38 = strComparableMap35.putIfAbsent(strComparable36, (java.lang.CharSequence) "");
        boolean boolean40 = strComparableMap35.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence43 = strComparableMap35.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap47.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean54 = strComparableMap35.remove((java.lang.Object) strComparableMap45, (java.lang.Object) "hi!");
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap45);
        boolean boolean56 = strComparableMap45.isEmpty();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap45);
        boolean boolean58 = strComparableMap1.containsValue((java.lang.Object) strComparableMap45);
        java.lang.String str59 = strComparableMap45.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> annotatedElementMap1 = new java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>(10);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) (short) 100, true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(1, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        strComparableMap7.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence20 = strComparableMap17.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet21 = strComparableMap17.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable24 = null;
        java.lang.CharSequence charSequence26 = strComparableMap23.putIfAbsent(strComparable24, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence28 = strComparableMap23.get((java.lang.Object) true);
        java.lang.Object obj29 = strComparableMap23.clone();
        java.lang.CharSequence charSequence32 = strComparableMap23.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj33 = null;
        java.lang.CharSequence charSequence34 = strComparableMap23.get(obj33);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean39 = strComparableMap38.isEmpty();
        strComparableMap36.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet41 = strComparableMap38.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection42 = strComparableMap38.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet43 = strComparableMap38.keySet();
        boolean boolean44 = strComparableMap23.equals((java.lang.Object) strComparableMap38);
        java.lang.String str45 = strComparableMap23.toString();
        java.lang.CharSequence charSequence48 = strComparableMap23.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap50.get((java.lang.Object) true);
        java.lang.Object obj56 = strComparableMap50.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        java.lang.CharSequence charSequence61 = strComparableMap58.putIfAbsent(strComparable59, (java.lang.CharSequence) "");
        boolean boolean63 = strComparableMap58.containsValue((java.lang.Object) (short) 100);
        int int64 = strComparableMap58.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence67 = strComparableMap58.getOrDefault((java.lang.Object) strComparableMap65, (java.lang.CharSequence) "");
        java.lang.String str68 = strComparableMap58.toString();
        boolean boolean69 = strComparableMap23.remove(obj56, (java.lang.Object) str68);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable73 = null;
        java.lang.CharSequence charSequence75 = strComparableMap72.putIfAbsent(strComparable73, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence77 = strComparableMap72.get((java.lang.Object) true);
        int int78 = strComparableMap72.size();
        java.lang.CharSequence charSequence80 = strComparableMap72.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence83 = strComparableMap72.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj84 = strComparableMap72.clone();
        boolean boolean85 = strComparableMap17.remove((java.lang.Object) strComparableMap70, (java.lang.Object) strComparableMap72);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet86 = strComparableMap70.keySet();
        boolean boolean87 = strComparableMap9.containsValue((java.lang.Object) strComparableMap70);
        java.lang.CharSequence charSequence88 = strComparableMap3.get((java.lang.Object) strComparableMap70);
        boolean boolean89 = strComparableMap70.isEmpty();
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNotNull(strComparableEntrySet21);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{null=}");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "" + "'", charSequence34, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet41);
        org.junit.Assert.assertNotNull(charSequenceCollection42);
        org.junit.Assert.assertNotNull(strComparableSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{null=, =}" + "'", str45, "{null=, =}");
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{null=}");
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "" + "'", charSequence67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "{null=}" + "'", str68, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertNull(charSequence83);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strComparableSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(charSequence88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap12.get((java.lang.Object) true);
        int int18 = strComparableMap12.size();
        java.lang.CharSequence charSequence20 = strComparableMap12.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence23 = strComparableMap12.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean24 = strComparableMap1.remove((java.lang.Object) (-1L), (java.lang.Object) strComparableMap12);
        int int25 = strComparableMap12.size();
        boolean boolean26 = strComparableMap12.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable12 = null;
        java.lang.CharSequence charSequence14 = strComparableMap11.putIfAbsent(strComparable12, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap11.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap19.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap19.entrySet();
        strComparableMap11.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        int int34 = strComparableMap28.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence44 = strComparableMap36.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence54 = strComparableMap48.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean55 = strComparableMap36.remove((java.lang.Object) strComparableMap46, (java.lang.Object) "hi!");
        strComparableMap28.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        boolean boolean57 = strComparableMap46.isEmpty();
        strComparableMap11.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet59 = strComparableMap46.entrySet();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet60 = strComparableMap46.keySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet62 = strComparableMap46.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet59);
        org.junit.Assert.assertNotNull(strComparableSet60);
        org.junit.Assert.assertNotNull(strComparableSet62);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(100, (float) (byte) 10);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean31 = strComparableMap8.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean36 = strComparableMap35.isEmpty();
        strComparableMap33.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap35);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet38 = strComparableMap35.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection39 = strComparableMap35.values();
        boolean boolean40 = strComparableMap8.containsValue((java.lang.Object) charSequenceCollection39);
        boolean boolean41 = strComparableMap8.isEmpty();
        boolean boolean45 = strComparableMap8.replace((java.lang.Comparable<java.lang.String>) "{{null=, =}={}}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet38);
        org.junit.Assert.assertNotNull(charSequenceCollection39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence21 = strComparableMap13.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean24 = strComparableMap23.isEmpty();
        java.lang.Object obj25 = strComparableMap23.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap23.values();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.lang.String str28 = strComparableMap13.toString();
        boolean boolean29 = strComparableMap2.remove((java.lang.Object) strComparableMap11, (java.lang.Object) str28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet37 = strComparableMap31.entrySet();
        java.lang.String str38 = strComparableMap31.toString();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection39 = strComparableMap31.values();
        boolean boolean40 = strComparableMap2.equals((java.lang.Object) strComparableMap31);
        java.lang.String str41 = strComparableMap2.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{null=, =}" + "'", str28, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNotNull(strComparableEntrySet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=}" + "'", str38, "{null=}");
        org.junit.Assert.assertNotNull(charSequenceCollection39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection13 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = strComparableMap15.get((java.lang.Object) true);
        int int21 = strComparableMap15.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap15.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap24.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap32.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet38 = strComparableMap32.entrySet();
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.lang.CharSequence charSequence41 = strComparableMap15.getOrDefault((java.lang.Object) strComparableMap32, (java.lang.CharSequence) "{null=, =}");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap15);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap15.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet44 = strComparableMap15.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(1, (float) 'a', true);
        strComparableMap15.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        java.lang.CharSequence charSequence52 = strComparableMap48.put((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{{null=}={null=, =}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNotNull(strComparableEntrySet38);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=, =}" + "'", charSequence41, "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertNotNull(strComparableEntrySet44);
        org.junit.Assert.assertNull(charSequence52);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        java.util.LinkedHashMap<java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.io.Serializable> strComparableMapMap0 = new java.util.LinkedHashMap<java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.io.Serializable>();
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet10 = strComparableMap2.keySet();
        java.lang.CharSequence charSequence13 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap2.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.lang.Object obj17 = null;
        boolean boolean18 = strComparableMap2.containsValue(obj17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        boolean boolean25 = strComparableMap20.containsValue((java.lang.Object) (short) 100);
        int int26 = strComparableMap20.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        boolean boolean33 = strComparableMap28.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence36 = strComparableMap28.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean39 = strComparableMap38.isEmpty();
        java.lang.Object obj40 = strComparableMap38.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection41 = strComparableMap38.values();
        strComparableMap28.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean49 = strComparableMap45.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = strComparableMap45.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int53 = strComparableMap45.size();
        strComparableMap28.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap45);
        java.lang.CharSequence charSequence55 = strComparableMap20.get((java.lang.Object) strComparableMap45);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet56 = strComparableMap45.entrySet();
        java.lang.CharSequence charSequence57 = strComparableMap2.remove((java.lang.Object) strComparableMap45);
        boolean boolean58 = strComparableMap45.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(strComparableSet10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection41);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNotNull(strComparableEntrySet56);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap13.get((java.lang.Object) true);
        int int19 = strComparableMap13.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap13.values();
        boolean boolean21 = strComparableMap6.containsValue((java.lang.Object) strComparableMap13);
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap13);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap24.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        int int37 = strComparableMap31.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet38 = strComparableMap31.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean43 = strComparableMap31.equals((java.lang.Object) 0);
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        boolean boolean45 = strComparableMap1.containsValue((java.lang.Object) strComparableMap24);
        java.lang.Object obj46 = null;
        boolean boolean47 = strComparableMap24.equals(obj46);
        java.lang.Object obj48 = null;
        boolean boolean49 = strComparableMap24.equals(obj48);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(strComparableSet38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap21.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean28 = strComparableMap9.remove((java.lang.Object) strComparableMap19, (java.lang.Object) "hi!");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        int int37 = strComparableMap31.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        boolean boolean44 = strComparableMap39.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence47 = strComparableMap39.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence57 = strComparableMap51.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean58 = strComparableMap39.remove((java.lang.Object) strComparableMap49, (java.lang.Object) "hi!");
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        strComparableMap19.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        java.lang.CharSequence charSequence63 = strComparableMap19.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection66 = strComparableMap65.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet67 = strComparableMap65.entrySet();
        java.util.LinkedHashMap<java.lang.CharSequence, java.util.Collection<java.lang.CharSequence>> charSequenceMap71 = new java.util.LinkedHashMap<java.lang.CharSequence, java.util.Collection<java.lang.CharSequence>>((int) (short) 100, 1.0f, true);
        boolean boolean72 = strComparableMap19.remove((java.lang.Object) strComparableMap65, (java.lang.Object) (short) 100);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNotNull(charSequenceCollection66);
        org.junit.Assert.assertNotNull(strComparableEntrySet67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap1.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet17 = strComparableMap1.entrySet();
        java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Cloneable> charSequenceIterableMap20 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Cloneable>(2, (float) 2);
        boolean boolean21 = strComparableMap1.equals((java.lang.Object) 2);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNotNull(strComparableEntrySet17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        java.util.LinkedHashMap<java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>> strComparableMapMap1 = new java.util.LinkedHashMap<java.util.AbstractMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>>((int) (byte) 1);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = strComparableMap13.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean20 = strComparableMap1.remove((java.lang.Object) strComparableMap11, (java.lang.Object) "hi!");
        java.lang.CharSequence charSequence23 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.lang.String str24 = strComparableMap1.toString();
        boolean boolean25 = strComparableMap1.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{null=, =, hi!=hi!}" + "'", str24, "{null=, =, hi!=hi!}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap12.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet26 = strComparableMap20.entrySet();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.lang.CharSequence charSequence29 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap20, (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence32 = strComparableMap20.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet33 = strComparableMap20.keySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNotNull(strComparableEntrySet26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "{null=, =}" + "'", charSequence29, "{null=, =}");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNotNull(strComparableSet33);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.invoke.TypeDescriptor> cloneableMap0 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.invoke.TypeDescriptor>();
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        strComparableMap15.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean57 = strComparableMap56.isEmpty();
        strComparableMap54.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap56);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable61 = null;
        java.lang.CharSequence charSequence63 = strComparableMap60.putIfAbsent(strComparable61, (java.lang.CharSequence) "");
        boolean boolean65 = strComparableMap60.containsValue((java.lang.Object) (short) 100);
        int int66 = strComparableMap60.size();
        java.lang.CharSequence charSequence68 = strComparableMap54.getOrDefault((java.lang.Object) strComparableMap60, (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable71 = null;
        java.lang.CharSequence charSequence73 = strComparableMap70.putIfAbsent(strComparable71, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence75 = strComparableMap70.get((java.lang.Object) true);
        java.lang.Object obj76 = strComparableMap70.clone();
        java.lang.CharSequence charSequence79 = strComparableMap70.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj80 = null;
        java.lang.CharSequence charSequence81 = strComparableMap70.get(obj80);
        strComparableMap70.clear();
        boolean boolean83 = strComparableMap60.containsKey((java.lang.Object) strComparableMap70);
        java.lang.CharSequence charSequence84 = strComparableMap15.get((java.lang.Object) boolean83);
        java.util.LinkedHashMap<java.lang.Object, java.lang.Iterable<java.lang.CharSequence>> objMap88 = new java.util.LinkedHashMap<java.lang.Object, java.lang.Iterable<java.lang.CharSequence>>(2, (float) 'a', true);
        java.lang.CharSequence charSequence89 = strComparableMap15.get((java.lang.Object) 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "{null=}");
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertEquals("'" + charSequence81 + "' != '" + "" + "'", charSequence81, "");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(charSequence84);
        org.junit.Assert.assertNull(charSequence89);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence14 = strComparableMap6.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap18.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean25 = strComparableMap6.remove((java.lang.Object) strComparableMap16, (java.lang.Object) "hi!");
        boolean boolean26 = strComparableMap1.containsValue((java.lang.Object) boolean25);
        java.lang.CharSequence charSequence28 = null;
        java.lang.CharSequence charSequence29 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", charSequence28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        boolean boolean36 = strComparableMap31.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence39 = strComparableMap31.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean42 = strComparableMap41.isEmpty();
        java.lang.Object obj43 = strComparableMap41.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection44 = strComparableMap41.values();
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap41);
        java.lang.String str46 = strComparableMap31.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean49 = strComparableMap48.isEmpty();
        java.lang.Object obj50 = strComparableMap48.clone();
        java.lang.CharSequence charSequence52 = strComparableMap48.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence54 = strComparableMap48.get((java.lang.Object) 100L);
        boolean boolean55 = strComparableMap31.containsValue((java.lang.Object) strComparableMap48);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable58 = null;
        java.lang.CharSequence charSequence60 = strComparableMap57.putIfAbsent(strComparable58, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence62 = strComparableMap57.get((java.lang.Object) true);
        int int63 = strComparableMap57.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet64 = strComparableMap57.keySet();
        boolean boolean65 = strComparableMap31.equals((java.lang.Object) strComparableMap57);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable68 = null;
        java.lang.CharSequence charSequence70 = strComparableMap67.putIfAbsent(strComparable68, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence72 = strComparableMap67.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet73 = strComparableMap67.entrySet();
        java.lang.String str74 = strComparableMap67.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap76 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean77 = strComparableMap76.isEmpty();
        java.lang.Object obj78 = strComparableMap76.clone();
        java.lang.CharSequence charSequence80 = strComparableMap76.remove((java.lang.Object) true);
        boolean boolean84 = strComparableMap76.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean85 = strComparableMap67.equals((java.lang.Object) "");
        java.lang.CharSequence charSequence86 = strComparableMap31.remove((java.lang.Object) strComparableMap67);
        java.lang.CharSequence charSequence89 = strComparableMap31.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection90 = strComparableMap31.values();
        java.lang.CharSequence charSequence91 = strComparableMap1.remove((java.lang.Object) strComparableMap31);
        boolean boolean92 = strComparableMap1.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{null=, =}" + "'", str46, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(strComparableSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNotNull(strComparableEntrySet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{null=}" + "'", str74, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "{}");
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(charSequence86);
        org.junit.Assert.assertEquals("'" + charSequence89 + "' != '" + "" + "'", charSequence89, "");
        org.junit.Assert.assertNotNull(charSequenceCollection90);
        org.junit.Assert.assertNull(charSequence91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean31 = strComparableMap8.isEmpty();
        java.lang.CharSequence charSequence34 = strComparableMap8.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        boolean boolean43 = strComparableMap36.isEmpty();
        java.lang.CharSequence charSequence45 = strComparableMap8.getOrDefault((java.lang.Object) strComparableMap36, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence48 = strComparableMap36.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean49 = strComparableMap36.isEmpty();
        boolean boolean50 = strComparableMap36.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        boolean boolean14 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.CharSequence charSequence26 = strComparableMap2.get((java.lang.Object) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean33 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet37 = strComparableMap29.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap39.get((java.lang.Object) true);
        int int45 = strComparableMap39.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap47.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = strComparableMap55.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet61 = strComparableMap55.entrySet();
        strComparableMap47.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap55);
        java.lang.Class<?> wildcardClass63 = strComparableMap55.getClass();
        boolean boolean64 = strComparableMap39.containsKey((java.lang.Object) wildcardClass63);
        boolean boolean65 = strComparableMap29.equals((java.lang.Object) strComparableMap39);
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean69 = strComparableMap68.isEmpty();
        java.lang.Object obj70 = strComparableMap68.clone();
        java.lang.CharSequence charSequence72 = strComparableMap68.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence74 = strComparableMap68.get((java.lang.Object) 100L);
        java.lang.String str75 = strComparableMap68.toString();
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.Iterable<java.lang.CharSequence>> cloneableMap76 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.Iterable<java.lang.CharSequence>>();
        boolean boolean77 = strComparableMap22.remove((java.lang.Object) str75, (java.lang.Object) cloneableMap76);
        java.lang.CharSequence charSequence80 = strComparableMap22.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNotNull(strComparableSet37);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNotNull(strComparableEntrySet61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{}");
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "{}" + "'", str75, "{}");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(charSequence80);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        int int13 = strComparableMap7.size();
        java.lang.CharSequence charSequence15 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap7, (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = strComparableMap17.get((java.lang.Object) true);
        java.lang.Object obj23 = strComparableMap17.clone();
        java.lang.CharSequence charSequence26 = strComparableMap17.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj27 = null;
        java.lang.CharSequence charSequence28 = strComparableMap17.get(obj27);
        strComparableMap17.clear();
        boolean boolean30 = strComparableMap7.containsKey((java.lang.Object) strComparableMap17);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection31 = strComparableMap17.values();
        boolean boolean32 = strComparableMap17.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{null=}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "" + "'", charSequence28, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        System.out.println("----------");
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        System.out.println("--------");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        System.out.println("**************");
        System.out.println(strComparableMap1);
        System.out.println(strComparableMap1.values());
        System.out.println("**************");

        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.lang.Object obj43 = strComparableMap37.clone();
        java.lang.String str44 = strComparableMap37.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        int int52 = strComparableMap46.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = strComparableMap54.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable63 = null;
        java.lang.CharSequence charSequence65 = strComparableMap62.putIfAbsent(strComparable63, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence67 = strComparableMap62.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet68 = strComparableMap62.entrySet();
        strComparableMap54.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        java.lang.Class<?> wildcardClass70 = strComparableMap62.getClass();
        boolean boolean71 = strComparableMap46.containsKey((java.lang.Object) wildcardClass70);
        boolean boolean72 = strComparableMap37.containsValue((java.lang.Object) strComparableMap46);
        java.lang.CharSequence charSequence73 = strComparableMap27.get((java.lang.Object) strComparableMap46);
        java.lang.String str74 = strComparableMap46.toString();
        boolean boolean75 = strComparableMap46.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet76 = strComparableMap46.entrySet();
        java.lang.CharSequence charSequence79 = null;
        boolean boolean80 = strComparableMap46.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=, =, hi!=hi!}", charSequence79);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{null=}");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{null=}" + "'", str44, "{null=}");
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNotNull(strComparableEntrySet68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{null=}" + "'", str74, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(2, (float) 10);
        java.lang.Object obj3 = null;
        boolean boolean4 = strComparableMap2.containsValue(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap12.get((java.lang.Object) true);
        int int18 = strComparableMap12.size();
        java.lang.CharSequence charSequence20 = strComparableMap12.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence23 = strComparableMap12.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean24 = strComparableMap1.remove((java.lang.Object) (-1L), (java.lang.Object) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.Class<?>> cloneableMap28 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.Class<?>>((int) (byte) 10, (float) 1, true);
        java.lang.CharSequence charSequence30 = strComparableMap12.getOrDefault((java.lang.Object) cloneableMap28, (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence38 = strComparableMap32.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable41 = null;
        java.lang.CharSequence charSequence43 = strComparableMap40.putIfAbsent(strComparable41, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence45 = strComparableMap40.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet46 = strComparableMap40.entrySet();
        strComparableMap32.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap40);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap49.values();
        strComparableMap49.clear();
        boolean boolean52 = strComparableMap32.containsKey((java.lang.Object) strComparableMap49);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        boolean boolean59 = strComparableMap54.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence62 = strComparableMap54.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean65 = strComparableMap64.isEmpty();
        java.lang.Object obj66 = strComparableMap64.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection67 = strComparableMap64.values();
        strComparableMap54.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap64);
        java.lang.String str69 = strComparableMap54.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap71 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean72 = strComparableMap71.isEmpty();
        java.lang.Object obj73 = strComparableMap71.clone();
        java.lang.CharSequence charSequence75 = strComparableMap71.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence77 = strComparableMap71.get((java.lang.Object) 100L);
        boolean boolean78 = strComparableMap54.containsValue((java.lang.Object) strComparableMap71);
        boolean boolean82 = strComparableMap71.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "{null=}");
        strComparableMap71.clear();
        java.lang.CharSequence charSequence84 = strComparableMap32.remove((java.lang.Object) strComparableMap71);
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "{null=, =, hi!=hi!}" + "'", charSequence30, "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertNotNull(strComparableEntrySet46);
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "{null=, =}" + "'", str69, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "{}");
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(charSequence84);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) -1, 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        boolean boolean17 = strComparableMap1.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        boolean boolean24 = strComparableMap19.containsValue((java.lang.Object) (short) 100);
        int int25 = strComparableMap19.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence28 = strComparableMap19.getOrDefault((java.lang.Object) strComparableMap26, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationMap31 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>(2, (float) 'a');
        boolean boolean32 = strComparableMap19.equals((java.lang.Object) 'a');
        java.lang.Object obj33 = strComparableMap19.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable36 = null;
        java.lang.CharSequence charSequence38 = strComparableMap35.putIfAbsent(strComparable36, (java.lang.CharSequence) "");
        boolean boolean40 = strComparableMap35.containsValue((java.lang.Object) (short) 100);
        int int41 = strComparableMap35.size();
        boolean boolean42 = strComparableMap35.isEmpty();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection43 = strComparableMap35.values();
        boolean boolean44 = strComparableMap19.containsKey((java.lang.Object) charSequenceCollection43);
        boolean boolean45 = strComparableMap1.containsKey((java.lang.Object) strComparableMap19);
        java.lang.String str46 = strComparableMap1.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "" + "'", charSequence28, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{null=}");
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{null=}" + "'", str46, "{null=}");
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence14 = strComparableMap6.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap18.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean25 = strComparableMap6.remove((java.lang.Object) strComparableMap16, (java.lang.Object) "hi!");
        boolean boolean26 = strComparableMap1.containsValue((java.lang.Object) boolean25);
        java.lang.CharSequence charSequence29 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        java.lang.CharSequence charSequence41 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap38, (java.lang.CharSequence) "{}");
        java.lang.CharSequence charSequence44 = strComparableMap38.putIfAbsent((java.lang.Comparable<java.lang.String>) "{{null=, =}={}}", (java.lang.CharSequence) "{null=}");
        strComparableMap38.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{}" + "'", charSequence41, "{}");
        org.junit.Assert.assertNull(charSequence44);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.invoke.TypeDescriptor> genericDeclarationMap2 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.invoke.TypeDescriptor>(2, (float) 10L);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet6 = strComparableMap3.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection7 = strComparableMap3.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap3.keySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection9 = strComparableMap3.values();
        boolean boolean13 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, {null=, =}={null=}}", (java.lang.CharSequence) "{null=, {null=}={}}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet6);
        org.junit.Assert.assertNotNull(charSequenceCollection7);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertNotNull(charSequenceCollection9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        int int4 = strComparableMap3.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean15 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        boolean boolean27 = strComparableMap22.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence30 = strComparableMap22.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean33 = strComparableMap32.isEmpty();
        java.lang.Object obj34 = strComparableMap32.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap32.values();
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.lang.String str37 = strComparableMap22.toString();
        boolean boolean38 = strComparableMap11.remove((java.lang.Object) strComparableMap20, (java.lang.Object) str37);
        boolean boolean39 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence50 = strComparableMap41.getOrDefault((java.lang.Object) strComparableMap48, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean53 = strComparableMap52.isEmpty();
        java.lang.Object obj54 = strComparableMap52.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection55 = strComparableMap52.values();
        boolean boolean56 = strComparableMap20.remove((java.lang.Object) strComparableMap48, (java.lang.Object) strComparableMap52);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet57 = strComparableMap52.entrySet();
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean61 = strComparableMap60.isEmpty();
        java.lang.Object obj62 = strComparableMap60.clone();
        java.lang.CharSequence charSequence64 = strComparableMap60.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable67 = null;
        java.lang.CharSequence charSequence69 = strComparableMap66.putIfAbsent(strComparable67, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence71 = strComparableMap66.get((java.lang.Object) true);
        java.lang.Object obj72 = strComparableMap66.clone();
        java.lang.CharSequence charSequence75 = strComparableMap66.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj76 = null;
        java.lang.CharSequence charSequence77 = strComparableMap66.get(obj76);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap79 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap81 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean82 = strComparableMap81.isEmpty();
        strComparableMap79.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap81);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet84 = strComparableMap81.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection85 = strComparableMap81.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet86 = strComparableMap81.keySet();
        boolean boolean87 = strComparableMap66.equals((java.lang.Object) strComparableMap81);
        java.lang.String str88 = strComparableMap66.toString();
        boolean boolean89 = strComparableMap60.equals((java.lang.Object) strComparableMap66);
        java.lang.CharSequence charSequence91 = strComparableMap3.getOrDefault((java.lang.Object) strComparableMap66, (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection92 = strComparableMap3.values();
        java.lang.Class<?> wildcardClass93 = charSequenceCollection92.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{null=, =}" + "'", str37, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "" + "'", charSequence50, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "{null=}");
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "" + "'", charSequence77, "");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet84);
        org.junit.Assert.assertNotNull(charSequenceCollection85);
        org.junit.Assert.assertNotNull(strComparableSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "{null=, =}" + "'", str88, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "{null=, =, hi!=hi!}" + "'", charSequence91, "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNotNull(charSequenceCollection92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence45 = strComparableMap39.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean46 = strComparableMap27.remove((java.lang.Object) strComparableMap37, (java.lang.Object) "hi!");
        boolean boolean47 = strComparableMap1.containsKey((java.lang.Object) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap50.get((java.lang.Object) true);
        int int56 = strComparableMap50.size();
        java.lang.CharSequence charSequence58 = strComparableMap50.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence61 = strComparableMap50.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str62 = strComparableMap50.toString();
        java.lang.CharSequence charSequence63 = strComparableMap48.remove((java.lang.Object) strComparableMap50);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection64 = strComparableMap48.values();
        int int65 = strComparableMap48.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable68 = null;
        java.lang.CharSequence charSequence70 = strComparableMap67.putIfAbsent(strComparable68, (java.lang.CharSequence) "");
        boolean boolean72 = strComparableMap67.containsValue((java.lang.Object) (short) 100);
        int int73 = strComparableMap67.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap74 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence76 = strComparableMap67.getOrDefault((java.lang.Object) strComparableMap74, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationMap79 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>(2, (float) 'a');
        boolean boolean80 = strComparableMap67.equals((java.lang.Object) 'a');
        java.lang.Object obj81 = strComparableMap67.clone();
        strComparableMap48.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap67);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{null=, =}" + "'", str62, "{null=, =}");
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNotNull(charSequenceCollection64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "" + "'", charSequence76, "");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "{null=}");
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet3 = strComparableMap2.entrySet();
        java.lang.CharSequence charSequence5 = strComparableMap2.get((java.lang.Object) (-1.0d));
        boolean boolean6 = strComparableMap2.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.lang.CharSequence charSequence12 = strComparableMap8.remove((java.lang.Object) true);
        boolean boolean16 = strComparableMap8.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap2.getOrDefault((java.lang.Object) boolean16, (java.lang.CharSequence) "{{null=, =}={}}");
        org.junit.Assert.assertNotNull(strComparableEntrySet3);
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "{{null=, =}={}}" + "'", charSequence18, "{{null=, =}={}}");
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0, (float) 100L, true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet4 = strComparableMap3.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence11 = strComparableMap6.get((java.lang.Object) true);
        java.lang.Object obj12 = strComparableMap6.clone();
        java.lang.CharSequence charSequence15 = strComparableMap6.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str16 = strComparableMap6.toString();
        boolean boolean17 = strComparableMap3.equals((java.lang.Object) strComparableMap6);
        org.junit.Assert.assertNotNull(strComparableEntrySet4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{null=}");
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable12 = null;
        java.lang.CharSequence charSequence14 = strComparableMap11.putIfAbsent(strComparable12, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap11.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap19.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap19.entrySet();
        strComparableMap11.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        int int34 = strComparableMap28.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence44 = strComparableMap36.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence54 = strComparableMap48.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean55 = strComparableMap36.remove((java.lang.Object) strComparableMap46, (java.lang.Object) "hi!");
        strComparableMap28.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        boolean boolean57 = strComparableMap46.isEmpty();
        strComparableMap11.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet59 = strComparableMap46.entrySet();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet60 = strComparableMap46.keySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable64 = null;
        java.lang.CharSequence charSequence66 = strComparableMap63.putIfAbsent(strComparable64, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence68 = strComparableMap63.get((java.lang.Object) true);
        int int69 = strComparableMap63.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap71 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable72 = null;
        java.lang.CharSequence charSequence74 = strComparableMap71.putIfAbsent(strComparable72, (java.lang.CharSequence) "");
        boolean boolean76 = strComparableMap71.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence79 = strComparableMap71.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap81 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap83 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable84 = null;
        java.lang.CharSequence charSequence86 = strComparableMap83.putIfAbsent(strComparable84, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence89 = strComparableMap83.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean90 = strComparableMap71.remove((java.lang.Object) strComparableMap81, (java.lang.Object) "hi!");
        strComparableMap63.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap81);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet92 = strComparableMap81.keySet();
        java.lang.CharSequence charSequence94 = strComparableMap46.getOrDefault((java.lang.Object) strComparableSet92, (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet59);
        org.junit.Assert.assertNotNull(strComparableSet60);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertNull(charSequence86);
        org.junit.Assert.assertNull(charSequence89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strComparableSet92);
        org.junit.Assert.assertEquals("'" + charSequence94 + "' != '" + "hi!" + "'", charSequence94, "hi!");
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        boolean boolean9 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.CharSequence> cloneableMap12 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.CharSequence>((int) 'a', (float) (short) 100);
        boolean boolean13 = strComparableMap3.equals((java.lang.Object) cloneableMap12);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet14 = strComparableMap3.keySet();
        java.lang.CharSequence charSequence17 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strComparableSet14);
        org.junit.Assert.assertNull(charSequence17);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        boolean boolean17 = strComparableMap12.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence20 = strComparableMap12.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        java.lang.Object obj24 = strComparableMap22.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection25 = strComparableMap22.values();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean33 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int37 = strComparableMap29.size();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence43 = strComparableMap40.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean44 = strComparableMap29.equals((java.lang.Object) charSequence43);
        java.lang.CharSequence charSequence45 = strComparableMap1.get((java.lang.Object) strComparableMap29);
        boolean boolean49 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        java.lang.CharSequence charSequence52 = strComparableMap29.put((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(charSequence52);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) (byte) 10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap4 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable5 = null;
        java.lang.CharSequence charSequence7 = strComparableMap4.putIfAbsent(strComparable5, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence10 = strComparableMap4.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap12.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet18 = strComparableMap12.entrySet();
        strComparableMap4.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        strComparableMap2.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        int int22 = strComparableMap2.size();
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNotNull(strComparableEntrySet18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        strComparableMap1.clear();
        java.lang.Object obj14 = null;
        boolean boolean15 = strComparableMap1.equals(obj14);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean22 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.Object obj24 = strComparableMap18.clone();
        boolean boolean25 = strComparableMap1.containsKey(obj24);
        int int26 = strComparableMap1.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence6 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence9 = strComparableMap3.put((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "{null=}" + "'", charSequence9, "{null=}");
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence21 = strComparableMap13.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean24 = strComparableMap23.isEmpty();
        java.lang.Object obj25 = strComparableMap23.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap23.values();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.lang.String str28 = strComparableMap13.toString();
        boolean boolean29 = strComparableMap2.remove((java.lang.Object) strComparableMap11, (java.lang.Object) str28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        java.lang.Object obj33 = strComparableMap31.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection34 = strComparableMap31.values();
        java.lang.Class<?> wildcardClass35 = strComparableMap31.getClass();
        boolean boolean36 = strComparableMap11.containsKey((java.lang.Object) strComparableMap31);
        java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.lang.reflect.Type> annotatedElementMap38 = new java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.lang.reflect.Type>((int) (byte) 100);
        boolean boolean39 = strComparableMap31.equals((java.lang.Object) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{null=, =}" + "'", str28, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = strComparableMap10.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = strComparableMap17.get((java.lang.Object) true);
        int int23 = strComparableMap17.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet24 = strComparableMap17.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean29 = strComparableMap17.equals((java.lang.Object) 0);
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        boolean boolean37 = strComparableMap32.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence40 = strComparableMap32.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean42 = strComparableMap32.containsKey((java.lang.Object) 1);
        java.lang.Class<?> wildcardClass43 = strComparableMap32.getClass();
        boolean boolean44 = strComparableMap17.containsKey((java.lang.Object) strComparableMap32);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        boolean boolean51 = strComparableMap46.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence54 = strComparableMap46.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence57 = strComparableMap46.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection58 = strComparableMap46.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable61 = null;
        java.lang.CharSequence charSequence63 = strComparableMap60.putIfAbsent(strComparable61, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence65 = strComparableMap60.get((java.lang.Object) true);
        int int66 = strComparableMap60.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection67 = strComparableMap60.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap69 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable70 = null;
        java.lang.CharSequence charSequence72 = strComparableMap69.putIfAbsent(strComparable70, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence75 = strComparableMap69.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap77 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable78 = null;
        java.lang.CharSequence charSequence80 = strComparableMap77.putIfAbsent(strComparable78, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence82 = strComparableMap77.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet83 = strComparableMap77.entrySet();
        strComparableMap69.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap77);
        java.lang.CharSequence charSequence86 = strComparableMap60.getOrDefault((java.lang.Object) strComparableMap77, (java.lang.CharSequence) "{null=, =}");
        strComparableMap46.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap60);
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap60);
        java.lang.CharSequence charSequence89 = strComparableMap1.get((java.lang.Object) strComparableMap60);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(strComparableSet24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "hi!" + "'", charSequence57, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection58);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection67);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertNull(charSequence82);
        org.junit.Assert.assertNotNull(strComparableEntrySet83);
        org.junit.Assert.assertEquals("'" + charSequence86 + "' != '" + "{null=, =}" + "'", charSequence86, "{null=, =}");
        org.junit.Assert.assertNull(charSequence89);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap0 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean3 = strComparableMap2.isEmpty();
        java.lang.Object obj4 = strComparableMap2.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection5 = strComparableMap2.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        java.lang.CharSequence charSequence17 = strComparableMap14.putIfAbsent(strComparable15, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = strComparableMap14.get((java.lang.Object) true);
        int int20 = strComparableMap14.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection21 = strComparableMap14.values();
        boolean boolean22 = strComparableMap7.containsValue((java.lang.Object) strComparableMap14);
        boolean boolean23 = strComparableMap2.equals((java.lang.Object) strComparableMap14);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        java.lang.CharSequence charSequence28 = strComparableMap25.putIfAbsent(strComparable26, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap25.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap32.get((java.lang.Object) true);
        int int38 = strComparableMap32.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet39 = strComparableMap32.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean44 = strComparableMap32.equals((java.lang.Object) 0);
        strComparableMap25.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        boolean boolean46 = strComparableMap2.containsValue((java.lang.Object) strComparableMap25);
        java.lang.CharSequence charSequence47 = strComparableMap0.get((java.lang.Object) strComparableMap2);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet48 = strComparableMap0.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable51 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent(strComparable51, (java.lang.CharSequence) "");
        boolean boolean55 = strComparableMap50.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence58 = strComparableMap50.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable63 = null;
        java.lang.CharSequence charSequence65 = strComparableMap62.putIfAbsent(strComparable63, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence68 = strComparableMap62.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean69 = strComparableMap50.remove((java.lang.Object) strComparableMap60, (java.lang.Object) "hi!");
        java.lang.String str70 = strComparableMap50.toString();
        boolean boolean71 = strComparableMap0.containsKey((java.lang.Object) strComparableMap50);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection72 = strComparableMap0.values();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(strComparableSet39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNotNull(strComparableSet48);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{null=, =}" + "'", str70, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection72);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.io.Serializable, java.lang.CharSequence> serializableMap3 = new java.util.LinkedHashMap<java.io.Serializable, java.lang.CharSequence>((int) (short) -1, (float) 'a', false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) 'a', (float) 10L, true);
        java.lang.Class<?> wildcardClass4 = strComparableMap3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        java.lang.Object obj52 = strComparableMap15.clone();
        strComparableMap15.clear();
        int int54 = strComparableMap15.size();
        int int55 = strComparableMap15.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0);
        java.lang.Object obj58 = strComparableMap57.clone();
        boolean boolean59 = strComparableMap15.containsValue(obj58);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{}");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{}");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean10 = strComparableMap1.isEmpty();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet11 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence21 = strComparableMap13.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean24 = strComparableMap23.isEmpty();
        java.lang.Object obj25 = strComparableMap23.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap23.values();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.lang.String str28 = strComparableMap13.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean31 = strComparableMap30.isEmpty();
        java.lang.Object obj32 = strComparableMap30.clone();
        java.lang.CharSequence charSequence34 = strComparableMap30.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence36 = strComparableMap30.get((java.lang.Object) 100L);
        boolean boolean37 = strComparableMap13.containsValue((java.lang.Object) strComparableMap30);
        boolean boolean38 = strComparableMap13.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap13);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean46 = strComparableMap42.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = strComparableMap42.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int50 = strComparableMap42.size();
        boolean boolean54 = strComparableMap42.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean57 = strComparableMap56.isEmpty();
        java.lang.Object obj58 = strComparableMap56.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean63 = strComparableMap62.isEmpty();
        strComparableMap60.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        strComparableMap56.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        java.lang.CharSequence charSequence66 = strComparableMap42.get((java.lang.Object) strComparableMap62);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection67 = strComparableMap62.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet68 = strComparableMap62.entrySet();
        java.lang.CharSequence charSequence69 = strComparableMap13.remove((java.lang.Object) strComparableEntrySet68);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strComparableSet11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{null=, =}" + "'", str28, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{}");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertNotNull(charSequenceCollection67);
        org.junit.Assert.assertNotNull(strComparableEntrySet68);
        org.junit.Assert.assertNull(charSequence69);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet10 = strComparableMap2.keySet();
        java.lang.CharSequence charSequence13 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        boolean boolean19 = strComparableMap2.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean26 = strComparableMap22.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = strComparableMap22.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable34 = null;
        java.lang.CharSequence charSequence36 = strComparableMap33.putIfAbsent(strComparable34, (java.lang.CharSequence) "");
        boolean boolean38 = strComparableMap33.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence41 = strComparableMap33.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean44 = strComparableMap43.isEmpty();
        java.lang.Object obj45 = strComparableMap43.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection46 = strComparableMap43.values();
        strComparableMap33.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap43);
        java.lang.String str48 = strComparableMap33.toString();
        boolean boolean49 = strComparableMap22.remove((java.lang.Object) strComparableMap31, (java.lang.Object) str48);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence56 = strComparableMap51.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet57 = strComparableMap51.entrySet();
        java.lang.String str58 = strComparableMap51.toString();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection59 = strComparableMap51.values();
        boolean boolean60 = strComparableMap22.equals((java.lang.Object) strComparableMap51);
        java.lang.CharSequence charSequence61 = strComparableMap2.get((java.lang.Object) strComparableMap22);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(strComparableSet10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{null=, =}" + "'", str48, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertNotNull(strComparableEntrySet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "{null=}" + "'", str58, "{null=}");
        org.junit.Assert.assertNotNull(charSequenceCollection59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(charSequence61);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean9 = strComparableMap1.containsValue((java.lang.Object) 10);
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = charSequence12.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(charSequence12);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence6 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet7 = strComparableMap3.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        java.lang.String str16 = strComparableMap9.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        boolean boolean26 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean27 = strComparableMap9.equals((java.lang.Object) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable30 = null;
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent(strComparable30, (java.lang.CharSequence) "");
        boolean boolean34 = strComparableMap29.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean37 = strComparableMap36.isEmpty();
        java.lang.Object obj38 = strComparableMap36.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection39 = strComparableMap36.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap48.get((java.lang.Object) true);
        int int54 = strComparableMap48.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection55 = strComparableMap48.values();
        boolean boolean56 = strComparableMap41.containsValue((java.lang.Object) strComparableMap48);
        boolean boolean57 = strComparableMap36.equals((java.lang.Object) strComparableMap48);
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        boolean boolean59 = strComparableMap36.isEmpty();
        java.lang.CharSequence charSequence62 = strComparableMap36.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable65 = null;
        java.lang.CharSequence charSequence67 = strComparableMap64.putIfAbsent(strComparable65, (java.lang.CharSequence) "");
        boolean boolean69 = strComparableMap64.containsValue((java.lang.Object) (short) 100);
        int int70 = strComparableMap64.size();
        boolean boolean71 = strComparableMap64.isEmpty();
        java.lang.CharSequence charSequence73 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap64, (java.lang.CharSequence) "");
        boolean boolean74 = strComparableMap9.equals((java.lang.Object) strComparableMap64);
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.lang.CharSequence charSequence78 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableSet7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=}" + "'", str16, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection39);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + charSequence73 + "' != '" + "" + "'", charSequence73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(charSequence78);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet6 = strComparableMap3.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection7 = strComparableMap3.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap3.keySet();
        java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>> charSequenceIterableMap9 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>>();
        java.lang.CharSequence charSequence10 = strComparableMap3.remove((java.lang.Object) charSequenceIterableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (float) (short) 10);
        java.lang.CharSequence charSequence16 = strComparableMap13.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        boolean boolean17 = strComparableMap3.containsValue((java.lang.Object) charSequence16);
        java.lang.Object obj18 = strComparableMap3.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        boolean boolean25 = strComparableMap20.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        boolean boolean37 = strComparableMap32.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap39.get((java.lang.Object) true);
        int int45 = strComparableMap39.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection46 = strComparableMap39.values();
        boolean boolean47 = strComparableMap32.containsValue((java.lang.Object) strComparableMap39);
        boolean boolean48 = strComparableMap27.equals((java.lang.Object) strComparableMap39);
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        boolean boolean50 = strComparableMap27.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        boolean boolean52 = strComparableMap3.containsKey((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean55 = strComparableMap54.isEmpty();
        java.lang.Object obj56 = strComparableMap54.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean61 = strComparableMap60.isEmpty();
        strComparableMap58.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap60);
        strComparableMap54.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap60);
        strComparableMap54.clear();
        boolean boolean68 = strComparableMap54.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        boolean boolean69 = strComparableMap3.containsKey((java.lang.Object) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet6);
        org.junit.Assert.assertNotNull(charSequenceCollection7);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{}");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap0 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean3 = strComparableMap2.isEmpty();
        java.lang.Object obj4 = strComparableMap2.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection5 = strComparableMap2.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        java.lang.CharSequence charSequence17 = strComparableMap14.putIfAbsent(strComparable15, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = strComparableMap14.get((java.lang.Object) true);
        int int20 = strComparableMap14.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection21 = strComparableMap14.values();
        boolean boolean22 = strComparableMap7.containsValue((java.lang.Object) strComparableMap14);
        boolean boolean23 = strComparableMap2.equals((java.lang.Object) strComparableMap14);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        java.lang.CharSequence charSequence28 = strComparableMap25.putIfAbsent(strComparable26, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap25.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap32.get((java.lang.Object) true);
        int int38 = strComparableMap32.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet39 = strComparableMap32.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean44 = strComparableMap32.equals((java.lang.Object) 0);
        strComparableMap25.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        boolean boolean46 = strComparableMap2.containsValue((java.lang.Object) strComparableMap25);
        java.lang.CharSequence charSequence47 = strComparableMap0.get((java.lang.Object) strComparableMap2);
        java.lang.String str48 = strComparableMap2.toString();
        java.lang.CharSequence charSequence50 = null;
        java.lang.CharSequence charSequence51 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", charSequence50);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(strComparableSet39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{}" + "'", str48, "{}");
        org.junit.Assert.assertNull(charSequence51);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        int int13 = strComparableMap7.size();
        java.lang.CharSequence charSequence15 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap7, (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        boolean boolean27 = strComparableMap22.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence30 = strComparableMap22.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable35 = null;
        java.lang.CharSequence charSequence37 = strComparableMap34.putIfAbsent(strComparable35, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = strComparableMap34.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean41 = strComparableMap22.remove((java.lang.Object) strComparableMap32, (java.lang.Object) "hi!");
        boolean boolean42 = strComparableMap17.containsValue((java.lang.Object) boolean41);
        java.lang.CharSequence charSequence44 = null;
        java.lang.CharSequence charSequence45 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", charSequence44);
        java.lang.Object obj46 = strComparableMap17.clone();
        boolean boolean47 = strComparableMap7.containsValue((java.lang.Object) strComparableMap17);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{hi!=hi!, {null=, =, hi!=hi!}=null}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{hi!=hi!, {null=, =, hi!=hi!}=null}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{hi!=hi!, {null=, =, hi!=hi!}=null}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean14 = strComparableMap10.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = strComparableMap10.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int18 = strComparableMap10.size();
        boolean boolean22 = strComparableMap10.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean25 = strComparableMap24.isEmpty();
        java.lang.Object obj26 = strComparableMap24.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean31 = strComparableMap30.isEmpty();
        strComparableMap28.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap30);
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap30);
        java.lang.CharSequence charSequence34 = strComparableMap10.get((java.lang.Object) strComparableMap30);
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap30);
        boolean boolean36 = strComparableMap30.isEmpty();
        int int37 = strComparableMap30.size();
        java.lang.String str38 = strComparableMap30.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{}");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence10 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap8, (java.lang.CharSequence) "");
        java.lang.String str11 = strComparableMap1.toString();
        java.lang.CharSequence charSequence14 = null;
        boolean boolean15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=}", charSequence14);
        boolean boolean16 = strComparableMap1.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{null=}" + "'", str11, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(3);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence14 = strComparableMap6.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap18.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean25 = strComparableMap6.remove((java.lang.Object) strComparableMap16, (java.lang.Object) "hi!");
        boolean boolean26 = strComparableMap1.containsValue((java.lang.Object) boolean25);
        java.lang.CharSequence charSequence29 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean34 = strComparableMap33.isEmpty();
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap33);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        boolean boolean42 = strComparableMap37.containsValue((java.lang.Object) (short) 100);
        int int43 = strComparableMap37.size();
        java.lang.CharSequence charSequence45 = strComparableMap31.getOrDefault((java.lang.Object) strComparableMap37, (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence52 = strComparableMap47.get((java.lang.Object) true);
        java.lang.Object obj53 = strComparableMap47.clone();
        java.lang.CharSequence charSequence56 = strComparableMap47.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj57 = null;
        java.lang.CharSequence charSequence58 = strComparableMap47.get(obj57);
        strComparableMap47.clear();
        boolean boolean60 = strComparableMap37.containsKey((java.lang.Object) strComparableMap47);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection61 = strComparableMap47.values();
        java.lang.CharSequence charSequence63 = strComparableMap1.getOrDefault((java.lang.Object) charSequenceCollection61, (java.lang.CharSequence) "{{null=}={null=, =}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{null=}");
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "" + "'", charSequence58, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection61);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "{{null=}={null=, =}}" + "'", charSequence63, "{{null=}={null=, =}}");
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.lang.String str8 = strComparableMap1.toString();
        boolean boolean12 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection13 = strComparableMap1.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet14 = strComparableMap1.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection13);
        org.junit.Assert.assertNotNull(strComparableSet14);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection2 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap4 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet5 = strComparableMap4.keySet();
        java.lang.CharSequence charSequence6 = strComparableMap1.remove((java.lang.Object) strComparableMap4);
        org.junit.Assert.assertNotNull(charSequenceCollection2);
        org.junit.Assert.assertNotNull(strComparableSet5);
        org.junit.Assert.assertNull(charSequence6);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence5 = null;
        java.lang.CharSequence charSequence6 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence5);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection7 = strComparableMap3.values();
        java.lang.Class<?> wildcardClass8 = strComparableMap3.getClass();
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(charSequenceCollection7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(1, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence8 = strComparableMap5.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap5);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable12 = null;
        java.lang.CharSequence charSequence14 = strComparableMap11.putIfAbsent(strComparable12, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap11.get((java.lang.Object) true);
        int int17 = strComparableMap11.size();
        java.lang.CharSequence charSequence19 = strComparableMap11.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence22 = strComparableMap11.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj23 = strComparableMap11.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap11.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean29 = strComparableMap28.isEmpty();
        strComparableMap26.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap28);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap28.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection32 = strComparableMap28.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet33 = strComparableMap28.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean36 = strComparableMap35.isEmpty();
        java.lang.Object obj37 = strComparableMap35.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean42 = strComparableMap41.isEmpty();
        strComparableMap39.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap41);
        strComparableMap35.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap41);
        strComparableMap35.clear();
        strComparableMap28.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap35);
        java.lang.CharSequence charSequence48 = strComparableMap11.getOrDefault((java.lang.Object) strComparableMap35, (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence51 = strComparableMap11.put((java.lang.Comparable<java.lang.String>) "{{null=, =}={}}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        strComparableMap55.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap57);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet60 = strComparableMap57.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection61 = strComparableMap57.values();
        boolean boolean62 = strComparableMap53.containsKey((java.lang.Object) strComparableMap57);
        boolean boolean63 = strComparableMap3.remove((java.lang.Object) strComparableMap11, (java.lang.Object) boolean62);
        java.lang.Comparable<java.lang.String> strComparable64 = null;
        java.lang.CharSequence charSequence66 = strComparableMap11.replace(strComparable64, (java.lang.CharSequence) "{null=, =}");
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertNotNull(charSequenceCollection32);
        org.junit.Assert.assertNotNull(strComparableSet33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{}");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "{null=, =}" + "'", charSequence48, "{null=, =}");
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet60);
        org.junit.Assert.assertNotNull(charSequenceCollection61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "" + "'", charSequence66, "");
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = strComparableMap17.get((java.lang.Object) true);
        java.lang.Object obj23 = strComparableMap17.clone();
        java.lang.CharSequence charSequence26 = strComparableMap17.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj27 = null;
        java.lang.CharSequence charSequence28 = strComparableMap17.get(obj27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean33 = strComparableMap32.isEmpty();
        strComparableMap30.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet35 = strComparableMap32.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection36 = strComparableMap32.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet37 = strComparableMap32.keySet();
        boolean boolean38 = strComparableMap17.equals((java.lang.Object) strComparableMap32);
        java.lang.String str39 = strComparableMap17.toString();
        java.lang.CharSequence charSequence42 = strComparableMap17.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean47 = strComparableMap46.isEmpty();
        strComparableMap44.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet49 = strComparableMap46.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        boolean boolean55 = strComparableMap46.equals((java.lang.Object) charSequence54);
        boolean boolean56 = strComparableMap11.remove((java.lang.Object) "{null=, =}", (java.lang.Object) charSequence54);
        int int57 = strComparableMap11.size();
        java.lang.Object obj58 = strComparableMap11.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{null=}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "" + "'", charSequence28, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet35);
        org.junit.Assert.assertNotNull(charSequenceCollection36);
        org.junit.Assert.assertNotNull(strComparableSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{null=, =}" + "'", str39, "{null=, =}");
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet49);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{}");
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>, java.lang.Comparable<java.lang.String>> wildcardClassOfFieldMap3 = new java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>, java.lang.Comparable<java.lang.String>>(100, (float) (short) 10, false);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        boolean boolean25 = strComparableMap20.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence28 = strComparableMap20.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence31 = strComparableMap20.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable34 = null;
        java.lang.CharSequence charSequence36 = strComparableMap33.putIfAbsent(strComparable34, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence39 = strComparableMap33.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean41 = strComparableMap33.containsValue((java.lang.Object) 10);
        boolean boolean43 = strComparableMap20.remove((java.lang.Object) 10, (java.lang.Object) (-1L));
        boolean boolean44 = strComparableMap1.equals((java.lang.Object) boolean43);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean51 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence54 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet55 = strComparableMap47.keySet();
        java.lang.CharSequence charSequence57 = strComparableMap1.getOrDefault((java.lang.Object) strComparableSet55, (java.lang.CharSequence) "hi!");
        java.lang.String str58 = strComparableMap1.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "hi!" + "'", charSequence31, "hi!");
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNotNull(strComparableSet55);
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "hi!" + "'", charSequence57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "{null=, =, {null=, =}={null=}}" + "'", str58, "{null=, =, {null=, =}={null=}}");
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet15 = strComparableMap8.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean20 = strComparableMap8.equals((java.lang.Object) 0);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.lang.CharSequence charSequence24 = strComparableMap8.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, {null=, =}={null=}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(strComparableSet15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence24);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = strComparableMap10.get((java.lang.Object) true);
        int int16 = strComparableMap10.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap18.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap26.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence31 = strComparableMap26.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet32 = strComparableMap26.entrySet();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.lang.Class<?> wildcardClass34 = strComparableMap26.getClass();
        boolean boolean35 = strComparableMap10.containsKey((java.lang.Object) wildcardClass34);
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) strComparableMap10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        boolean boolean42 = strComparableMap10.containsValue((java.lang.Object) strComparable39);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNotNull(strComparableEntrySet32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(1, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence8 = strComparableMap5.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap5);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable12 = null;
        java.lang.CharSequence charSequence14 = strComparableMap11.putIfAbsent(strComparable12, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap11.get((java.lang.Object) true);
        int int17 = strComparableMap11.size();
        java.lang.CharSequence charSequence19 = strComparableMap11.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence22 = strComparableMap11.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj23 = strComparableMap11.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap11.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean29 = strComparableMap28.isEmpty();
        strComparableMap26.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap28);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap28.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection32 = strComparableMap28.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet33 = strComparableMap28.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean36 = strComparableMap35.isEmpty();
        java.lang.Object obj37 = strComparableMap35.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean42 = strComparableMap41.isEmpty();
        strComparableMap39.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap41);
        strComparableMap35.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap41);
        strComparableMap35.clear();
        strComparableMap28.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap35);
        java.lang.CharSequence charSequence48 = strComparableMap11.getOrDefault((java.lang.Object) strComparableMap35, (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence51 = strComparableMap11.put((java.lang.Comparable<java.lang.String>) "{{null=, =}={}}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        strComparableMap55.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap57);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet60 = strComparableMap57.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection61 = strComparableMap57.values();
        boolean boolean62 = strComparableMap53.containsKey((java.lang.Object) strComparableMap57);
        boolean boolean63 = strComparableMap3.remove((java.lang.Object) strComparableMap11, (java.lang.Object) boolean62);
        java.lang.CharSequence charSequence66 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertNotNull(charSequenceCollection32);
        org.junit.Assert.assertNotNull(strComparableSet33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{}");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "{null=, =}" + "'", charSequence48, "{null=, =}");
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet60);
        org.junit.Assert.assertNotNull(charSequenceCollection61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(charSequence66);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence26 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap18.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence41 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap39, (java.lang.CharSequence) "{null=}");
        java.lang.String str42 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean47 = strComparableMap46.isEmpty();
        strComparableMap44.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        boolean boolean49 = strComparableMap1.containsValue((java.lang.Object) strComparableMap46);
        boolean boolean53 = strComparableMap46.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "{{null=, =}={}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=}" + "'", charSequence41, "{null=}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{null=}" + "'", str42, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean10 = strComparableMap1.isEmpty();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet11 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.ConstantDesc> comparableEntrySetMap12 = new java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.ConstantDesc>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence17 = strComparableMap14.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap21);
        java.lang.CharSequence charSequence25 = strComparableMap21.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        boolean boolean26 = strComparableMap1.remove((java.lang.Object) comparableEntrySetMap12, (java.lang.Object) "{}");
        strComparableMap1.clear();
        java.lang.String str28 = strComparableMap1.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strComparableSet11);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass13 = strComparableMap1.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.lang.CharSequence charSequence18 = strComparableMap1.get((java.lang.Object) 'a');
        java.lang.Object obj19 = null;
        java.lang.CharSequence charSequence20 = strComparableMap1.remove(obj19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4', (float) ' ', true);
        boolean boolean25 = strComparableMap1.equals((java.lang.Object) '4');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        boolean boolean20 = strComparableMap15.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence23 = strComparableMap15.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean26 = strComparableMap25.isEmpty();
        java.lang.Object obj27 = strComparableMap25.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection28 = strComparableMap25.values();
        strComparableMap15.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap25);
        java.lang.String str30 = strComparableMap15.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean33 = strComparableMap32.isEmpty();
        java.lang.Object obj34 = strComparableMap32.clone();
        java.lang.CharSequence charSequence36 = strComparableMap32.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence38 = strComparableMap32.get((java.lang.Object) 100L);
        boolean boolean39 = strComparableMap15.containsValue((java.lang.Object) strComparableMap32);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence49 = strComparableMap41.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence59 = strComparableMap53.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean60 = strComparableMap41.remove((java.lang.Object) strComparableMap51, (java.lang.Object) "hi!");
        boolean boolean61 = strComparableMap15.containsKey((java.lang.Object) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable65 = null;
        java.lang.CharSequence charSequence67 = strComparableMap64.putIfAbsent(strComparable65, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence69 = strComparableMap64.get((java.lang.Object) true);
        int int70 = strComparableMap64.size();
        java.lang.CharSequence charSequence72 = strComparableMap64.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence75 = strComparableMap64.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.String str76 = strComparableMap64.toString();
        java.lang.CharSequence charSequence77 = strComparableMap62.remove((java.lang.Object) strComparableMap64);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection78 = strComparableMap62.values();
        java.lang.CharSequence charSequence79 = strComparableMap1.get((java.lang.Object) strComparableMap62);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap80 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{null=, =}" + "'", str30, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{null=, =}" + "'", str76, "{null=, =}");
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertNotNull(charSequenceCollection78);
        org.junit.Assert.assertNull(charSequence79);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0);
        java.lang.CharSequence charSequence3 = strComparableMap1.get((java.lang.Object) (short) 0);
        java.lang.Object obj4 = strComparableMap1.clone();
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "{}");
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int15 = strComparableMap14.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        int int21 = strComparableMap19.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.lang.CharSequence charSequence25 = strComparableMap19.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        strComparableMap19.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(charSequence25);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        boolean boolean14 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.CharSequence charSequence26 = strComparableMap2.get((java.lang.Object) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean33 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet37 = strComparableMap29.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap39.get((java.lang.Object) true);
        int int45 = strComparableMap39.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap47.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = strComparableMap55.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet61 = strComparableMap55.entrySet();
        strComparableMap47.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap55);
        java.lang.Class<?> wildcardClass63 = strComparableMap55.getClass();
        boolean boolean64 = strComparableMap39.containsKey((java.lang.Object) wildcardClass63);
        boolean boolean65 = strComparableMap29.equals((java.lang.Object) strComparableMap39);
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable69 = null;
        java.lang.CharSequence charSequence71 = strComparableMap68.putIfAbsent(strComparable69, (java.lang.CharSequence) "");
        boolean boolean73 = strComparableMap68.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence76 = strComparableMap68.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap78 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean79 = strComparableMap78.isEmpty();
        java.lang.Object obj80 = strComparableMap78.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection81 = strComparableMap78.values();
        strComparableMap68.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap78);
        java.lang.String str83 = strComparableMap68.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap85 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean86 = strComparableMap85.isEmpty();
        java.lang.Object obj87 = strComparableMap85.clone();
        java.lang.CharSequence charSequence89 = strComparableMap85.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence91 = strComparableMap85.get((java.lang.Object) 100L);
        boolean boolean92 = strComparableMap68.containsValue((java.lang.Object) strComparableMap85);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet93 = strComparableMap85.keySet();
        java.lang.CharSequence charSequence94 = strComparableMap22.remove((java.lang.Object) strComparableSet93);
        strComparableMap22.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap96 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNotNull(strComparableSet37);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNotNull(strComparableEntrySet61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(charSequence76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{null=, =}" + "'", str83, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "{}");
        org.junit.Assert.assertNull(charSequence89);
        org.junit.Assert.assertNull(charSequence91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strComparableSet93);
        org.junit.Assert.assertNull(charSequence94);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet26 = strComparableMap18.keySet();
        java.lang.String str27 = strComparableMap18.toString();
        java.lang.CharSequence charSequence30 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, hi!=hi!}", (java.lang.CharSequence) "{null=, =}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strComparableSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(charSequence30);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean20 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection40 = strComparableMap37.values();
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.lang.String str42 = strComparableMap27.toString();
        boolean boolean43 = strComparableMap16.remove((java.lang.Object) strComparableMap25, (java.lang.Object) str42);
        boolean boolean44 = strComparableMap13.equals((java.lang.Object) strComparableMap25);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        boolean boolean51 = strComparableMap46.containsValue((java.lang.Object) (short) 100);
        int int52 = strComparableMap46.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence55 = strComparableMap46.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        java.lang.Object obj59 = strComparableMap57.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection60 = strComparableMap57.values();
        boolean boolean61 = strComparableMap25.remove((java.lang.Object) strComparableMap53, (java.lang.Object) strComparableMap57);
        boolean boolean62 = strComparableMap1.equals((java.lang.Object) strComparableMap57);
        java.lang.Object obj63 = null;
        boolean boolean64 = strComparableMap1.containsKey(obj63);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{null=, =}" + "'", str42, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "" + "'", charSequence55, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.CharSequence charSequence18 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "{null=, {null=, =}={null=}}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertNull(charSequence18);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence21 = strComparableMap13.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean24 = strComparableMap23.isEmpty();
        java.lang.Object obj25 = strComparableMap23.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap23.values();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.lang.String str28 = strComparableMap13.toString();
        boolean boolean29 = strComparableMap2.remove((java.lang.Object) strComparableMap11, (java.lang.Object) str28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet37 = strComparableMap31.entrySet();
        java.lang.String str38 = strComparableMap31.toString();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection39 = strComparableMap31.values();
        boolean boolean40 = strComparableMap2.equals((java.lang.Object) strComparableMap31);
        boolean boolean44 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet45 = strComparableMap2.keySet();
        java.lang.CharSequence charSequence48 = strComparableMap2.put((java.lang.Comparable<java.lang.String>) "{{null=, =}={}}", (java.lang.CharSequence) "{null=, =, {null=, =}={null=}}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{null=, =}" + "'", str28, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNotNull(strComparableEntrySet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=}" + "'", str38, "{null=}");
        org.junit.Assert.assertNotNull(charSequenceCollection39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strComparableSet45);
        org.junit.Assert.assertNull(charSequence48);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean10 = strComparableMap1.isEmpty();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet11 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence21 = strComparableMap13.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean24 = strComparableMap23.isEmpty();
        java.lang.Object obj25 = strComparableMap23.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap23.values();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.lang.String str28 = strComparableMap13.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean31 = strComparableMap30.isEmpty();
        java.lang.Object obj32 = strComparableMap30.clone();
        java.lang.CharSequence charSequence34 = strComparableMap30.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence36 = strComparableMap30.get((java.lang.Object) 100L);
        boolean boolean37 = strComparableMap13.containsValue((java.lang.Object) strComparableMap30);
        boolean boolean38 = strComparableMap13.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap13);
        java.lang.Object obj40 = null;
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet44 = strComparableMap43.entrySet();
        java.lang.CharSequence charSequence46 = strComparableMap43.get((java.lang.Object) (-1.0d));
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence52 = null;
        java.lang.CharSequence charSequence53 = strComparableMap50.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence52);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        strComparableMap55.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap57);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable62 = null;
        java.lang.CharSequence charSequence64 = strComparableMap61.putIfAbsent(strComparable62, (java.lang.CharSequence) "");
        boolean boolean66 = strComparableMap61.containsValue((java.lang.Object) (short) 100);
        int int67 = strComparableMap61.size();
        java.lang.CharSequence charSequence69 = strComparableMap55.getOrDefault((java.lang.Object) strComparableMap61, (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet70 = strComparableMap55.entrySet();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet71 = strComparableMap55.keySet();
        int int72 = strComparableMap55.size();
        boolean boolean73 = strComparableMap50.containsKey((java.lang.Object) int72);
        java.lang.Object obj74 = strComparableMap50.clone();
        boolean boolean75 = strComparableMap43.containsKey((java.lang.Object) strComparableMap50);
        boolean boolean76 = strComparableMap13.remove(obj40, (java.lang.Object) boolean75);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strComparableSet11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{null=, =}" + "'", str28, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet44);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "hi!" + "'", charSequence69, "hi!");
        org.junit.Assert.assertNotNull(strComparableEntrySet70);
        org.junit.Assert.assertNotNull(strComparableSet71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "{=null}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "{=null}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "{=null}");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet19 = strComparableMap1.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        java.lang.Object obj24 = strComparableMap22.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection25 = strComparableMap22.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable35 = null;
        java.lang.CharSequence charSequence37 = strComparableMap34.putIfAbsent(strComparable35, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence39 = strComparableMap34.get((java.lang.Object) true);
        int int40 = strComparableMap34.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection41 = strComparableMap34.values();
        boolean boolean42 = strComparableMap27.containsValue((java.lang.Object) strComparableMap34);
        boolean boolean43 = strComparableMap22.equals((java.lang.Object) strComparableMap34);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable46 = null;
        java.lang.CharSequence charSequence48 = strComparableMap45.putIfAbsent(strComparable46, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence50 = strComparableMap45.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence57 = strComparableMap52.get((java.lang.Object) true);
        int int58 = strComparableMap52.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet59 = strComparableMap52.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean64 = strComparableMap52.equals((java.lang.Object) 0);
        strComparableMap45.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        boolean boolean66 = strComparableMap22.containsValue((java.lang.Object) strComparableMap45);
        java.lang.CharSequence charSequence67 = strComparableMap20.get((java.lang.Object) strComparableMap22);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection68 = strComparableMap20.values();
        boolean boolean69 = strComparableMap1.containsValue((java.lang.Object) strComparableMap20);
        java.lang.CharSequence charSequence72 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =, {null=, =}={null=}}", (java.lang.CharSequence) "{null=, {null=, =}={null=}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNotNull(strComparableEntrySet19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection25);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(strComparableSet59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNotNull(charSequenceCollection68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(charSequence72);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        boolean boolean9 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        strComparableMap1.clear();
        java.lang.Object obj11 = null;
        boolean boolean12 = strComparableMap1.equals(obj11);
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =, {null=, =}={null=}}", (java.lang.CharSequence) "{{null=, =}={}}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charSequence15);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = strComparableMap13.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean20 = strComparableMap1.remove((java.lang.Object) strComparableMap11, (java.lang.Object) "hi!");
        java.lang.Object obj21 = strComparableMap1.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{null=, =}");
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence14 = strComparableMap6.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap18.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean25 = strComparableMap6.remove((java.lang.Object) strComparableMap16, (java.lang.Object) "hi!");
        boolean boolean26 = strComparableMap1.containsValue((java.lang.Object) boolean25);
        java.lang.Class<?> wildcardClass27 = strComparableMap1.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        boolean boolean3 = strComparableMap1.isEmpty();
        java.lang.CharSequence charSequence6 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(charSequence6);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean18 = strComparableMap17.isEmpty();
        java.lang.Object obj19 = strComparableMap17.clone();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.CharSequence charSequence22 = strComparableMap11.getOrDefault((java.lang.Object) wildcardClass20, (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap24.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet30 = strComparableMap24.entrySet();
        java.lang.String str31 = strComparableMap24.toString();
        java.lang.String str32 = strComparableMap24.toString();
        int int33 = strComparableMap24.size();
        java.lang.Object obj34 = strComparableMap24.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean39 = strComparableMap38.isEmpty();
        strComparableMap36.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable43 = null;
        java.lang.CharSequence charSequence45 = strComparableMap42.putIfAbsent(strComparable43, (java.lang.CharSequence) "");
        boolean boolean47 = strComparableMap42.containsValue((java.lang.Object) (short) 100);
        int int48 = strComparableMap42.size();
        java.lang.CharSequence charSequence50 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap42, (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet51 = strComparableMap36.entrySet();
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        boolean boolean53 = strComparableMap11.containsValue((java.lang.Object) strComparableMap36);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNotNull(strComparableEntrySet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{null=}" + "'", str31, "{null=}");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=}" + "'", str32, "{null=}");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{null=}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "hi!" + "'", charSequence50, "hi!");
        org.junit.Assert.assertNotNull(strComparableEntrySet51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        boolean boolean14 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.CharSequence charSequence26 = strComparableMap2.get((java.lang.Object) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean33 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet37 = strComparableMap29.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap39.get((java.lang.Object) true);
        int int45 = strComparableMap39.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap47.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = strComparableMap55.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet61 = strComparableMap55.entrySet();
        strComparableMap47.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap55);
        java.lang.Class<?> wildcardClass63 = strComparableMap55.getClass();
        boolean boolean64 = strComparableMap39.containsKey((java.lang.Object) wildcardClass63);
        boolean boolean65 = strComparableMap29.equals((java.lang.Object) strComparableMap39);
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable69 = null;
        java.lang.CharSequence charSequence71 = strComparableMap68.putIfAbsent(strComparable69, (java.lang.CharSequence) "");
        boolean boolean73 = strComparableMap68.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence76 = strComparableMap68.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap78 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean79 = strComparableMap78.isEmpty();
        java.lang.Object obj80 = strComparableMap78.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection81 = strComparableMap78.values();
        strComparableMap68.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap78);
        java.lang.String str83 = strComparableMap68.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap85 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean86 = strComparableMap85.isEmpty();
        java.lang.Object obj87 = strComparableMap85.clone();
        java.lang.CharSequence charSequence89 = strComparableMap85.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence91 = strComparableMap85.get((java.lang.Object) 100L);
        boolean boolean92 = strComparableMap68.containsValue((java.lang.Object) strComparableMap85);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet93 = strComparableMap85.keySet();
        java.lang.CharSequence charSequence94 = strComparableMap22.remove((java.lang.Object) strComparableSet93);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection95 = strComparableMap22.values();
        java.lang.CharSequence charSequence97 = null;
        java.lang.CharSequence charSequence98 = strComparableMap22.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", charSequence97);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNotNull(strComparableSet37);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNotNull(strComparableEntrySet61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(charSequence76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{null=, =}" + "'", str83, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "{}");
        org.junit.Assert.assertNull(charSequence89);
        org.junit.Assert.assertNull(charSequence91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strComparableSet93);
        org.junit.Assert.assertNull(charSequence94);
        org.junit.Assert.assertNotNull(charSequenceCollection95);
        org.junit.Assert.assertNull(charSequence98);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet3 = strComparableMap2.entrySet();
        java.lang.CharSequence charSequence5 = strComparableMap2.get((java.lang.Object) (-1.0d));
        int int6 = strComparableMap2.size();
        org.junit.Assert.assertNotNull(strComparableEntrySet3);
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection8 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap10.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap18.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.CharSequence charSequence27 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap18, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int30 = strComparableMap29.size();
        boolean boolean31 = strComparableMap29.isEmpty();
        int int32 = strComparableMap29.size();
        java.lang.CharSequence charSequence35 = strComparableMap29.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.CharSequence charSequence38 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable41 = null;
        java.lang.CharSequence charSequence43 = strComparableMap40.putIfAbsent(strComparable41, (java.lang.CharSequence) "");
        boolean boolean45 = strComparableMap40.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence48 = strComparableMap40.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean50 = strComparableMap40.containsKey((java.lang.Object) 1);
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap40);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap40);
        java.lang.Object obj53 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection56 = strComparableMap55.values();
        java.lang.Object obj57 = null;
        boolean boolean58 = strComparableMap1.remove((java.lang.Object) strComparableMap55, obj57);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection8);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "{null=, =}" + "'", charSequence27, "{null=, =}");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{null=, =}");
        org.junit.Assert.assertNotNull(charSequenceCollection56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap13.get((java.lang.Object) true);
        int int19 = strComparableMap13.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap13.values();
        boolean boolean21 = strComparableMap6.containsValue((java.lang.Object) strComparableMap13);
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap13);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap24.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        int int37 = strComparableMap31.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet38 = strComparableMap31.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean43 = strComparableMap31.equals((java.lang.Object) 0);
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        boolean boolean45 = strComparableMap1.containsValue((java.lang.Object) strComparableMap24);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet47 = strComparableMap46.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean50 = strComparableMap49.isEmpty();
        java.lang.Object obj51 = strComparableMap49.clone();
        java.lang.CharSequence charSequence53 = strComparableMap49.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = strComparableMap55.get((java.lang.Object) true);
        java.lang.Object obj61 = strComparableMap55.clone();
        java.lang.CharSequence charSequence64 = strComparableMap55.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj65 = null;
        java.lang.CharSequence charSequence66 = strComparableMap55.get(obj65);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean71 = strComparableMap70.isEmpty();
        strComparableMap68.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap70);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet73 = strComparableMap70.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection74 = strComparableMap70.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet75 = strComparableMap70.keySet();
        boolean boolean76 = strComparableMap55.equals((java.lang.Object) strComparableMap70);
        java.lang.String str77 = strComparableMap55.toString();
        boolean boolean78 = strComparableMap49.equals((java.lang.Object) strComparableMap55);
        boolean boolean82 = strComparableMap49.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet83 = strComparableMap49.keySet();
        java.lang.CharSequence charSequence84 = strComparableMap46.get((java.lang.Object) strComparableSet83);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(strComparableSet38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{}");
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "{null=}");
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "" + "'", charSequence66, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet73);
        org.junit.Assert.assertNotNull(charSequenceCollection74);
        org.junit.Assert.assertNotNull(strComparableSet75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "{null=, =}" + "'", str77, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strComparableSet83);
        org.junit.Assert.assertNull(charSequence84);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean20 = strComparableMap19.isEmpty();
        java.lang.Object obj21 = strComparableMap19.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap19.values();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean30 = strComparableMap26.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = strComparableMap26.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int34 = strComparableMap26.size();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.lang.CharSequence charSequence36 = strComparableMap1.get((java.lang.Object) strComparableMap26);
        java.lang.CharSequence charSequence39 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=}");
        boolean boolean40 = strComparableMap1.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        strComparableMap1.clear();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection9 = strComparableMap1.values();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection10 = strComparableMap1.values();
        java.lang.String str11 = strComparableMap1.toString();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet12 = strComparableMap1.keySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNotNull(charSequenceCollection9);
        org.junit.Assert.assertNotNull(charSequenceCollection10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNotNull(strComparableSet12);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        boolean boolean14 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.CharSequence charSequence26 = strComparableMap2.get((java.lang.Object) strComparableMap22);
        boolean boolean27 = strComparableMap22.isEmpty();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet28 = strComparableMap22.keySet();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableSet28);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        boolean boolean21 = strComparableMap16.containsValue((java.lang.Object) (short) 100);
        int int22 = strComparableMap16.size();
        java.lang.CharSequence charSequence24 = strComparableMap10.getOrDefault((java.lang.Object) strComparableMap16, (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap10.entrySet();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet26 = strComparableMap10.keySet();
        boolean boolean27 = strComparableMap1.equals((java.lang.Object) strComparableMap10);
        java.lang.CharSequence charSequence30 = strComparableMap10.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNotNull(strComparableSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(charSequence30);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap1.keySet();
        java.lang.CharSequence charSequence11 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.lang.String str12 = strComparableMap1.toString();
        strComparableMap1.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{null=, hi!=hi!}" + "'", str12, "{null=, hi!=hi!}");
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence26 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap18.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence41 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap39, (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence44 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{}");
        java.lang.CharSequence charSequence47 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =, {null=, =}={null=}}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=}" + "'", charSequence41, "{null=}");
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertNull(charSequence47);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet31 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence34 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj35 = null;
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.lang.CharSequence charSequence41 = strComparableMap37.remove((java.lang.Object) true);
        boolean boolean45 = strComparableMap37.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap1.remove(obj35, (java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection51 = strComparableMap50.values();
        boolean boolean52 = strComparableMap1.containsKey((java.lang.Object) charSequenceCollection51);
        java.lang.Class<?> wildcardClass53 = strComparableMap1.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet31);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean20 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection40 = strComparableMap37.values();
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.lang.String str42 = strComparableMap27.toString();
        boolean boolean43 = strComparableMap16.remove((java.lang.Object) strComparableMap25, (java.lang.Object) str42);
        boolean boolean44 = strComparableMap13.equals((java.lang.Object) strComparableMap25);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        boolean boolean51 = strComparableMap46.containsValue((java.lang.Object) (short) 100);
        int int52 = strComparableMap46.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence55 = strComparableMap46.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        java.lang.Object obj59 = strComparableMap57.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection60 = strComparableMap57.values();
        boolean boolean61 = strComparableMap25.remove((java.lang.Object) strComparableMap53, (java.lang.Object) strComparableMap57);
        boolean boolean62 = strComparableMap1.equals((java.lang.Object) strComparableMap57);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 10);
        boolean boolean65 = strComparableMap1.containsValue((java.lang.Object) strComparableMap64);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet67 = strComparableMap66.entrySet();
        java.lang.Object obj68 = strComparableMap66.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{null=, =}" + "'", str42, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "" + "'", charSequence55, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "{hi!=hi!}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "{hi!=hi!}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "{hi!=hi!}");
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable4 = null;
        java.lang.CharSequence charSequence6 = strComparableMap3.putIfAbsent(strComparable4, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence8 = strComparableMap3.get((java.lang.Object) true);
        int int9 = strComparableMap3.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection10 = strComparableMap3.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap12.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet26 = strComparableMap20.entrySet();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.lang.CharSequence charSequence29 = strComparableMap3.getOrDefault((java.lang.Object) strComparableMap20, (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence32 = strComparableMap3.put((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        boolean boolean33 = strComparableMap1.equals((java.lang.Object) strComparableMap3);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection10);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNotNull(strComparableEntrySet26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "{null=, =}" + "'", charSequence29, "{null=, =}");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.lang.CharSequence charSequence38 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "");
        java.lang.String str39 = strComparableMap1.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{null=, =}" + "'", str39, "{null=, =}");
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        boolean boolean3 = strComparableMap1.isEmpty();
        int int4 = strComparableMap1.size();
        java.lang.CharSequence charSequence7 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.CharSequence charSequence10 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        boolean boolean17 = strComparableMap12.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence20 = strComparableMap12.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap12.containsKey((java.lang.Object) 1);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection24 = strComparableMap12.values();
        java.lang.Object obj25 = strComparableMap12.clone();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{null=, =}");
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Object, java.lang.Object> objMap2 = new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>((-1), (float) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.reflect.GenericDeclaration> strComparableMapMap2 = new java.util.LinkedHashMap<java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.reflect.GenericDeclaration>((int) '#', 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        java.util.LinkedHashMap<java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>> strComparableMapMap1 = new java.util.LinkedHashMap<java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>>((int) 'a');
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        boolean boolean3 = strComparableMap1.isEmpty();
        java.lang.CharSequence charSequence6 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=, =}");
        java.lang.String str7 = strComparableMap1.toString();
        boolean boolean11 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, hi!=hi!}", (java.lang.CharSequence) "{null=, {null=}={}}", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{{null=}={null=, =}}" + "'", str7, "{{null=}={null=, =}}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean18 = strComparableMap17.isEmpty();
        java.lang.Object obj19 = strComparableMap17.clone();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.CharSequence charSequence22 = strComparableMap11.getOrDefault((java.lang.Object) wildcardClass20, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence25 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, {null=, =}={null=}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertNull(charSequence25);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = strComparableMap13.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean20 = strComparableMap1.remove((java.lang.Object) strComparableMap11, (java.lang.Object) "hi!");
        java.lang.Class<?> wildcardClass21 = strComparableMap1.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableMapMap2 = new java.util.LinkedHashMap<java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((int) (short) 10, (float) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10, (float) 0L, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4', (float) ' ', false);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet13 = strComparableMap1.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = strComparableMap15.get((java.lang.Object) true);
        int int21 = strComparableMap15.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet22 = strComparableMap15.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean27 = strComparableMap15.equals((java.lang.Object) 0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean30 = strComparableMap29.isEmpty();
        java.lang.Object obj31 = strComparableMap29.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean36 = strComparableMap35.isEmpty();
        strComparableMap33.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap35);
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap35);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable41 = null;
        java.lang.CharSequence charSequence43 = strComparableMap40.putIfAbsent(strComparable41, (java.lang.CharSequence) "");
        boolean boolean45 = strComparableMap40.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence48 = strComparableMap40.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence58 = strComparableMap52.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean59 = strComparableMap40.remove((java.lang.Object) strComparableMap50, (java.lang.Object) "hi!");
        java.lang.CharSequence charSequence61 = strComparableMap29.getOrDefault((java.lang.Object) boolean59, (java.lang.CharSequence) "");
        java.lang.String str62 = strComparableMap29.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable65 = null;
        java.lang.CharSequence charSequence67 = strComparableMap64.putIfAbsent(strComparable65, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence69 = strComparableMap64.get((java.lang.Object) true);
        int int70 = strComparableMap64.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection71 = strComparableMap64.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap73 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable74 = null;
        java.lang.CharSequence charSequence76 = strComparableMap73.putIfAbsent(strComparable74, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence79 = strComparableMap73.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap81 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable82 = null;
        java.lang.CharSequence charSequence84 = strComparableMap81.putIfAbsent(strComparable82, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence86 = strComparableMap81.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet87 = strComparableMap81.entrySet();
        strComparableMap73.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap81);
        java.lang.CharSequence charSequence90 = strComparableMap64.getOrDefault((java.lang.Object) strComparableMap81, (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence93 = strComparableMap64.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=}");
        boolean boolean94 = strComparableMap29.equals((java.lang.Object) strComparableMap64);
        boolean boolean95 = strComparableMap1.remove((java.lang.Object) strComparableMap15, (java.lang.Object) strComparableMap64);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNotNull(strComparableEntrySet13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(strComparableSet22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "" + "'", charSequence61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{}" + "'", str62, "{}");
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection71);
        org.junit.Assert.assertNull(charSequence76);
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertNull(charSequence84);
        org.junit.Assert.assertNull(charSequence86);
        org.junit.Assert.assertNotNull(strComparableEntrySet87);
        org.junit.Assert.assertEquals("'" + charSequence90 + "' != '" + "{null=, =}" + "'", charSequence90, "{null=, =}");
        org.junit.Assert.assertNull(charSequence93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection8 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap10.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap18.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.CharSequence charSequence27 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap18, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable30 = null;
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent(strComparable30, (java.lang.CharSequence) "");
        boolean boolean34 = strComparableMap29.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean37 = strComparableMap36.isEmpty();
        java.lang.Object obj38 = strComparableMap36.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection39 = strComparableMap36.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap48.get((java.lang.Object) true);
        int int54 = strComparableMap48.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection55 = strComparableMap48.values();
        boolean boolean56 = strComparableMap41.containsValue((java.lang.Object) strComparableMap48);
        boolean boolean57 = strComparableMap36.equals((java.lang.Object) strComparableMap48);
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet59 = strComparableMap29.entrySet();
        java.lang.CharSequence charSequence62 = strComparableMap29.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean63 = strComparableMap18.equals((java.lang.Object) strComparableMap29);
        int int64 = strComparableMap18.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean69 = strComparableMap68.isEmpty();
        strComparableMap66.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap68);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet71 = strComparableMap68.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection72 = strComparableMap68.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet73 = strComparableMap68.keySet();
        java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>> charSequenceIterableMap74 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>>();
        java.lang.CharSequence charSequence75 = strComparableMap68.remove((java.lang.Object) charSequenceIterableMap74);
        java.lang.Object obj76 = strComparableMap68.clone();
        boolean boolean77 = strComparableMap18.equals((java.lang.Object) strComparableMap68);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection8);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "{null=, =}" + "'", charSequence27, "{null=, =}");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection39);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet59);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet71);
        org.junit.Assert.assertNotNull(charSequenceCollection72);
        org.junit.Assert.assertNotNull(strComparableSet73);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "{}");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.Class<?> wildcardClass4 = strComparableMap3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj13 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence16 = strComparableMap1.get((java.lang.Object) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence23 = strComparableMap20.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap20.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean29 = strComparableMap28.isEmpty();
        strComparableMap26.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        boolean boolean37 = strComparableMap32.containsValue((java.lang.Object) (short) 100);
        int int38 = strComparableMap32.size();
        java.lang.CharSequence charSequence40 = strComparableMap26.getOrDefault((java.lang.Object) strComparableMap32, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass41 = strComparableMap32.getClass();
        java.lang.CharSequence charSequence43 = strComparableMap20.getOrDefault((java.lang.Object) strComparableMap32, (java.lang.CharSequence) "{}");
        java.lang.CharSequence charSequence44 = strComparableMap1.get((java.lang.Object) "{}");
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>> genericDeclarationMap45 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>>();
        java.lang.CharSequence charSequence47 = strComparableMap1.getOrDefault((java.lang.Object) genericDeclarationMap45, (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean50 = strComparableMap49.isEmpty();
        java.lang.Object obj51 = strComparableMap49.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean56 = strComparableMap55.isEmpty();
        strComparableMap53.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap55);
        strComparableMap49.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap55);
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        java.lang.CharSequence charSequence61 = strComparableMap49.putIfAbsent(strComparable59, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence64 = strComparableMap49.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection65 = strComparableMap49.values();
        boolean boolean66 = strComparableMap1.containsValue((java.lang.Object) strComparableMap49);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=, =}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "{}" + "'", charSequence43, "{}");
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "{{}={null=, =, hi!=hi!}}" + "'", charSequence47, "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{}");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNotNull(charSequenceCollection65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean27 = strComparableMap23.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = strComparableMap23.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable35 = null;
        java.lang.CharSequence charSequence37 = strComparableMap34.putIfAbsent(strComparable35, (java.lang.CharSequence) "");
        boolean boolean39 = strComparableMap34.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence42 = strComparableMap34.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean45 = strComparableMap44.isEmpty();
        java.lang.Object obj46 = strComparableMap44.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection47 = strComparableMap44.values();
        strComparableMap34.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap44);
        java.lang.String str49 = strComparableMap34.toString();
        boolean boolean50 = strComparableMap23.remove((java.lang.Object) strComparableMap32, (java.lang.Object) str49);
        boolean boolean51 = strComparableMap20.equals((java.lang.Object) strComparableMap32);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        boolean boolean58 = strComparableMap53.containsValue((java.lang.Object) (short) 100);
        int int59 = strComparableMap53.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence62 = strComparableMap53.getOrDefault((java.lang.Object) strComparableMap60, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean65 = strComparableMap64.isEmpty();
        java.lang.Object obj66 = strComparableMap64.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection67 = strComparableMap64.values();
        boolean boolean68 = strComparableMap32.remove((java.lang.Object) strComparableMap60, (java.lang.Object) strComparableMap64);
        strComparableMap32.clear();
        boolean boolean70 = strComparableMap9.containsValue((java.lang.Object) strComparableMap32);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet71 = strComparableMap9.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet72 = strComparableMap9.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{null=, =}" + "'", str49, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "" + "'", charSequence62, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strComparableSet71);
        org.junit.Assert.assertNotNull(strComparableEntrySet72);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet10 = strComparableMap8.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap12.get((java.lang.Object) true);
        java.lang.Object obj18 = strComparableMap12.clone();
        java.lang.String str19 = strComparableMap12.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean24 = strComparableMap23.isEmpty();
        strComparableMap21.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        int int33 = strComparableMap27.size();
        java.lang.CharSequence charSequence35 = strComparableMap21.getOrDefault((java.lang.Object) strComparableMap27, (java.lang.CharSequence) "hi!");
        boolean boolean36 = strComparableMap12.equals((java.lang.Object) charSequence35);
        java.lang.CharSequence charSequence39 = strComparableMap12.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = strComparableMap8.remove((java.lang.Object) strComparableMap12);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNotNull(strComparableEntrySet10);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{null=}");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{null=}" + "'", str19, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + charSequence35 + "' != '" + "hi!" + "'", charSequence35, "hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNull(charSequence40);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap12.get((java.lang.Object) true);
        int int18 = strComparableMap12.size();
        java.lang.CharSequence charSequence20 = strComparableMap12.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence23 = strComparableMap12.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean24 = strComparableMap1.remove((java.lang.Object) (-1L), (java.lang.Object) strComparableMap12);
        boolean boolean28 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, {null=}={}}", (java.lang.CharSequence) "", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap12.get((java.lang.Object) true);
        int int18 = strComparableMap12.size();
        java.lang.CharSequence charSequence20 = strComparableMap12.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence23 = strComparableMap12.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean24 = strComparableMap1.remove((java.lang.Object) (-1L), (java.lang.Object) strComparableMap12);
        java.lang.CharSequence charSequence27 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(charSequence27);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 100, (float) (short) -1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0);
        java.lang.CharSequence charSequence3 = strComparableMap1.get((java.lang.Object) (short) 0);
        java.lang.CharSequence charSequence6 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =}");
        boolean boolean7 = strComparableMap1.isEmpty();
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet19 = strComparableMap1.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        java.lang.Object obj24 = strComparableMap22.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection25 = strComparableMap22.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable35 = null;
        java.lang.CharSequence charSequence37 = strComparableMap34.putIfAbsent(strComparable35, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence39 = strComparableMap34.get((java.lang.Object) true);
        int int40 = strComparableMap34.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection41 = strComparableMap34.values();
        boolean boolean42 = strComparableMap27.containsValue((java.lang.Object) strComparableMap34);
        boolean boolean43 = strComparableMap22.equals((java.lang.Object) strComparableMap34);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable46 = null;
        java.lang.CharSequence charSequence48 = strComparableMap45.putIfAbsent(strComparable46, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence50 = strComparableMap45.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence57 = strComparableMap52.get((java.lang.Object) true);
        int int58 = strComparableMap52.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet59 = strComparableMap52.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean64 = strComparableMap52.equals((java.lang.Object) 0);
        strComparableMap45.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        boolean boolean66 = strComparableMap22.containsValue((java.lang.Object) strComparableMap45);
        java.lang.CharSequence charSequence67 = strComparableMap20.get((java.lang.Object) strComparableMap22);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection68 = strComparableMap20.values();
        boolean boolean69 = strComparableMap1.containsValue((java.lang.Object) strComparableMap20);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet70 = strComparableMap20.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNotNull(strComparableEntrySet19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection25);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(strComparableSet59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNotNull(charSequenceCollection68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet70);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.lang.CharSequence charSequence10 = strComparableMap6.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence12 = strComparableMap6.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence14 = strComparableMap1.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap19.get((java.lang.Object) true);
        int int25 = strComparableMap19.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence45 = strComparableMap39.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean46 = strComparableMap27.remove((java.lang.Object) strComparableMap37, (java.lang.Object) "hi!");
        strComparableMap19.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable50 = null;
        java.lang.CharSequence charSequence52 = strComparableMap49.putIfAbsent(strComparable50, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence54 = strComparableMap49.get((java.lang.Object) true);
        int int55 = strComparableMap49.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable58 = null;
        java.lang.CharSequence charSequence60 = strComparableMap57.putIfAbsent(strComparable58, (java.lang.CharSequence) "");
        boolean boolean62 = strComparableMap57.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence65 = strComparableMap57.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap69 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable70 = null;
        java.lang.CharSequence charSequence72 = strComparableMap69.putIfAbsent(strComparable70, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence75 = strComparableMap69.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean76 = strComparableMap57.remove((java.lang.Object) strComparableMap67, (java.lang.Object) "hi!");
        strComparableMap49.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap67);
        strComparableMap37.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap67);
        java.lang.CharSequence charSequence81 = strComparableMap37.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet82 = strComparableMap37.keySet();
        java.lang.String str83 = strComparableMap37.toString();
        boolean boolean84 = strComparableMap1.equals((java.lang.Object) strComparableMap37);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(charSequence81);
        org.junit.Assert.assertNotNull(strComparableSet82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{{}={null=, =, hi!=hi!}}" + "'", str83, "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection13 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int16 = strComparableMap15.size();
        boolean boolean17 = strComparableMap15.isEmpty();
        strComparableMap15.clear();
        java.lang.CharSequence charSequence19 = strComparableMap1.get((java.lang.Object) strComparableMap15);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(charSequenceCollection13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(charSequence19);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        boolean boolean14 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.CharSequence charSequence26 = strComparableMap2.get((java.lang.Object) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean33 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet37 = strComparableMap29.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap39.get((java.lang.Object) true);
        int int45 = strComparableMap39.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap47.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = strComparableMap55.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet61 = strComparableMap55.entrySet();
        strComparableMap47.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap55);
        java.lang.Class<?> wildcardClass63 = strComparableMap55.getClass();
        boolean boolean64 = strComparableMap39.containsKey((java.lang.Object) wildcardClass63);
        boolean boolean65 = strComparableMap29.equals((java.lang.Object) strComparableMap39);
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable69 = null;
        java.lang.CharSequence charSequence71 = strComparableMap68.putIfAbsent(strComparable69, (java.lang.CharSequence) "");
        boolean boolean73 = strComparableMap68.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence76 = strComparableMap68.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap78 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean79 = strComparableMap78.isEmpty();
        java.lang.Object obj80 = strComparableMap78.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection81 = strComparableMap78.values();
        strComparableMap68.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap78);
        java.lang.String str83 = strComparableMap68.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap85 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean86 = strComparableMap85.isEmpty();
        java.lang.Object obj87 = strComparableMap85.clone();
        java.lang.CharSequence charSequence89 = strComparableMap85.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence91 = strComparableMap85.get((java.lang.Object) 100L);
        boolean boolean92 = strComparableMap68.containsValue((java.lang.Object) strComparableMap85);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet93 = strComparableMap85.keySet();
        java.lang.CharSequence charSequence94 = strComparableMap22.remove((java.lang.Object) strComparableSet93);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection95 = strComparableMap22.values();
        strComparableMap22.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNotNull(strComparableSet37);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNotNull(strComparableEntrySet61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(charSequence76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{null=, =}" + "'", str83, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "{}");
        org.junit.Assert.assertNull(charSequence89);
        org.junit.Assert.assertNull(charSequence91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strComparableSet93);
        org.junit.Assert.assertNull(charSequence94);
        org.junit.Assert.assertNotNull(charSequenceCollection95);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        boolean boolean14 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.CharSequence charSequence26 = strComparableMap2.get((java.lang.Object) strComparableMap22);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap22.values();
        java.lang.String str28 = strComparableMap22.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean20 = strComparableMap19.isEmpty();
        java.lang.Object obj21 = strComparableMap19.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap19.values();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean30 = strComparableMap26.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = strComparableMap26.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int34 = strComparableMap26.size();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.lang.CharSequence charSequence36 = strComparableMap1.get((java.lang.Object) strComparableMap26);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet37 = strComparableMap26.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean45 = strComparableMap41.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap41);
        java.lang.String str47 = strComparableMap46.toString();
        java.lang.String str48 = strComparableMap46.toString();
        java.lang.CharSequence charSequence50 = strComparableMap26.getOrDefault((java.lang.Object) strComparableMap46, (java.lang.CharSequence) "{{null=, =}={}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNotNull(strComparableEntrySet37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{}" + "'", str47, "{}");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{}" + "'", str48, "{}");
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "{{null=, =}={}}" + "'", charSequence50, "{{null=, =}={}}");
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap21.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean28 = strComparableMap9.remove((java.lang.Object) strComparableMap19, (java.lang.Object) "hi!");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        strComparableMap1.clear();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet31 = strComparableMap1.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableSet31);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (float) (short) 10);
        java.lang.CharSequence charSequence5 = strComparableMap2.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        java.lang.CharSequence charSequence17 = strComparableMap14.putIfAbsent(strComparable15, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = strComparableMap14.get((java.lang.Object) true);
        int int20 = strComparableMap14.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection21 = strComparableMap14.values();
        boolean boolean22 = strComparableMap7.containsValue((java.lang.Object) strComparableMap14);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean27 = strComparableMap26.isEmpty();
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet29 = strComparableMap26.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap26.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet31 = strComparableMap26.keySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection32 = strComparableMap26.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable35 = null;
        java.lang.CharSequence charSequence37 = strComparableMap34.putIfAbsent(strComparable35, (java.lang.CharSequence) "");
        boolean boolean39 = strComparableMap34.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence42 = strComparableMap34.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean45 = strComparableMap44.isEmpty();
        java.lang.Object obj46 = strComparableMap44.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection47 = strComparableMap44.values();
        strComparableMap34.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap44);
        boolean boolean49 = strComparableMap14.remove((java.lang.Object) charSequenceCollection32, (java.lang.Object) strComparableMap34);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean52 = strComparableMap51.isEmpty();
        java.lang.Object obj53 = strComparableMap51.clone();
        java.lang.CharSequence charSequence55 = strComparableMap51.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable58 = null;
        java.lang.CharSequence charSequence60 = strComparableMap57.putIfAbsent(strComparable58, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence62 = strComparableMap57.get((java.lang.Object) true);
        java.lang.Object obj63 = strComparableMap57.clone();
        java.lang.CharSequence charSequence66 = strComparableMap57.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj67 = null;
        java.lang.CharSequence charSequence68 = strComparableMap57.get(obj67);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean73 = strComparableMap72.isEmpty();
        strComparableMap70.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap72);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet75 = strComparableMap72.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection76 = strComparableMap72.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet77 = strComparableMap72.keySet();
        boolean boolean78 = strComparableMap57.equals((java.lang.Object) strComparableMap72);
        java.lang.String str79 = strComparableMap57.toString();
        boolean boolean80 = strComparableMap51.equals((java.lang.Object) strComparableMap57);
        boolean boolean84 = strComparableMap51.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap85 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        boolean boolean86 = strComparableMap2.remove((java.lang.Object) strComparableMap34, (java.lang.Object) strComparableMap85);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet87 = strComparableMap34.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet88 = strComparableMap34.entrySet();
        java.lang.CharSequence charSequence90 = null;
        boolean boolean92 = strComparableMap34.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", charSequence90, (java.lang.CharSequence) "{null=, {null=}={}}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet29);
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertNotNull(strComparableSet31);
        org.junit.Assert.assertNotNull(charSequenceCollection32);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "{null=}");
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "" + "'", charSequence68, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet75);
        org.junit.Assert.assertNotNull(charSequenceCollection76);
        org.junit.Assert.assertNotNull(strComparableSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "{null=, =}" + "'", str79, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strComparableSet87);
        org.junit.Assert.assertNotNull(strComparableEntrySet88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean31 = strComparableMap8.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet32 = strComparableMap8.entrySet();
        java.lang.Object obj33 = strComparableMap8.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable36 = null;
        java.lang.CharSequence charSequence38 = strComparableMap35.putIfAbsent(strComparable36, (java.lang.CharSequence) "");
        boolean boolean40 = strComparableMap35.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean51 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence54 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        java.lang.CharSequence charSequence61 = strComparableMap58.putIfAbsent(strComparable59, (java.lang.CharSequence) "");
        boolean boolean63 = strComparableMap58.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence66 = strComparableMap58.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean69 = strComparableMap68.isEmpty();
        java.lang.Object obj70 = strComparableMap68.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection71 = strComparableMap68.values();
        strComparableMap58.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap68);
        java.lang.String str73 = strComparableMap58.toString();
        boolean boolean74 = strComparableMap47.remove((java.lang.Object) strComparableMap56, (java.lang.Object) str73);
        boolean boolean75 = strComparableMap44.equals((java.lang.Object) strComparableMap56);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap77 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable78 = null;
        java.lang.CharSequence charSequence80 = strComparableMap77.putIfAbsent(strComparable78, (java.lang.CharSequence) "");
        boolean boolean82 = strComparableMap77.containsValue((java.lang.Object) (short) 100);
        int int83 = strComparableMap77.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap84 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence86 = strComparableMap77.getOrDefault((java.lang.Object) strComparableMap84, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap88 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean89 = strComparableMap88.isEmpty();
        java.lang.Object obj90 = strComparableMap88.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection91 = strComparableMap88.values();
        boolean boolean92 = strComparableMap56.remove((java.lang.Object) strComparableMap84, (java.lang.Object) strComparableMap88);
        strComparableMap56.clear();
        boolean boolean94 = strComparableMap35.equals((java.lang.Object) strComparableMap56);
        boolean boolean95 = strComparableMap8.equals((java.lang.Object) strComparableMap35);
        java.lang.CharSequence charSequence98 = strComparableMap35.put((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{{null=, =}={}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "{null=, =}" + "'", str73, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertEquals("'" + charSequence86 + "' != '" + "" + "'", charSequence86, "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(charSequence98);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean15 = strComparableMap14.isEmpty();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap14);
        boolean boolean17 = strComparableMap2.containsKey((java.lang.Object) strComparableMap12);
        boolean boolean18 = strComparableMap2.isEmpty();
        java.lang.CharSequence charSequence20 = null;
        boolean boolean22 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{{null=}={null=, =}}", charSequence20, (java.lang.CharSequence) "{null=, hi!=hi!}");
        java.lang.Object obj23 = null;
        boolean boolean24 = strComparableMap2.containsValue(obj23);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) ' ', (float) (byte) 10);
        java.lang.CharSequence charSequence30 = strComparableMap27.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.CharSequence charSequence32 = strComparableMap2.getOrDefault((java.lang.Object) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet17 = strComparableMap1.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strComparableSet17);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection13 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = strComparableMap15.get((java.lang.Object) true);
        int int21 = strComparableMap15.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap15.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap24.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap32.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet38 = strComparableMap32.entrySet();
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.lang.CharSequence charSequence41 = strComparableMap15.getOrDefault((java.lang.Object) strComparableMap32, (java.lang.CharSequence) "{null=, =}");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap15);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap15.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet44 = strComparableMap15.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(1, (float) 'a', true);
        strComparableMap15.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean52 = strComparableMap51.isEmpty();
        java.lang.Object obj53 = strComparableMap51.clone();
        java.lang.CharSequence charSequence55 = strComparableMap51.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence57 = strComparableMap51.get((java.lang.Object) 100L);
        boolean boolean61 = strComparableMap51.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int64 = strComparableMap63.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap63.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap68);
        java.lang.Comparable<java.lang.String> strComparable70 = null;
        boolean boolean73 = strComparableMap68.replace(strComparable70, (java.lang.CharSequence) "", (java.lang.CharSequence) "{null=, =}");
        strComparableMap68.clear();
        boolean boolean75 = strComparableMap48.remove((java.lang.Object) boolean61, (java.lang.Object) strComparableMap68);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNotNull(strComparableEntrySet38);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=, =}" + "'", charSequence41, "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertNotNull(strComparableEntrySet44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence10 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap8, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{{null=, =}={}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertNull(charSequence13);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        java.util.LinkedHashMap<java.lang.Class<?>, java.lang.CharSequence> wildcardClassMap0 = new java.util.LinkedHashMap<java.lang.Class<?>, java.lang.CharSequence>();
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence5 = null;
        java.lang.CharSequence charSequence6 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence5);
        java.lang.CharSequence charSequence9 = strComparableMap3.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet10 = strComparableMap3.entrySet();
        boolean boolean11 = strComparableMap3.isEmpty();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet12 = strComparableMap3.keySet();
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(strComparableEntrySet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strComparableSet12);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.util.Collection<java.lang.CharSequence>> comparableEntrySetMap2 = new java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.util.Collection<java.lang.CharSequence>>((int) (byte) -1, (float) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap7.get((java.lang.Object) true);
        java.lang.Object obj13 = strComparableMap7.clone();
        java.lang.CharSequence charSequence16 = strComparableMap7.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj17 = null;
        java.lang.CharSequence charSequence18 = strComparableMap7.get(obj17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap22.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap22.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap22.keySet();
        boolean boolean28 = strComparableMap7.equals((java.lang.Object) strComparableMap22);
        java.lang.String str29 = strComparableMap7.toString();
        boolean boolean30 = strComparableMap1.equals((java.lang.Object) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        boolean boolean37 = strComparableMap32.containsValue((java.lang.Object) (short) 100);
        int int38 = strComparableMap32.size();
        int int39 = strComparableMap32.size();
        java.lang.CharSequence charSequence40 = strComparableMap1.remove((java.lang.Object) strComparableMap32);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet41 = strComparableMap1.entrySet();
        boolean boolean45 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=}", (java.lang.CharSequence) "{null=, =}");
        boolean boolean46 = strComparableMap1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertNotNull(strComparableSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{null=, =}" + "'", str29, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNotNull(strComparableEntrySet41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        java.lang.String str8 = strComparableMap1.toString();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection9 = strComparableMap1.values();
        java.lang.CharSequence charSequence12 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{}");
        java.lang.CharSequence charSequence15 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, {null=, =}={null=}}", (java.lang.CharSequence) "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence15);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        boolean boolean9 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable12 = null;
        java.lang.CharSequence charSequence14 = strComparableMap11.putIfAbsent(strComparable12, (java.lang.CharSequence) "");
        boolean boolean16 = strComparableMap11.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence19 = strComparableMap11.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean22 = strComparableMap21.isEmpty();
        java.lang.Object obj23 = strComparableMap21.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection24 = strComparableMap21.values();
        strComparableMap11.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap21);
        java.lang.String str26 = strComparableMap11.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean29 = strComparableMap28.isEmpty();
        java.lang.Object obj30 = strComparableMap28.clone();
        java.lang.CharSequence charSequence32 = strComparableMap28.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence34 = strComparableMap28.get((java.lang.Object) 100L);
        boolean boolean35 = strComparableMap11.containsValue((java.lang.Object) strComparableMap28);
        boolean boolean39 = strComparableMap28.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "{null=}");
        strComparableMap28.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean43 = strComparableMap42.isEmpty();
        java.lang.Object obj44 = strComparableMap42.clone();
        java.lang.CharSequence charSequence46 = strComparableMap42.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence48 = strComparableMap42.get((java.lang.Object) 100L);
        java.lang.Object obj49 = strComparableMap42.clone();
        java.lang.CharSequence charSequence50 = strComparableMap28.remove(obj49);
        java.lang.CharSequence charSequence52 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap28, (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.io.Serializable, java.lang.Iterable<java.lang.CharSequence>> serializableMap54 = new java.util.LinkedHashMap<java.io.Serializable, java.lang.Iterable<java.lang.CharSequence>>((int) 'a');
        boolean boolean55 = strComparableMap28.containsValue((java.lang.Object) serializableMap54);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable58 = null;
        java.lang.CharSequence charSequence60 = strComparableMap57.putIfAbsent(strComparable58, (java.lang.CharSequence) "");
        boolean boolean62 = strComparableMap57.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence65 = strComparableMap57.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence68 = strComparableMap57.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap70 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int71 = strComparableMap70.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap75 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap70.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap75);
        int int77 = strComparableMap75.size();
        strComparableMap57.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap75);
        java.lang.CharSequence charSequence79 = strComparableMap28.remove((java.lang.Object) strComparableMap75);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{null=, =}" + "'", str26, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{}");
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "{}" + "'", charSequence52, "{}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNull(charSequence79);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap21.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean28 = strComparableMap9.remove((java.lang.Object) strComparableMap19, (java.lang.Object) "hi!");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        int int37 = strComparableMap31.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        boolean boolean44 = strComparableMap39.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence47 = strComparableMap39.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable52 = null;
        java.lang.CharSequence charSequence54 = strComparableMap51.putIfAbsent(strComparable52, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence57 = strComparableMap51.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean58 = strComparableMap39.remove((java.lang.Object) strComparableMap49, (java.lang.Object) "hi!");
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        strComparableMap19.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.lang.CharSequence charSequence64 = strComparableMap61.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{{null=, =}={}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(charSequence64);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean10 = strComparableMap1.isEmpty();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet11 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence21 = strComparableMap13.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean24 = strComparableMap23.isEmpty();
        java.lang.Object obj25 = strComparableMap23.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap23.values();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.lang.String str28 = strComparableMap13.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean31 = strComparableMap30.isEmpty();
        java.lang.Object obj32 = strComparableMap30.clone();
        java.lang.CharSequence charSequence34 = strComparableMap30.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence36 = strComparableMap30.get((java.lang.Object) 100L);
        boolean boolean37 = strComparableMap13.containsValue((java.lang.Object) strComparableMap30);
        boolean boolean38 = strComparableMap13.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap13);
        java.lang.CharSequence charSequence42 = strComparableMap13.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet43 = strComparableMap13.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strComparableSet11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{null=, =}" + "'", str28, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableSet43);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean20 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection40 = strComparableMap37.values();
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.lang.String str42 = strComparableMap27.toString();
        boolean boolean43 = strComparableMap16.remove((java.lang.Object) strComparableMap25, (java.lang.Object) str42);
        boolean boolean44 = strComparableMap13.equals((java.lang.Object) strComparableMap25);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        boolean boolean51 = strComparableMap46.containsValue((java.lang.Object) (short) 100);
        int int52 = strComparableMap46.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence55 = strComparableMap46.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        java.lang.Object obj59 = strComparableMap57.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection60 = strComparableMap57.values();
        boolean boolean61 = strComparableMap25.remove((java.lang.Object) strComparableMap53, (java.lang.Object) strComparableMap57);
        boolean boolean62 = strComparableMap1.equals((java.lang.Object) strComparableMap57);
        strComparableMap57.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable66 = null;
        java.lang.CharSequence charSequence68 = strComparableMap65.putIfAbsent(strComparable66, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence70 = strComparableMap65.get((java.lang.Object) true);
        int int71 = strComparableMap65.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap73 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable74 = null;
        java.lang.CharSequence charSequence76 = strComparableMap73.putIfAbsent(strComparable74, (java.lang.CharSequence) "");
        boolean boolean78 = strComparableMap73.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence81 = strComparableMap73.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap83 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap85 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable86 = null;
        java.lang.CharSequence charSequence88 = strComparableMap85.putIfAbsent(strComparable86, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence91 = strComparableMap85.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean92 = strComparableMap73.remove((java.lang.Object) strComparableMap83, (java.lang.Object) "hi!");
        strComparableMap65.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap83);
        boolean boolean94 = strComparableMap57.equals((java.lang.Object) strComparableMap83);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet95 = strComparableMap83.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{null=, =}" + "'", str42, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "" + "'", charSequence55, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNull(charSequence76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(charSequence81);
        org.junit.Assert.assertNull(charSequence88);
        org.junit.Assert.assertNull(charSequence91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(strComparableSet95);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) 10L, false);
        java.lang.String str4 = strComparableMap3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        int int4 = strComparableMap3.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean15 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = strComparableMap11.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        boolean boolean27 = strComparableMap22.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence30 = strComparableMap22.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean33 = strComparableMap32.isEmpty();
        java.lang.Object obj34 = strComparableMap32.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap32.values();
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.lang.String str37 = strComparableMap22.toString();
        boolean boolean38 = strComparableMap11.remove((java.lang.Object) strComparableMap20, (java.lang.Object) str37);
        boolean boolean39 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence50 = strComparableMap41.getOrDefault((java.lang.Object) strComparableMap48, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean53 = strComparableMap52.isEmpty();
        java.lang.Object obj54 = strComparableMap52.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection55 = strComparableMap52.values();
        boolean boolean56 = strComparableMap20.remove((java.lang.Object) strComparableMap48, (java.lang.Object) strComparableMap52);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet57 = strComparableMap52.entrySet();
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean61 = strComparableMap60.isEmpty();
        java.lang.Object obj62 = strComparableMap60.clone();
        java.lang.CharSequence charSequence64 = strComparableMap60.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable67 = null;
        java.lang.CharSequence charSequence69 = strComparableMap66.putIfAbsent(strComparable67, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence71 = strComparableMap66.get((java.lang.Object) true);
        java.lang.Object obj72 = strComparableMap66.clone();
        java.lang.CharSequence charSequence75 = strComparableMap66.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj76 = null;
        java.lang.CharSequence charSequence77 = strComparableMap66.get(obj76);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap79 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap81 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean82 = strComparableMap81.isEmpty();
        strComparableMap79.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap81);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet84 = strComparableMap81.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection85 = strComparableMap81.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet86 = strComparableMap81.keySet();
        boolean boolean87 = strComparableMap66.equals((java.lang.Object) strComparableMap81);
        java.lang.String str88 = strComparableMap66.toString();
        boolean boolean89 = strComparableMap60.equals((java.lang.Object) strComparableMap66);
        java.lang.CharSequence charSequence91 = strComparableMap3.getOrDefault((java.lang.Object) strComparableMap66, (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection92 = strComparableMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet93 = strComparableMap3.entrySet();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{null=, =}" + "'", str37, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "" + "'", charSequence50, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "{null=}");
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "" + "'", charSequence77, "");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet84);
        org.junit.Assert.assertNotNull(charSequenceCollection85);
        org.junit.Assert.assertNotNull(strComparableSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "{null=, =}" + "'", str88, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "{null=, =, hi!=hi!}" + "'", charSequence91, "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNotNull(charSequenceCollection92);
        org.junit.Assert.assertNotNull(strComparableEntrySet93);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.Class<?>> genericDeclarationMap1 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.lang.Class<?>>(0);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap10.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap10.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean32 = strComparableMap28.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence35 = strComparableMap28.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        boolean boolean44 = strComparableMap39.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence47 = strComparableMap39.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean50 = strComparableMap49.isEmpty();
        java.lang.Object obj51 = strComparableMap49.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection52 = strComparableMap49.values();
        strComparableMap39.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        java.lang.String str54 = strComparableMap39.toString();
        boolean boolean55 = strComparableMap28.remove((java.lang.Object) strComparableMap37, (java.lang.Object) str54);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable58 = null;
        java.lang.CharSequence charSequence60 = strComparableMap57.putIfAbsent(strComparable58, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence62 = strComparableMap57.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet63 = strComparableMap57.entrySet();
        java.lang.String str64 = strComparableMap57.toString();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection65 = strComparableMap57.values();
        boolean boolean66 = strComparableMap28.equals((java.lang.Object) strComparableMap57);
        boolean boolean70 = strComparableMap28.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet71 = strComparableMap28.keySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap28);
        boolean boolean73 = strComparableMap1.containsValue((java.lang.Object) strComparableMap10);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet74 = strComparableMap10.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{null=, =}" + "'", str54, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertNotNull(strComparableEntrySet63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "{null=}" + "'", str64, "{null=}");
        org.junit.Assert.assertNotNull(charSequenceCollection65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strComparableSet71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet74);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection19 = strComparableMap18.values();
        strComparableMap18.clear();
        boolean boolean21 = strComparableMap1.containsKey((java.lang.Object) strComparableMap18);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet22 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.lang.CharSequence charSequence26 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNotNull(charSequenceCollection19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strComparableSet22);
        org.junit.Assert.assertNull(charSequence26);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap0 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean3 = strComparableMap2.isEmpty();
        java.lang.Object obj4 = strComparableMap2.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection5 = strComparableMap2.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        java.lang.CharSequence charSequence17 = strComparableMap14.putIfAbsent(strComparable15, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = strComparableMap14.get((java.lang.Object) true);
        int int20 = strComparableMap14.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection21 = strComparableMap14.values();
        boolean boolean22 = strComparableMap7.containsValue((java.lang.Object) strComparableMap14);
        boolean boolean23 = strComparableMap2.equals((java.lang.Object) strComparableMap14);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        java.lang.CharSequence charSequence28 = strComparableMap25.putIfAbsent(strComparable26, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap25.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap32.get((java.lang.Object) true);
        int int38 = strComparableMap32.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet39 = strComparableMap32.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean44 = strComparableMap32.equals((java.lang.Object) 0);
        strComparableMap25.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        boolean boolean46 = strComparableMap2.containsValue((java.lang.Object) strComparableMap25);
        java.lang.CharSequence charSequence47 = strComparableMap0.get((java.lang.Object) strComparableMap2);
        boolean boolean51 = strComparableMap0.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet52 = strComparableMap0.keySet();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(strComparableSet39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strComparableSet52);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean26 = strComparableMap25.isEmpty();
        java.lang.Object obj27 = strComparableMap25.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection28 = strComparableMap25.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable31 = null;
        java.lang.CharSequence charSequence33 = strComparableMap30.putIfAbsent(strComparable31, (java.lang.CharSequence) "");
        boolean boolean35 = strComparableMap30.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        int int43 = strComparableMap37.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection44 = strComparableMap37.values();
        boolean boolean45 = strComparableMap30.containsValue((java.lang.Object) strComparableMap37);
        boolean boolean46 = strComparableMap25.equals((java.lang.Object) strComparableMap37);
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap25);
        boolean boolean48 = strComparableMap25.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet49 = strComparableMap25.entrySet();
        java.lang.CharSequence charSequence51 = strComparableMap9.getOrDefault((java.lang.Object) strComparableMap25, (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap25);
        java.lang.CharSequence charSequence55 = strComparableMap52.put((java.lang.Comparable<java.lang.String>) "{null=, {null=}={}}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection28);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet49);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "{null=, =, hi!=hi!}" + "'", charSequence51, "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence55);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap1.keySet();
        boolean boolean9 = strComparableMap1.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        boolean boolean11 = strComparableMap6.replace(strComparable8, (java.lang.CharSequence) "", (java.lang.CharSequence) "{null=, =}");
        java.lang.Comparable<java.lang.String> strComparable12 = null;
        java.lang.CharSequence charSequence14 = strComparableMap6.put(strComparable12, (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        boolean boolean21 = strComparableMap16.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence24 = strComparableMap16.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap16.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection28 = strComparableMap16.values();
        java.lang.CharSequence charSequence31 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence32 = strComparableMap6.get((java.lang.Object) strComparableMap16);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection28);
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "" + "'", charSequence31, "");
        org.junit.Assert.assertNull(charSequence32);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet6 = strComparableMap3.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection7 = strComparableMap3.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap3.keySet();
        java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>> charSequenceIterableMap9 = new java.util.LinkedHashMap<java.lang.Iterable<java.lang.CharSequence>, java.lang.Iterable<java.lang.CharSequence>>();
        java.lang.CharSequence charSequence10 = strComparableMap3.remove((java.lang.Object) charSequenceIterableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (float) (short) 10);
        java.lang.CharSequence charSequence16 = strComparableMap13.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        boolean boolean17 = strComparableMap3.containsValue((java.lang.Object) charSequence16);
        java.lang.Object obj18 = strComparableMap3.clone();
        java.lang.CharSequence charSequence21 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass22 = strComparableMap3.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet6);
        org.junit.Assert.assertNotNull(charSequenceCollection7);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        boolean boolean9 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.CharSequence> cloneableMap12 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.CharSequence>((int) 'a', (float) (short) 100);
        boolean boolean13 = strComparableMap3.equals((java.lang.Object) cloneableMap12);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet14 = strComparableMap3.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap3.entrySet();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strComparableSet14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (float) (short) 10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap4 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean5 = strComparableMap4.isEmpty();
        java.lang.Object obj6 = strComparableMap4.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        strComparableMap8.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap10);
        strComparableMap4.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap10);
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap4.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = strComparableMap4.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.Object obj25 = strComparableMap21.clone();
        boolean boolean26 = strComparableMap2.remove((java.lang.Object) "{}", (java.lang.Object) strComparableMap21);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) 1L, false);
        boolean boolean31 = strComparableMap2.containsValue((java.lang.Object) 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{null=}");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable4 = null;
        java.lang.CharSequence charSequence6 = strComparableMap3.putIfAbsent(strComparable4, (java.lang.CharSequence) "");
        boolean boolean8 = strComparableMap3.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence11 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap3.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean21 = strComparableMap1.containsKey((java.lang.Object) charSequence20);
        java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.ConstantDesc> comparableEntrySetMap22 = new java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.constant.ConstantDesc>();
        java.lang.CharSequence charSequence23 = strComparableMap1.get((java.lang.Object) comparableEntrySetMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(1, (float) 1);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.lang.CharSequence charSequence30 = strComparableMap26.put((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap32.get((java.lang.Object) true);
        java.lang.Object obj38 = strComparableMap32.clone();
        java.lang.CharSequence charSequence41 = strComparableMap32.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj42 = null;
        java.lang.CharSequence charSequence43 = strComparableMap32.get(obj42);
        strComparableMap32.clear();
        java.lang.CharSequence charSequence47 = strComparableMap32.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean50 = strComparableMap49.isEmpty();
        java.lang.Object obj51 = strComparableMap49.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection52 = strComparableMap49.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        boolean boolean59 = strComparableMap54.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable62 = null;
        java.lang.CharSequence charSequence64 = strComparableMap61.putIfAbsent(strComparable62, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence66 = strComparableMap61.get((java.lang.Object) true);
        int int67 = strComparableMap61.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection68 = strComparableMap61.values();
        boolean boolean69 = strComparableMap54.containsValue((java.lang.Object) strComparableMap61);
        boolean boolean70 = strComparableMap49.equals((java.lang.Object) strComparableMap61);
        boolean boolean71 = strComparableMap32.containsValue((java.lang.Object) boolean70);
        boolean boolean72 = strComparableMap26.containsValue((java.lang.Object) strComparableMap32);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{null=}");
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "" + "'", charSequence43, "");
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection52);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = strComparableMap10.get((java.lang.Object) true);
        int int16 = strComparableMap10.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap18.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap26.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence31 = strComparableMap26.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet32 = strComparableMap26.entrySet();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.lang.Class<?> wildcardClass34 = strComparableMap26.getClass();
        boolean boolean35 = strComparableMap10.containsKey((java.lang.Object) wildcardClass34);
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) strComparableMap10);
        java.lang.CharSequence charSequence38 = strComparableMap10.remove((java.lang.Object) true);
        java.lang.Class<?> wildcardClass39 = strComparableMap10.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNotNull(strComparableEntrySet32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        int int13 = strComparableMap7.size();
        java.lang.CharSequence charSequence15 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap7, (java.lang.CharSequence) "hi!");
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean21 = strComparableMap20.isEmpty();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        boolean boolean29 = strComparableMap24.containsValue((java.lang.Object) (short) 100);
        int int30 = strComparableMap24.size();
        java.lang.CharSequence charSequence32 = strComparableMap18.getOrDefault((java.lang.Object) strComparableMap24, (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable35 = null;
        java.lang.CharSequence charSequence37 = strComparableMap34.putIfAbsent(strComparable35, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence39 = strComparableMap34.get((java.lang.Object) true);
        java.lang.Object obj40 = strComparableMap34.clone();
        java.lang.CharSequence charSequence43 = strComparableMap34.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj44 = null;
        java.lang.CharSequence charSequence45 = strComparableMap34.get(obj44);
        strComparableMap34.clear();
        boolean boolean47 = strComparableMap24.containsKey((java.lang.Object) strComparableMap34);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap24);
        boolean boolean52 = strComparableMap24.replace((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.io.Serializable, java.lang.reflect.AnnotatedElement> serializableMap55 = new java.util.LinkedHashMap<java.io.Serializable, java.lang.reflect.AnnotatedElement>((int) ' ', 100.0f);
        boolean boolean56 = strComparableMap24.containsValue((java.lang.Object) serializableMap55);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{null=}");
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet10 = strComparableMap2.keySet();
        java.lang.CharSequence charSequence13 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(strComparableSet10);
        org.junit.Assert.assertNull(charSequence13);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        boolean boolean9 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.CharSequence> cloneableMap12 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.CharSequence>((int) 'a', (float) (short) 100);
        boolean boolean13 = strComparableMap3.equals((java.lang.Object) cloneableMap12);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet14 = strComparableMap3.keySet();
        java.lang.CharSequence charSequence17 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=, hi!=hi!}", (java.lang.CharSequence) "{null=, {null=}={}}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strComparableSet14);
        org.junit.Assert.assertNull(charSequence17);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int15 = strComparableMap14.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        int int21 = strComparableMap19.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.lang.CharSequence charSequence25 = strComparableMap19.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        java.lang.CharSequence charSequence27 = null;
        boolean boolean29 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "", charSequence27, (java.lang.CharSequence) "{null=, {null=, =}={null=}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        boolean boolean11 = strComparableMap1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet12 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence15 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        int int32 = strComparableMap27.size();
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet36 = strComparableMap27.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet37 = strComparableMap27.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet12);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNotNull(strComparableEntrySet36);
        org.junit.Assert.assertNotNull(strComparableEntrySet37);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10);
        java.lang.CharSequence charSequence4 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence14 = strComparableMap6.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap6.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection18 = strComparableMap6.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable30 = null;
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent(strComparable30, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap29.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap37.entrySet();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.lang.CharSequence charSequence46 = strComparableMap20.getOrDefault((java.lang.Object) strComparableMap37, (java.lang.CharSequence) "{null=, =}");
        strComparableMap6.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet48 = strComparableMap20.entrySet();
        java.lang.CharSequence charSequence49 = strComparableMap1.get((java.lang.Object) strComparableMap20);
        java.lang.String str50 = strComparableMap20.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "{null=, =}" + "'", charSequence46, "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet48);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{null=}" + "'", str50, "{null=}");
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0, (float) 100L, true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet4 = strComparableMap3.entrySet();
        int int5 = strComparableMap3.size();
        org.junit.Assert.assertNotNull(strComparableEntrySet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean21 = strComparableMap20.isEmpty();
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap20);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet23 = strComparableMap20.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection24 = strComparableMap20.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet25 = strComparableMap20.keySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap20.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        boolean boolean33 = strComparableMap28.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence36 = strComparableMap28.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean39 = strComparableMap38.isEmpty();
        java.lang.Object obj40 = strComparableMap38.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection41 = strComparableMap38.values();
        strComparableMap28.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        boolean boolean43 = strComparableMap8.remove((java.lang.Object) charSequenceCollection26, (java.lang.Object) strComparableMap28);
        boolean boolean44 = strComparableMap28.isEmpty();
        java.lang.Class<?> wildcardClass45 = strComparableMap28.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet23);
        org.junit.Assert.assertNotNull(charSequenceCollection24);
        org.junit.Assert.assertNotNull(strComparableSet25);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) 1L, false);
        boolean boolean7 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{{null=, =}={}}", (java.lang.CharSequence) "{null=}", (java.lang.CharSequence) "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        boolean boolean51 = strComparableMap15.remove((java.lang.Object) strComparableMap43, (java.lang.Object) strComparableMap47);
        java.lang.Object obj52 = strComparableMap15.clone();
        strComparableMap15.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.lang.Class<?> wildcardClass58 = strComparableMap57.getClass();
        java.lang.CharSequence charSequence59 = strComparableMap15.remove((java.lang.Object) wildcardClass58);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int62 = strComparableMap61.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap61.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap66);
        java.lang.CharSequence charSequence70 = strComparableMap61.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence73 = strComparableMap61.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap77 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.lang.CharSequence charSequence78 = strComparableMap61.get((java.lang.Object) 'a');
        strComparableMap61.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap81 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable82 = null;
        java.lang.CharSequence charSequence84 = strComparableMap81.putIfAbsent(strComparable82, (java.lang.CharSequence) "");
        boolean boolean86 = strComparableMap81.containsValue((java.lang.Object) (short) 100);
        int int87 = strComparableMap81.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap88 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence90 = strComparableMap81.getOrDefault((java.lang.Object) strComparableMap88, (java.lang.CharSequence) "");
        boolean boolean91 = strComparableMap61.equals((java.lang.Object) strComparableMap88);
        boolean boolean95 = strComparableMap61.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        boolean boolean96 = strComparableMap15.equals((java.lang.Object) boolean95);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{}");
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertNull(charSequence78);
        org.junit.Assert.assertNull(charSequence84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertEquals("'" + charSequence90 + "' != '" + "" + "'", charSequence90, "");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet4 = strComparableMap3.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection9 = strComparableMap6.values();
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        boolean boolean17 = strComparableMap12.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence20 = strComparableMap12.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap12.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection24 = strComparableMap12.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap26.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence31 = strComparableMap26.get((java.lang.Object) true);
        int int32 = strComparableMap26.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection33 = strComparableMap26.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable36 = null;
        java.lang.CharSequence charSequence38 = strComparableMap35.putIfAbsent(strComparable36, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence41 = strComparableMap35.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable44 = null;
        java.lang.CharSequence charSequence46 = strComparableMap43.putIfAbsent(strComparable44, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence48 = strComparableMap43.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet49 = strComparableMap43.entrySet();
        strComparableMap35.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap43);
        java.lang.CharSequence charSequence52 = strComparableMap26.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "{null=, =}");
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.lang.CharSequence charSequence54 = strComparableMap3.get((java.lang.Object) strComparableMap26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable57 = null;
        java.lang.CharSequence charSequence59 = strComparableMap56.putIfAbsent(strComparable57, (java.lang.CharSequence) "");
        boolean boolean61 = strComparableMap56.containsValue((java.lang.Object) (short) 100);
        int int62 = strComparableMap56.size();
        boolean boolean63 = strComparableMap56.isEmpty();
        java.lang.CharSequence charSequence66 = strComparableMap56.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.lang.String str67 = strComparableMap56.toString();
        java.lang.CharSequence charSequence70 = strComparableMap56.replace((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable73 = null;
        java.lang.CharSequence charSequence75 = strComparableMap72.putIfAbsent(strComparable73, (java.lang.CharSequence) "");
        boolean boolean77 = strComparableMap72.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence80 = strComparableMap72.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean81 = strComparableMap56.equals((java.lang.Object) charSequence80);
        boolean boolean82 = strComparableMap26.equals((java.lang.Object) boolean81);
        org.junit.Assert.assertNotNull(strComparableEntrySet4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection9);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "hi!" + "'", charSequence23, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection24);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection33);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNotNull(strComparableEntrySet49);
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "{null=, =}" + "'", charSequence52, "{null=, =}");
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "{null=, {null=, =}={null=}}" + "'", str67, "{null=, {null=, =}={null=}}");
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertNull(charSequence75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean31 = strComparableMap8.isEmpty();
        java.lang.CharSequence charSequence34 = strComparableMap8.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        boolean boolean43 = strComparableMap36.isEmpty();
        java.lang.CharSequence charSequence45 = strComparableMap8.getOrDefault((java.lang.Object) strComparableMap36, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence48 = strComparableMap36.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean49 = strComparableMap36.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean52 = strComparableMap51.isEmpty();
        java.lang.Object obj53 = strComparableMap51.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection54 = strComparableMap51.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable57 = null;
        java.lang.CharSequence charSequence59 = strComparableMap56.putIfAbsent(strComparable57, (java.lang.CharSequence) "");
        boolean boolean61 = strComparableMap56.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable64 = null;
        java.lang.CharSequence charSequence66 = strComparableMap63.putIfAbsent(strComparable64, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence68 = strComparableMap63.get((java.lang.Object) true);
        int int69 = strComparableMap63.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection70 = strComparableMap63.values();
        boolean boolean71 = strComparableMap56.containsValue((java.lang.Object) strComparableMap63);
        boolean boolean72 = strComparableMap51.equals((java.lang.Object) strComparableMap63);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap74 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable75 = null;
        java.lang.CharSequence charSequence77 = strComparableMap74.putIfAbsent(strComparable75, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence79 = strComparableMap74.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap81 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable82 = null;
        java.lang.CharSequence charSequence84 = strComparableMap81.putIfAbsent(strComparable82, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence86 = strComparableMap81.get((java.lang.Object) true);
        int int87 = strComparableMap81.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet88 = strComparableMap81.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap92 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean93 = strComparableMap81.equals((java.lang.Object) 0);
        strComparableMap74.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap81);
        boolean boolean95 = strComparableMap51.containsValue((java.lang.Object) strComparableMap74);
        strComparableMap36.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap51);
        java.lang.CharSequence charSequence99 = strComparableMap51.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection54);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertNull(charSequence84);
        org.junit.Assert.assertNull(charSequence86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(strComparableSet88);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(charSequence99);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        int int8 = strComparableMap6.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet9 = strComparableMap6.keySet();
        java.lang.Object obj10 = strComparableMap6.clone();
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap6.getOrDefault(obj11, (java.lang.CharSequence) "{null=, {null=}={}}");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strComparableSet9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "{null=, {null=}={}}" + "'", charSequence13, "{null=, {null=}={}}");
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        boolean boolean29 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, {null=, =}={null=}}", (java.lang.CharSequence) "{null=, =, {null=, =}={null=}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        strComparableMap1.clear();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection7 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection13 = strComparableMap10.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        boolean boolean20 = strComparableMap15.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap22.get((java.lang.Object) true);
        int int28 = strComparableMap22.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection29 = strComparableMap22.values();
        boolean boolean30 = strComparableMap15.containsValue((java.lang.Object) strComparableMap22);
        boolean boolean31 = strComparableMap10.equals((java.lang.Object) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable34 = null;
        java.lang.CharSequence charSequence36 = strComparableMap33.putIfAbsent(strComparable34, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence38 = strComparableMap33.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable41 = null;
        java.lang.CharSequence charSequence43 = strComparableMap40.putIfAbsent(strComparable41, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence45 = strComparableMap40.get((java.lang.Object) true);
        int int46 = strComparableMap40.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet47 = strComparableMap40.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean52 = strComparableMap40.equals((java.lang.Object) 0);
        strComparableMap33.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap40);
        boolean boolean54 = strComparableMap10.containsValue((java.lang.Object) strComparableMap33);
        java.lang.CharSequence charSequence55 = strComparableMap8.get((java.lang.Object) strComparableMap10);
        boolean boolean59 = strComparableMap8.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{}");
        java.lang.String str60 = strComparableMap8.toString();
        java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.lang.Iterable<java.lang.CharSequence>> constantDescMap64 = new java.util.LinkedHashMap<java.lang.constant.ConstantDesc, java.lang.Iterable<java.lang.CharSequence>>((int) '4', (float) (byte) 10, true);
        boolean boolean65 = strComparableMap8.containsValue((java.lang.Object) (byte) 10);
        java.lang.CharSequence charSequence68 = strComparableMap8.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{{null=, =}={}}");
        java.lang.CharSequence charSequence69 = strComparableMap1.get((java.lang.Object) strComparableMap8);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNotNull(charSequenceCollection7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(strComparableSet47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{}" + "'", str60, "{}");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNull(charSequence69);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet3 = strComparableMap2.entrySet();
        java.lang.CharSequence charSequence5 = strComparableMap2.get((java.lang.Object) (-1.0d));
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap7.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap14);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean26 = strComparableMap22.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = strComparableMap22.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable34 = null;
        java.lang.CharSequence charSequence36 = strComparableMap33.putIfAbsent(strComparable34, (java.lang.CharSequence) "");
        boolean boolean38 = strComparableMap33.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence41 = strComparableMap33.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean44 = strComparableMap43.isEmpty();
        java.lang.Object obj45 = strComparableMap43.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection46 = strComparableMap43.values();
        strComparableMap33.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap43);
        java.lang.String str48 = strComparableMap33.toString();
        boolean boolean49 = strComparableMap22.remove((java.lang.Object) strComparableMap31, (java.lang.Object) str48);
        boolean boolean50 = strComparableMap19.equals((java.lang.Object) strComparableMap31);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        boolean boolean57 = strComparableMap52.containsValue((java.lang.Object) (short) 100);
        int int58 = strComparableMap52.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence61 = strComparableMap52.getOrDefault((java.lang.Object) strComparableMap59, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean64 = strComparableMap63.isEmpty();
        java.lang.Object obj65 = strComparableMap63.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection66 = strComparableMap63.values();
        boolean boolean67 = strComparableMap31.remove((java.lang.Object) strComparableMap59, (java.lang.Object) strComparableMap63);
        boolean boolean68 = strComparableMap7.equals((java.lang.Object) strComparableMap63);
        boolean boolean72 = strComparableMap7.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "{null=}");
        int int73 = strComparableMap7.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap74 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        boolean boolean75 = strComparableMap2.equals((java.lang.Object) strComparableMap74);
        org.junit.Assert.assertNotNull(strComparableEntrySet3);
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{null=, =}" + "'", str48, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "" + "'", charSequence61, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap1.keySet();
        java.lang.CharSequence charSequence11 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int12 = strComparableMap1.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap37.entrySet();
        java.lang.String str44 = strComparableMap37.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean47 = strComparableMap46.isEmpty();
        java.lang.Object obj48 = strComparableMap46.clone();
        java.lang.CharSequence charSequence50 = strComparableMap46.remove((java.lang.Object) true);
        boolean boolean54 = strComparableMap46.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean55 = strComparableMap37.equals((java.lang.Object) "");
        java.lang.CharSequence charSequence56 = strComparableMap1.remove((java.lang.Object) strComparableMap37);
        java.lang.CharSequence charSequence59 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet60 = strComparableMap1.keySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{null=}" + "'", str44, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{}");
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "" + "'", charSequence59, "");
        org.junit.Assert.assertNotNull(strComparableSet60);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap2);
        java.lang.CharSequence charSequence10 = strComparableMap7.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap7.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence10);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap2);
        java.lang.Object obj8 = strComparableMap2.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap10.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap18.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean35 = strComparableMap34.isEmpty();
        java.lang.Object obj36 = strComparableMap34.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection37 = strComparableMap34.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        boolean boolean44 = strComparableMap39.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        int int52 = strComparableMap46.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection53 = strComparableMap46.values();
        boolean boolean54 = strComparableMap39.containsValue((java.lang.Object) strComparableMap46);
        boolean boolean55 = strComparableMap34.equals((java.lang.Object) strComparableMap46);
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap34);
        boolean boolean57 = strComparableMap34.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet58 = strComparableMap34.entrySet();
        java.lang.CharSequence charSequence60 = strComparableMap18.getOrDefault((java.lang.Object) strComparableMap34, (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap34);
        boolean boolean62 = strComparableMap2.equals((java.lang.Object) strComparableMap34);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection37);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet58);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "{null=, =, hi!=hi!}" + "'", charSequence60, "{null=, =, hi!=hi!}");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(1, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence8 = strComparableMap5.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap5);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence16 = strComparableMap13.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet17 = strComparableMap13.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap19.get((java.lang.Object) true);
        java.lang.Object obj25 = strComparableMap19.clone();
        java.lang.CharSequence charSequence28 = strComparableMap19.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj29 = null;
        java.lang.CharSequence charSequence30 = strComparableMap19.get(obj29);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean35 = strComparableMap34.isEmpty();
        strComparableMap32.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap34);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet37 = strComparableMap34.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection38 = strComparableMap34.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet39 = strComparableMap34.keySet();
        boolean boolean40 = strComparableMap19.equals((java.lang.Object) strComparableMap34);
        java.lang.String str41 = strComparableMap19.toString();
        java.lang.CharSequence charSequence44 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        java.lang.Object obj52 = strComparableMap46.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        boolean boolean59 = strComparableMap54.containsValue((java.lang.Object) (short) 100);
        int int60 = strComparableMap54.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence63 = strComparableMap54.getOrDefault((java.lang.Object) strComparableMap61, (java.lang.CharSequence) "");
        java.lang.String str64 = strComparableMap54.toString();
        boolean boolean65 = strComparableMap19.remove(obj52, (java.lang.Object) str64);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable69 = null;
        java.lang.CharSequence charSequence71 = strComparableMap68.putIfAbsent(strComparable69, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence73 = strComparableMap68.get((java.lang.Object) true);
        int int74 = strComparableMap68.size();
        java.lang.CharSequence charSequence76 = strComparableMap68.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence79 = strComparableMap68.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj80 = strComparableMap68.clone();
        boolean boolean81 = strComparableMap13.remove((java.lang.Object) strComparableMap66, (java.lang.Object) strComparableMap68);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet82 = strComparableMap66.keySet();
        boolean boolean83 = strComparableMap5.containsValue((java.lang.Object) strComparableMap66);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet84 = strComparableMap66.keySet();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet85 = strComparableMap66.keySet();
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNotNull(strComparableEntrySet17);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{null=}");
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "" + "'", charSequence30, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet37);
        org.junit.Assert.assertNotNull(charSequenceCollection38);
        org.junit.Assert.assertNotNull(strComparableSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{null=, =}" + "'", str41, "{null=, =}");
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{null=}");
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "" + "'", charSequence63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "{null=}" + "'", str64, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNull(charSequence76);
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strComparableSet82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strComparableSet84);
        org.junit.Assert.assertNotNull(strComparableSet85);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        java.lang.Object obj35 = strComparableMap15.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        boolean boolean42 = strComparableMap37.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable45 = null;
        java.lang.CharSequence charSequence47 = strComparableMap44.putIfAbsent(strComparable45, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence49 = strComparableMap44.get((java.lang.Object) true);
        int int50 = strComparableMap44.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection51 = strComparableMap44.values();
        boolean boolean52 = strComparableMap37.containsValue((java.lang.Object) strComparableMap44);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean57 = strComparableMap56.isEmpty();
        strComparableMap54.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap56);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet59 = strComparableMap56.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection60 = strComparableMap56.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet61 = strComparableMap56.keySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection62 = strComparableMap56.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable65 = null;
        java.lang.CharSequence charSequence67 = strComparableMap64.putIfAbsent(strComparable65, (java.lang.CharSequence) "");
        boolean boolean69 = strComparableMap64.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence72 = strComparableMap64.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap74 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean75 = strComparableMap74.isEmpty();
        java.lang.Object obj76 = strComparableMap74.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection77 = strComparableMap74.values();
        strComparableMap64.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap74);
        boolean boolean79 = strComparableMap44.remove((java.lang.Object) charSequenceCollection62, (java.lang.Object) strComparableMap64);
        java.lang.CharSequence charSequence81 = strComparableMap15.getOrDefault((java.lang.Object) charSequenceCollection62, (java.lang.CharSequence) "{null=, {null=, =}={null=}}");
        java.lang.Class<?> wildcardClass82 = charSequence81.getClass();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{}");
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet59);
        org.junit.Assert.assertNotNull(charSequenceCollection60);
        org.junit.Assert.assertNotNull(strComparableSet61);
        org.junit.Assert.assertNotNull(charSequenceCollection62);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + charSequence81 + "' != '" + "{null=, {null=, =}={null=}}" + "'", charSequence81, "{null=, {null=, =}={null=}}");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet6 = strComparableMap3.entrySet();
        boolean boolean7 = strComparableMap3.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        int int22 = strComparableMap16.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection23 = strComparableMap16.values();
        boolean boolean24 = strComparableMap9.containsValue((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap26.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        boolean boolean31 = strComparableMap26.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence34 = strComparableMap26.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap26.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = strComparableMap26.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence43 = strComparableMap26.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean44 = strComparableMap9.containsValue((java.lang.Object) "{null=, =}");
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet46 = strComparableMap3.keySet();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strComparableSet46);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.lang.CharSequence charSequence10 = strComparableMap6.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence12 = strComparableMap6.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence14 = strComparableMap1.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean20 = strComparableMap19.isEmpty();
        java.lang.Object obj21 = strComparableMap19.clone();
        java.lang.CharSequence charSequence23 = strComparableMap19.remove((java.lang.Object) true);
        boolean boolean27 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        strComparableMap19.clear();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean33 = strComparableMap32.isEmpty();
        java.lang.Object obj34 = strComparableMap32.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap32.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        boolean boolean42 = strComparableMap37.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable45 = null;
        java.lang.CharSequence charSequence47 = strComparableMap44.putIfAbsent(strComparable45, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence49 = strComparableMap44.get((java.lang.Object) true);
        int int50 = strComparableMap44.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection51 = strComparableMap44.values();
        boolean boolean52 = strComparableMap37.containsValue((java.lang.Object) strComparableMap44);
        boolean boolean53 = strComparableMap32.equals((java.lang.Object) strComparableMap44);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = strComparableMap55.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable63 = null;
        java.lang.CharSequence charSequence65 = strComparableMap62.putIfAbsent(strComparable63, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence67 = strComparableMap62.get((java.lang.Object) true);
        int int68 = strComparableMap62.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet69 = strComparableMap62.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap73 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean74 = strComparableMap62.equals((java.lang.Object) 0);
        strComparableMap55.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        boolean boolean76 = strComparableMap32.containsValue((java.lang.Object) strComparableMap55);
        java.lang.CharSequence charSequence77 = strComparableMap30.get((java.lang.Object) strComparableMap32);
        strComparableMap19.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap30);
        int int79 = strComparableMap30.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap83 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) (short) 100, true);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection84 = strComparableMap83.values();
        java.lang.CharSequence charSequence85 = strComparableMap30.remove((java.lang.Object) charSequenceCollection84);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{}");
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(strComparableSet69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(charSequenceCollection84);
        org.junit.Assert.assertNull(charSequence85);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence26 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap18.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence41 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap39, (java.lang.CharSequence) "{null=}");
        java.lang.Object obj42 = strComparableMap39.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=}" + "'", charSequence41, "{null=}");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{}");
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap1.put(strComparable11, (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = strComparableMap15.get((java.lang.Object) true);
        int int21 = strComparableMap15.size();
        java.lang.CharSequence charSequence23 = strComparableMap15.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence26 = strComparableMap15.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj27 = strComparableMap15.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap31.entrySet();
        boolean boolean35 = strComparableMap31.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        boolean boolean42 = strComparableMap37.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable45 = null;
        java.lang.CharSequence charSequence47 = strComparableMap44.putIfAbsent(strComparable45, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence49 = strComparableMap44.get((java.lang.Object) true);
        int int50 = strComparableMap44.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection51 = strComparableMap44.values();
        boolean boolean52 = strComparableMap37.containsValue((java.lang.Object) strComparableMap44);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        boolean boolean59 = strComparableMap54.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence62 = strComparableMap54.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence65 = strComparableMap54.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence68 = strComparableMap54.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence71 = strComparableMap54.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean72 = strComparableMap37.containsValue((java.lang.Object) "{null=, =}");
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        boolean boolean74 = strComparableMap1.remove(obj27, (java.lang.Object) strComparableMap37);
        java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.Class<?>> typeMap78 = new java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.Class<?>>(0, (float) 100, true);
        boolean boolean79 = strComparableMap37.equals((java.lang.Object) true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        java.util.LinkedHashMap<java.lang.Object, java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>> objMap0 = new java.util.LinkedHashMap<java.lang.Object, java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>>();
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        boolean boolean29 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "{null=}");
        java.lang.String str30 = strComparableMap18.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        int int11 = strComparableMap1.size();
        strComparableMap1.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        boolean boolean9 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        strComparableMap1.clear();
        java.lang.Object obj11 = null;
        boolean boolean12 = strComparableMap1.equals(obj11);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet13 = strComparableMap1.keySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strComparableSet13);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeMap2 = new java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>((int) (short) 1, (float) (byte) 10);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap13.get((java.lang.Object) true);
        int int19 = strComparableMap13.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap13.values();
        boolean boolean21 = strComparableMap6.containsValue((java.lang.Object) strComparableMap13);
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap13);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap24.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        int int37 = strComparableMap31.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet38 = strComparableMap31.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean43 = strComparableMap31.equals((java.lang.Object) 0);
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        boolean boolean45 = strComparableMap1.containsValue((java.lang.Object) strComparableMap24);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap50 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean51 = strComparableMap50.isEmpty();
        strComparableMap48.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap50);
        boolean boolean56 = strComparableMap50.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.CharSequence> cloneableMap59 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.CharSequence>((int) 'a', (float) (short) 100);
        boolean boolean60 = strComparableMap50.equals((java.lang.Object) cloneableMap59);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap50);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(strComparableSet38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> genericDeclarationMap3 = new java.util.LinkedHashMap<java.lang.reflect.GenericDeclaration, java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((int) (short) -1, (float) (-1L), false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        java.util.LinkedHashMap<java.lang.Class<?>, java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> wildcardClassMap3 = new java.util.LinkedHashMap<java.lang.Class<?>, java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>((int) '#', 100.0f, false);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet19 = strComparableMap16.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap16.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet21 = strComparableMap16.keySet();
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap16);
        java.lang.String str23 = strComparableMap1.toString();
        java.lang.CharSequence charSequence26 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        java.lang.Object obj34 = strComparableMap28.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        int int42 = strComparableMap36.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence45 = strComparableMap36.getOrDefault((java.lang.Object) strComparableMap43, (java.lang.CharSequence) "");
        java.lang.String str46 = strComparableMap36.toString();
        boolean boolean47 = strComparableMap1.remove(obj34, (java.lang.Object) str46);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 0, (float) (short) 10, false);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean55 = strComparableMap54.isEmpty();
        java.lang.Object obj56 = strComparableMap54.clone();
        java.lang.CharSequence charSequence58 = strComparableMap54.remove((java.lang.Object) true);
        strComparableMap54.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable62 = null;
        java.lang.CharSequence charSequence64 = strComparableMap61.putIfAbsent(strComparable62, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence67 = strComparableMap61.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap69 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable70 = null;
        java.lang.CharSequence charSequence72 = strComparableMap69.putIfAbsent(strComparable70, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence74 = strComparableMap69.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet75 = strComparableMap69.entrySet();
        strComparableMap61.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap69);
        java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.constant.Constable> typeMap77 = new java.util.LinkedHashMap<java.lang.reflect.Type, java.lang.constant.Constable>();
        boolean boolean78 = strComparableMap61.equals((java.lang.Object) typeMap77);
        java.lang.CharSequence charSequence79 = strComparableMap54.get((java.lang.Object) typeMap77);
        java.lang.CharSequence charSequence80 = strComparableMap52.remove((java.lang.Object) charSequence79);
        boolean boolean81 = strComparableMap48.containsValue((java.lang.Object) strComparableMap52);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet19);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertNotNull(strComparableSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{null=, =}" + "'", str23, "{null=, =}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{null=}");
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{null=}" + "'", str46, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{}");
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertNotNull(strComparableEntrySet75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (float) (short) 10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap4 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean5 = strComparableMap4.isEmpty();
        java.lang.Object obj6 = strComparableMap4.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        strComparableMap8.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap10);
        strComparableMap4.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap10);
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap4.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = strComparableMap4.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.Object obj25 = strComparableMap21.clone();
        boolean boolean26 = strComparableMap2.remove((java.lang.Object) "{}", (java.lang.Object) strComparableMap21);
        java.util.LinkedHashMap<java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.io.Serializable> strComparableMapMap29 = new java.util.LinkedHashMap<java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>, java.io.Serializable>(2, (float) (byte) 100);
        java.lang.CharSequence charSequence30 = strComparableMap2.remove((java.lang.Object) 2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{null=}");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence30);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        java.lang.Object obj22 = strComparableMap16.clone();
        java.lang.CharSequence charSequence25 = strComparableMap16.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj26 = null;
        java.lang.CharSequence charSequence27 = strComparableMap16.get(obj26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap31.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap31.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet36 = strComparableMap31.keySet();
        boolean boolean37 = strComparableMap16.equals((java.lang.Object) strComparableMap31);
        java.lang.String str38 = strComparableMap16.toString();
        boolean boolean39 = strComparableMap10.equals((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        int int48 = strComparableMap41.size();
        java.lang.CharSequence charSequence49 = strComparableMap10.remove((java.lang.Object) strComparableMap41);
        boolean boolean50 = strComparableMap1.containsKey((java.lang.Object) strComparableMap10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        boolean boolean57 = strComparableMap52.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence60 = strComparableMap52.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable65 = null;
        java.lang.CharSequence charSequence67 = strComparableMap64.putIfAbsent(strComparable65, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence70 = strComparableMap64.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean71 = strComparableMap52.remove((java.lang.Object) strComparableMap62, (java.lang.Object) "hi!");
        java.lang.String str72 = strComparableMap52.toString();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        java.lang.String str74 = strComparableMap1.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{null=}");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNotNull(strComparableSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=, =}" + "'", str38, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "{null=, =}" + "'", str72, "{null=, =}");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{null=, =}" + "'", str74, "{null=, =}");
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable12 = null;
        java.lang.CharSequence charSequence14 = strComparableMap11.putIfAbsent(strComparable12, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap11.get((java.lang.Object) true);
        int int17 = strComparableMap11.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        boolean boolean24 = strComparableMap19.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence27 = strComparableMap19.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap31.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean38 = strComparableMap19.remove((java.lang.Object) strComparableMap29, (java.lang.Object) "hi!");
        strComparableMap11.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        boolean boolean40 = strComparableMap29.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable43 = null;
        java.lang.CharSequence charSequence45 = strComparableMap42.putIfAbsent(strComparable43, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence47 = strComparableMap42.get((java.lang.Object) true);
        java.lang.Object obj48 = strComparableMap42.clone();
        java.lang.String str49 = strComparableMap42.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap51 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean54 = strComparableMap53.isEmpty();
        strComparableMap51.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap53);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable58 = null;
        java.lang.CharSequence charSequence60 = strComparableMap57.putIfAbsent(strComparable58, (java.lang.CharSequence) "");
        boolean boolean62 = strComparableMap57.containsValue((java.lang.Object) (short) 100);
        int int63 = strComparableMap57.size();
        java.lang.CharSequence charSequence65 = strComparableMap51.getOrDefault((java.lang.Object) strComparableMap57, (java.lang.CharSequence) "hi!");
        boolean boolean66 = strComparableMap42.equals((java.lang.Object) charSequence65);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap42);
        int int68 = strComparableMap42.size();
        boolean boolean69 = strComparableMap29.equals((java.lang.Object) int68);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap71 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable72 = null;
        java.lang.CharSequence charSequence74 = strComparableMap71.putIfAbsent(strComparable72, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence76 = strComparableMap71.get((java.lang.Object) true);
        java.lang.Object obj77 = strComparableMap71.clone();
        java.lang.CharSequence charSequence80 = strComparableMap71.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj81 = null;
        java.lang.CharSequence charSequence82 = strComparableMap71.get(obj81);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap84 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap86 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean87 = strComparableMap86.isEmpty();
        strComparableMap84.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap86);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet89 = strComparableMap86.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection90 = strComparableMap86.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet91 = strComparableMap86.keySet();
        boolean boolean92 = strComparableMap71.equals((java.lang.Object) strComparableMap86);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection93 = strComparableMap71.values();
        java.lang.CharSequence charSequence94 = strComparableMap29.remove((java.lang.Object) charSequenceCollection93);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        strComparableMap1.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{null=}");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{null=}" + "'", str49, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertNull(charSequence76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "{null=}");
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "" + "'", charSequence82, "");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet89);
        org.junit.Assert.assertNotNull(charSequenceCollection90);
        org.junit.Assert.assertNotNull(strComparableSet91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection93);
        org.junit.Assert.assertNull(charSequence94);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        java.util.LinkedHashMap<java.lang.CharSequence, java.lang.Class<?>> charSequenceMap0 = new java.util.LinkedHashMap<java.lang.CharSequence, java.lang.Class<?>>();
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.lang.CharSequence charSequence10 = strComparableMap6.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence12 = strComparableMap6.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence14 = strComparableMap1.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet18 = strComparableMap1.entrySet();
        java.lang.Object obj19 = strComparableMap1.clone();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNotNull(strComparableEntrySet18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{{}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{{}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{{}={}}");
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet6 = strComparableMap3.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection7 = strComparableMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet8 = strComparableMap3.entrySet();
        int int9 = strComparableMap3.size();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet6);
        org.junit.Assert.assertNotNull(charSequenceCollection7);
        org.junit.Assert.assertNotNull(strComparableEntrySet8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence26 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap18.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence41 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap39, (java.lang.CharSequence) "{null=}");
        java.lang.String str42 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean47 = strComparableMap46.isEmpty();
        strComparableMap44.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        boolean boolean49 = strComparableMap1.containsValue((java.lang.Object) strComparableMap46);
        boolean boolean53 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=}" + "'", charSequence41, "{null=}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{null=}" + "'", str42, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.CharSequence> cloneableMap1 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.CharSequence>((int) (byte) 100);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.Iterable<java.lang.CharSequence>> comparableEntrySetMap3 = new java.util.LinkedHashMap<java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>, java.lang.Iterable<java.lang.CharSequence>>((int) (byte) 1, 0.0f, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean20 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection40 = strComparableMap37.values();
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.lang.String str42 = strComparableMap27.toString();
        boolean boolean43 = strComparableMap16.remove((java.lang.Object) strComparableMap25, (java.lang.Object) str42);
        boolean boolean44 = strComparableMap13.equals((java.lang.Object) strComparableMap25);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        boolean boolean51 = strComparableMap46.containsValue((java.lang.Object) (short) 100);
        int int52 = strComparableMap46.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence55 = strComparableMap46.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        java.lang.Object obj59 = strComparableMap57.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection60 = strComparableMap57.values();
        boolean boolean61 = strComparableMap25.remove((java.lang.Object) strComparableMap53, (java.lang.Object) strComparableMap57);
        boolean boolean62 = strComparableMap1.equals((java.lang.Object) strComparableMap57);
        boolean boolean66 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "{null=}");
        int int67 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap69 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable70 = null;
        java.lang.CharSequence charSequence72 = strComparableMap69.putIfAbsent(strComparable70, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence74 = strComparableMap69.get((java.lang.Object) true);
        java.lang.Object obj75 = strComparableMap69.clone();
        java.lang.CharSequence charSequence78 = strComparableMap69.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj79 = null;
        java.lang.CharSequence charSequence80 = strComparableMap69.get(obj79);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap82 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap84 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean85 = strComparableMap84.isEmpty();
        strComparableMap82.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap84);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet87 = strComparableMap84.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection88 = strComparableMap84.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet89 = strComparableMap84.keySet();
        boolean boolean90 = strComparableMap69.equals((java.lang.Object) strComparableMap84);
        boolean boolean91 = strComparableMap1.containsValue((java.lang.Object) boolean90);
        java.lang.CharSequence charSequence94 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, {null=, =}={null=}}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{null=, =}" + "'", str42, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "" + "'", charSequence55, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "{null=}");
        org.junit.Assert.assertNull(charSequence78);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "" + "'", charSequence80, "");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet87);
        org.junit.Assert.assertNotNull(charSequenceCollection88);
        org.junit.Assert.assertNotNull(strComparableSet89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(charSequence94);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable12 = null;
        java.lang.CharSequence charSequence14 = strComparableMap11.putIfAbsent(strComparable12, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap11.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap19.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap19.entrySet();
        strComparableMap11.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        int int34 = strComparableMap28.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap36.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        boolean boolean41 = strComparableMap36.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence44 = strComparableMap36.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence54 = strComparableMap48.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean55 = strComparableMap36.remove((java.lang.Object) strComparableMap46, (java.lang.Object) "hi!");
        strComparableMap28.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        boolean boolean57 = strComparableMap46.isEmpty();
        strComparableMap11.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet59 = strComparableMap46.entrySet();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet60 = strComparableMap46.keySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap46);
        strComparableMap1.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet59);
        org.junit.Assert.assertNotNull(strComparableSet60);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.lang.CharSequence charSequence4 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence11 = strComparableMap6.get((java.lang.Object) true);
        int int12 = strComparableMap6.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet13 = strComparableMap6.keySet();
        int int14 = strComparableMap6.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence16 = strComparableMap1.remove((java.lang.Object) strComparableMap6);
        boolean boolean17 = strComparableMap6.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(strComparableSet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        boolean boolean9 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "hi!");
        java.lang.Object obj10 = strComparableMap3.clone();
        java.lang.CharSequence charSequence13 = strComparableMap3.put((java.lang.Comparable<java.lang.String>) "{null=, {null=}={}}", (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNull(charSequence13);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean10 = strComparableMap1.isEmpty();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet11 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence21 = strComparableMap13.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean24 = strComparableMap23.isEmpty();
        java.lang.Object obj25 = strComparableMap23.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap23.values();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.lang.String str28 = strComparableMap13.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean31 = strComparableMap30.isEmpty();
        java.lang.Object obj32 = strComparableMap30.clone();
        java.lang.CharSequence charSequence34 = strComparableMap30.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence36 = strComparableMap30.get((java.lang.Object) 100L);
        boolean boolean37 = strComparableMap13.containsValue((java.lang.Object) strComparableMap30);
        boolean boolean38 = strComparableMap13.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap13);
        java.util.LinkedHashMap<java.lang.constant.Constable, java.lang.reflect.Type> constableMap41 = new java.util.LinkedHashMap<java.lang.constant.Constable, java.lang.reflect.Type>((int) ' ');
        boolean boolean42 = strComparableMap13.containsValue((java.lang.Object) constableMap41);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strComparableSet11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{null=, =}" + "'", str28, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.lang.CharSequence charSequence10 = strComparableMap6.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence12 = strComparableMap6.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence14 = strComparableMap1.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean20 = strComparableMap19.isEmpty();
        java.lang.Object obj21 = strComparableMap19.clone();
        java.lang.CharSequence charSequence23 = strComparableMap19.remove((java.lang.Object) true);
        boolean boolean27 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        strComparableMap19.clear();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        int int30 = strComparableMap19.size();
        boolean boolean34 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        boolean boolean38 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =, {null=, =}={null=}}", (java.lang.CharSequence) "{{null=, =}={}}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{}");
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) ' ', (float) 100, false);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean15 = strComparableMap14.isEmpty();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap14);
        strComparableMap8.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap14);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        boolean boolean24 = strComparableMap19.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence27 = strComparableMap19.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean30 = strComparableMap29.isEmpty();
        java.lang.Object obj31 = strComparableMap29.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection32 = strComparableMap29.values();
        strComparableMap19.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.lang.String str34 = strComparableMap19.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean37 = strComparableMap36.isEmpty();
        java.lang.Object obj38 = strComparableMap36.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection39 = strComparableMap36.values();
        java.lang.CharSequence charSequence40 = strComparableMap19.get((java.lang.Object) strComparableMap36);
        boolean boolean41 = strComparableMap14.equals((java.lang.Object) strComparableMap19);
        boolean boolean45 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence46 = strComparableMap2.remove((java.lang.Object) "{{}={null=, =, hi!=hi!}}");
        java.lang.String str47 = strComparableMap2.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{null=, =}" + "'", str34, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection39);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{}" + "'", str47, "{}");
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(2);
        strComparableMap1.clear();
        java.lang.Object obj3 = strComparableMap1.clone();
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap1.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap1.entrySet();
        boolean boolean16 = strComparableMap1.isEmpty();
        java.lang.Object obj17 = strComparableMap1.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet18 = strComparableMap1.entrySet();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "{hi!={null=, =}, {null=}={null=}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{hi!={null=, =}, {null=}={null=}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{hi!={null=, =}, {null=}={null=}}");
        org.junit.Assert.assertNotNull(strComparableEntrySet18);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection13 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = strComparableMap15.get((java.lang.Object) true);
        int int21 = strComparableMap15.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap15.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap24.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap32.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet38 = strComparableMap32.entrySet();
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.lang.CharSequence charSequence41 = strComparableMap15.getOrDefault((java.lang.Object) strComparableMap32, (java.lang.CharSequence) "{null=, =}");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap15);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap1.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNotNull(strComparableEntrySet38);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=, =}" + "'", charSequence41, "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        int int8 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.lang.CharSequence charSequence14 = strComparableMap10.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = strComparableMap16.get((java.lang.Object) true);
        java.lang.Object obj22 = strComparableMap16.clone();
        java.lang.CharSequence charSequence25 = strComparableMap16.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj26 = null;
        java.lang.CharSequence charSequence27 = strComparableMap16.get(obj26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap31.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap31.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet36 = strComparableMap31.keySet();
        boolean boolean37 = strComparableMap16.equals((java.lang.Object) strComparableMap31);
        java.lang.String str38 = strComparableMap16.toString();
        boolean boolean39 = strComparableMap10.equals((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        int int47 = strComparableMap41.size();
        int int48 = strComparableMap41.size();
        java.lang.CharSequence charSequence49 = strComparableMap10.remove((java.lang.Object) strComparableMap41);
        boolean boolean50 = strComparableMap1.containsKey((java.lang.Object) strComparableMap10);
        boolean boolean54 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{{null=}={null=, =}}", (java.lang.CharSequence) "{null=, =, {null=, =}={null=}}", (java.lang.CharSequence) "{null=, =, {null=, =}={null=}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{null=}");
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNotNull(strComparableSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{null=, =}" + "'", str38, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection8 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap10.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap18.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.CharSequence charSequence27 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap18, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean30 = strComparableMap29.isEmpty();
        java.lang.Object obj31 = strComparableMap29.clone();
        java.lang.CharSequence charSequence33 = strComparableMap29.remove((java.lang.Object) true);
        boolean boolean37 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean38 = strComparableMap1.containsKey((java.lang.Object) strComparableMap29);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet39 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence42 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{}");
        strComparableMap1.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection8);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "{null=, =}" + "'", charSequence27, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet39);
        org.junit.Assert.assertNull(charSequence42);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        boolean boolean11 = strComparableMap1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet12 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence15 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        java.lang.Object obj16 = null;
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean23 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable31 = null;
        java.lang.CharSequence charSequence33 = strComparableMap30.putIfAbsent(strComparable31, (java.lang.CharSequence) "");
        boolean boolean35 = strComparableMap30.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence38 = strComparableMap30.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean41 = strComparableMap40.isEmpty();
        java.lang.Object obj42 = strComparableMap40.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection43 = strComparableMap40.values();
        strComparableMap30.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap40);
        java.lang.String str45 = strComparableMap30.toString();
        boolean boolean46 = strComparableMap19.remove((java.lang.Object) strComparableMap28, (java.lang.Object) str45);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap48.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet54 = strComparableMap48.entrySet();
        java.lang.String str55 = strComparableMap48.toString();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection56 = strComparableMap48.values();
        boolean boolean57 = strComparableMap19.equals((java.lang.Object) strComparableMap48);
        boolean boolean61 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet62 = strComparableMap19.keySet();
        boolean boolean63 = strComparableMap1.remove(obj16, (java.lang.Object) strComparableMap19);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet12);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{null=, =}" + "'", str45, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNotNull(strComparableEntrySet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{null=}" + "'", str55, "{null=}");
        org.junit.Assert.assertNotNull(charSequenceCollection56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strComparableSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.lang.String str10 = strComparableMap2.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap12.get((java.lang.Object) true);
        java.lang.Object obj18 = strComparableMap12.clone();
        java.lang.CharSequence charSequence21 = strComparableMap12.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        strComparableMap2.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (float) (short) 10);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean34 = strComparableMap33.isEmpty();
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap33);
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap33);
        java.lang.Comparable<java.lang.String> strComparable37 = null;
        java.lang.CharSequence charSequence39 = strComparableMap27.putIfAbsent(strComparable37, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable45 = null;
        java.lang.CharSequence charSequence47 = strComparableMap44.putIfAbsent(strComparable45, (java.lang.CharSequence) "");
        java.lang.Object obj48 = strComparableMap44.clone();
        boolean boolean49 = strComparableMap25.remove((java.lang.Object) "{}", (java.lang.Object) strComparableMap44);
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap44);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{null=}");
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{null=}");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0);
        java.lang.CharSequence charSequence3 = strComparableMap1.get((java.lang.Object) (short) 0);
        java.lang.String str4 = strComparableMap1.toString();
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.lang.String str8 = strComparableMap1.toString();
        java.lang.String str9 = strComparableMap1.toString();
        int int10 = strComparableMap1.size();
        java.lang.Object obj11 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(10, (float) 2, false);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet16 = strComparableMap15.keySet();
        java.lang.CharSequence charSequence17 = strComparableMap1.remove((java.lang.Object) strComparableSet16);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{null=}" + "'", str9, "{null=}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "{null=}");
        org.junit.Assert.assertNotNull(strComparableSet16);
        org.junit.Assert.assertNull(charSequence17);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        boolean boolean9 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable12 = null;
        java.lang.CharSequence charSequence14 = strComparableMap11.putIfAbsent(strComparable12, (java.lang.CharSequence) "");
        boolean boolean16 = strComparableMap11.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence19 = strComparableMap11.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean22 = strComparableMap21.isEmpty();
        java.lang.Object obj23 = strComparableMap21.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection24 = strComparableMap21.values();
        strComparableMap11.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap21);
        java.lang.String str26 = strComparableMap11.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean29 = strComparableMap28.isEmpty();
        java.lang.Object obj30 = strComparableMap28.clone();
        java.lang.CharSequence charSequence32 = strComparableMap28.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence34 = strComparableMap28.get((java.lang.Object) 100L);
        boolean boolean35 = strComparableMap11.containsValue((java.lang.Object) strComparableMap28);
        boolean boolean39 = strComparableMap28.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "{null=}");
        strComparableMap28.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean43 = strComparableMap42.isEmpty();
        java.lang.Object obj44 = strComparableMap42.clone();
        java.lang.CharSequence charSequence46 = strComparableMap42.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence48 = strComparableMap42.get((java.lang.Object) 100L);
        java.lang.Object obj49 = strComparableMap42.clone();
        java.lang.CharSequence charSequence50 = strComparableMap28.remove(obj49);
        java.lang.CharSequence charSequence52 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap28, (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.io.Serializable, java.lang.Iterable<java.lang.CharSequence>> serializableMap54 = new java.util.LinkedHashMap<java.io.Serializable, java.lang.Iterable<java.lang.CharSequence>>((int) 'a');
        boolean boolean55 = strComparableMap28.containsValue((java.lang.Object) serializableMap54);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 10, (float) (short) 10, true);
        boolean boolean60 = strComparableMap28.containsValue((java.lang.Object) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{null=, =}" + "'", str26, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{}");
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "{}" + "'", charSequence52, "{}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection13 = strComparableMap1.values();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap1.values();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(charSequenceCollection13);
        org.junit.Assert.assertNotNull(charSequenceCollection14);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean22 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence25 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int26 = strComparableMap18.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.String str28 = strComparableMap18.toString();
        java.lang.CharSequence charSequence31 = strComparableMap18.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        boolean boolean35 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "{{null=, =}={}}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=, {null=}={}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> annotatedElementMap0 = new java.util.LinkedHashMap<java.lang.reflect.AnnotatedElement, java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>();
        java.lang.Class<?> wildcardClass1 = annotatedElementMap0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence5 = null;
        java.lang.CharSequence charSequence6 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence5);
        java.lang.CharSequence charSequence9 = strComparableMap3.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet10 = strComparableMap3.entrySet();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet11 = strComparableMap3.keySet();
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(strComparableEntrySet10);
        org.junit.Assert.assertNotNull(strComparableSet11);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap2.replace(strComparable10, (java.lang.CharSequence) "{null=, =, {null=, =}={null=}}");
        strComparableMap2.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence6 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap3.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        boolean boolean20 = strComparableMap15.containsValue((java.lang.Object) (short) 100);
        int int21 = strComparableMap15.size();
        java.lang.CharSequence charSequence23 = strComparableMap9.getOrDefault((java.lang.Object) strComparableMap15, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass24 = strComparableMap15.getClass();
        java.lang.CharSequence charSequence26 = strComparableMap3.getOrDefault((java.lang.Object) strComparableMap15, (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 100, (float) (short) 100);
        java.lang.CharSequence charSequence31 = strComparableMap15.getOrDefault((java.lang.Object) (short) 100, (java.lang.CharSequence) "{null=, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "hi!" + "'", charSequence23, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "{}" + "'", charSequence26, "{}");
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "{null=, hi!=hi!}" + "'", charSequence31, "{null=, hi!=hi!}");
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap7.get((java.lang.Object) true);
        java.lang.Object obj13 = strComparableMap7.clone();
        java.lang.CharSequence charSequence16 = strComparableMap7.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj17 = null;
        java.lang.CharSequence charSequence18 = strComparableMap7.get(obj17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap22.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap22.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap22.keySet();
        boolean boolean28 = strComparableMap7.equals((java.lang.Object) strComparableMap22);
        java.lang.String str29 = strComparableMap7.toString();
        boolean boolean30 = strComparableMap1.equals((java.lang.Object) strComparableMap7);
        boolean boolean34 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet35 = strComparableMap1.keySet();
        int int36 = strComparableMap1.size();
        java.lang.Object obj37 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence43 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence43);
        java.lang.CharSequence charSequence47 = strComparableMap41.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet48 = strComparableMap41.entrySet();
        java.lang.CharSequence charSequence49 = strComparableMap1.get((java.lang.Object) strComparableMap41);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet50 = strComparableMap41.keySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertNotNull(strComparableSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{null=, =}" + "'", str29, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strComparableSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{}");
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNotNull(strComparableEntrySet48);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNotNull(strComparableSet50);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        boolean boolean17 = strComparableMap12.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence20 = strComparableMap12.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        java.lang.Object obj24 = strComparableMap22.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection25 = strComparableMap22.values();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean33 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int37 = strComparableMap29.size();
        strComparableMap12.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence43 = strComparableMap40.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean44 = strComparableMap29.equals((java.lang.Object) charSequence43);
        java.lang.CharSequence charSequence45 = strComparableMap1.get((java.lang.Object) strComparableMap29);
        boolean boolean49 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        java.lang.CharSequence charSequence52 = strComparableMap29.put((java.lang.Comparable<java.lang.String>) "{{null=, =}={}}", (java.lang.CharSequence) "{null=}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet53 = strComparableMap29.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNotNull(strComparableEntrySet53);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap0 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable3 = null;
        java.lang.CharSequence charSequence5 = strComparableMap2.putIfAbsent(strComparable3, (java.lang.CharSequence) "");
        boolean boolean7 = strComparableMap2.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence10 = strComparableMap2.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        java.lang.Object obj14 = strComparableMap12.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap12.values();
        strComparableMap2.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.lang.CharSequence charSequence17 = strComparableMap0.remove((java.lang.Object) strComparableMap12);
        java.lang.CharSequence charSequence20 = strComparableMap12.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence20);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        java.util.LinkedHashMap<java.io.Serializable, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>> serializableMap1 = new java.util.LinkedHashMap<java.io.Serializable, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>>((int) '4');
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.String str4 = strComparableMap3.toString();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet5 = strComparableMap3.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        int int13 = strComparableMap7.size();
        int int14 = strComparableMap7.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.lang.CharSequence charSequence20 = strComparableMap16.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap22.get((java.lang.Object) true);
        java.lang.Object obj28 = strComparableMap22.clone();
        java.lang.CharSequence charSequence31 = strComparableMap22.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj32 = null;
        java.lang.CharSequence charSequence33 = strComparableMap22.get(obj32);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        strComparableMap35.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet40 = strComparableMap37.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection41 = strComparableMap37.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet42 = strComparableMap37.keySet();
        boolean boolean43 = strComparableMap22.equals((java.lang.Object) strComparableMap37);
        java.lang.String str44 = strComparableMap22.toString();
        boolean boolean45 = strComparableMap16.equals((java.lang.Object) strComparableMap22);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        boolean boolean52 = strComparableMap47.containsValue((java.lang.Object) (short) 100);
        int int53 = strComparableMap47.size();
        int int54 = strComparableMap47.size();
        java.lang.CharSequence charSequence55 = strComparableMap16.remove((java.lang.Object) strComparableMap47);
        boolean boolean56 = strComparableMap7.containsKey((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        java.lang.CharSequence charSequence61 = strComparableMap58.putIfAbsent(strComparable59, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence64 = strComparableMap58.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable67 = null;
        java.lang.CharSequence charSequence69 = strComparableMap66.putIfAbsent(strComparable67, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence71 = strComparableMap66.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet72 = strComparableMap66.entrySet();
        strComparableMap58.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap66);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap75 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection76 = strComparableMap75.values();
        strComparableMap75.clear();
        boolean boolean78 = strComparableMap58.containsKey((java.lang.Object) strComparableMap75);
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap58);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap81 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable82 = null;
        java.lang.CharSequence charSequence84 = strComparableMap81.putIfAbsent(strComparable82, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence86 = strComparableMap81.get((java.lang.Object) true);
        java.lang.Object obj87 = strComparableMap81.clone();
        java.lang.CharSequence charSequence90 = strComparableMap81.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean91 = strComparableMap81.isEmpty();
        java.lang.String str92 = strComparableMap81.toString();
        java.lang.CharSequence charSequence93 = strComparableMap58.get((java.lang.Object) strComparableMap81);
        java.lang.CharSequence charSequence96 = strComparableMap58.put((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence98 = strComparableMap3.getOrDefault((java.lang.Object) charSequence96, (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNotNull(strComparableEntrySet5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{null=}");
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "" + "'", charSequence33, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet40);
        org.junit.Assert.assertNotNull(charSequenceCollection41);
        org.junit.Assert.assertNotNull(strComparableSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{null=, =}" + "'", str44, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertNotNull(strComparableEntrySet72);
        org.junit.Assert.assertNotNull(charSequenceCollection76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(charSequence84);
        org.junit.Assert.assertNull(charSequence86);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "{null=}");
        org.junit.Assert.assertNull(charSequence90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "{null=, =}" + "'", str92, "{null=, =}");
        org.junit.Assert.assertNull(charSequence93);
        org.junit.Assert.assertNull(charSequence96);
        org.junit.Assert.assertEquals("'" + charSequence98 + "' != '" + "{{}={null=, =, hi!=hi!}}" + "'", charSequence98, "{{}={null=, =, hi!=hi!}}");
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 100, (float) 1);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean19 = strComparableMap1.isEmpty();
        java.lang.CharSequence charSequence22 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int25 = strComparableMap24.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.lang.CharSequence charSequence33 = strComparableMap24.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence36 = strComparableMap24.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        boolean boolean40 = strComparableMap24.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection41 = strComparableMap24.values();
        boolean boolean42 = strComparableMap1.equals((java.lang.Object) charSequenceCollection41);
        boolean boolean46 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "", (java.lang.CharSequence) "{}");
        int int47 = strComparableMap1.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap0 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean3 = strComparableMap2.isEmpty();
        java.lang.Object obj4 = strComparableMap2.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection5 = strComparableMap2.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        java.lang.CharSequence charSequence17 = strComparableMap14.putIfAbsent(strComparable15, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = strComparableMap14.get((java.lang.Object) true);
        int int20 = strComparableMap14.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection21 = strComparableMap14.values();
        boolean boolean22 = strComparableMap7.containsValue((java.lang.Object) strComparableMap14);
        boolean boolean23 = strComparableMap2.equals((java.lang.Object) strComparableMap14);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        java.lang.CharSequence charSequence28 = strComparableMap25.putIfAbsent(strComparable26, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap25.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap32.get((java.lang.Object) true);
        int int38 = strComparableMap32.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet39 = strComparableMap32.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean44 = strComparableMap32.equals((java.lang.Object) 0);
        strComparableMap25.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        boolean boolean46 = strComparableMap2.containsValue((java.lang.Object) strComparableMap25);
        java.lang.CharSequence charSequence47 = strComparableMap0.get((java.lang.Object) strComparableMap2);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable50 = null;
        java.lang.CharSequence charSequence52 = strComparableMap49.putIfAbsent(strComparable50, (java.lang.CharSequence) "");
        boolean boolean54 = strComparableMap49.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence57 = strComparableMap49.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean60 = strComparableMap59.isEmpty();
        java.lang.Object obj61 = strComparableMap59.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection62 = strComparableMap59.values();
        strComparableMap49.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap59);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet64 = strComparableMap59.keySet();
        boolean boolean65 = strComparableMap2.equals((java.lang.Object) strComparableSet64);
        boolean boolean66 = strComparableMap2.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(strComparableSet39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection62);
        org.junit.Assert.assertNotNull(strComparableSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 0, (float) (short) 10, false);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable6 = null;
        java.lang.CharSequence charSequence8 = strComparableMap5.putIfAbsent(strComparable6, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence10 = strComparableMap5.get((java.lang.Object) true);
        int int11 = strComparableMap5.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet12 = strComparableMap5.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean17 = strComparableMap5.equals((java.lang.Object) 0);
        java.lang.CharSequence charSequence19 = strComparableMap3.getOrDefault((java.lang.Object) 0, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        boolean boolean26 = strComparableMap21.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean29 = strComparableMap28.isEmpty();
        java.lang.Object obj30 = strComparableMap28.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection31 = strComparableMap28.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable34 = null;
        java.lang.CharSequence charSequence36 = strComparableMap33.putIfAbsent(strComparable34, (java.lang.CharSequence) "");
        boolean boolean38 = strComparableMap33.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap40 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable41 = null;
        java.lang.CharSequence charSequence43 = strComparableMap40.putIfAbsent(strComparable41, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence45 = strComparableMap40.get((java.lang.Object) true);
        int int46 = strComparableMap40.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection47 = strComparableMap40.values();
        boolean boolean48 = strComparableMap33.containsValue((java.lang.Object) strComparableMap40);
        boolean boolean49 = strComparableMap28.equals((java.lang.Object) strComparableMap40);
        strComparableMap21.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap28);
        boolean boolean51 = strComparableMap28.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean59 = strComparableMap55.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence62 = strComparableMap55.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int63 = strComparableMap55.size();
        boolean boolean67 = strComparableMap55.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence69 = strComparableMap28.getOrDefault((java.lang.Object) "{}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        boolean boolean70 = strComparableMap3.equals((java.lang.Object) "{null=, =, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(strComparableSet12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "{null=, =}" + "'", charSequence19, "{null=, =}");
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection31);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "{null=, =, hi!=hi!}" + "'", charSequence69, "{null=, =, hi!=hi!}");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection8 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap10.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap10.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet24 = strComparableMap18.entrySet();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.lang.CharSequence charSequence27 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap18, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean30 = strComparableMap29.isEmpty();
        java.lang.Object obj31 = strComparableMap29.clone();
        java.lang.CharSequence charSequence33 = strComparableMap29.remove((java.lang.Object) true);
        boolean boolean37 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean38 = strComparableMap1.containsKey((java.lang.Object) strComparableMap29);
        java.lang.String str39 = strComparableMap29.toString();
        java.lang.CharSequence charSequence42 = strComparableMap29.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection8);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNotNull(strComparableEntrySet24);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "{null=, =}" + "'", charSequence27, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
        org.junit.Assert.assertNull(charSequence42);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean31 = strComparableMap8.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet32 = strComparableMap8.entrySet();
        java.lang.Object obj33 = strComparableMap8.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean37 = strComparableMap36.isEmpty();
        java.lang.Object obj38 = strComparableMap36.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection39 = strComparableMap36.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        java.lang.CharSequence charSequence44 = strComparableMap41.putIfAbsent(strComparable42, (java.lang.CharSequence) "");
        boolean boolean46 = strComparableMap41.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable49 = null;
        java.lang.CharSequence charSequence51 = strComparableMap48.putIfAbsent(strComparable49, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap48.get((java.lang.Object) true);
        int int54 = strComparableMap48.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection55 = strComparableMap48.values();
        boolean boolean56 = strComparableMap41.containsValue((java.lang.Object) strComparableMap48);
        boolean boolean57 = strComparableMap36.equals((java.lang.Object) strComparableMap48);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable60 = null;
        java.lang.CharSequence charSequence62 = strComparableMap59.putIfAbsent(strComparable60, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence64 = strComparableMap59.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable67 = null;
        java.lang.CharSequence charSequence69 = strComparableMap66.putIfAbsent(strComparable67, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence71 = strComparableMap66.get((java.lang.Object) true);
        int int72 = strComparableMap66.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet73 = strComparableMap66.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap77 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean78 = strComparableMap66.equals((java.lang.Object) 0);
        strComparableMap59.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap66);
        boolean boolean80 = strComparableMap36.containsValue((java.lang.Object) strComparableMap59);
        java.lang.CharSequence charSequence81 = strComparableMap34.get((java.lang.Object) strComparableMap36);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet82 = strComparableMap34.keySet();
        java.lang.CharSequence charSequence84 = strComparableMap8.getOrDefault((java.lang.Object) strComparableMap34, (java.lang.CharSequence) "{null=, =}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection39);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(strComparableSet73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(charSequence81);
        org.junit.Assert.assertNotNull(strComparableSet82);
        org.junit.Assert.assertEquals("'" + charSequence84 + "' != '" + "{null=, =}" + "'", charSequence84, "{null=, =}");
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 100, (float) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap2);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable36 = null;
        java.lang.CharSequence charSequence38 = strComparableMap35.putIfAbsent(strComparable36, (java.lang.CharSequence) "");
        boolean boolean40 = strComparableMap35.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence43 = strComparableMap35.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable48 = null;
        java.lang.CharSequence charSequence50 = strComparableMap47.putIfAbsent(strComparable48, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = strComparableMap47.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean54 = strComparableMap35.remove((java.lang.Object) strComparableMap45, (java.lang.Object) "hi!");
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap45);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable58 = null;
        java.lang.CharSequence charSequence60 = strComparableMap57.putIfAbsent(strComparable58, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence62 = strComparableMap57.get((java.lang.Object) true);
        int int63 = strComparableMap57.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap65 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable66 = null;
        java.lang.CharSequence charSequence68 = strComparableMap65.putIfAbsent(strComparable66, (java.lang.CharSequence) "");
        boolean boolean70 = strComparableMap65.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence73 = strComparableMap65.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap75 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap77 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable78 = null;
        java.lang.CharSequence charSequence80 = strComparableMap77.putIfAbsent(strComparable78, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence83 = strComparableMap77.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean84 = strComparableMap65.remove((java.lang.Object) strComparableMap75, (java.lang.Object) "hi!");
        strComparableMap57.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap75);
        strComparableMap45.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap75);
        java.lang.CharSequence charSequence89 = strComparableMap45.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet90 = strComparableMap45.keySet();
        boolean boolean91 = strComparableMap18.equals((java.lang.Object) strComparableSet90);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNull(charSequence68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertNull(charSequence83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(charSequence89);
        org.junit.Assert.assertNotNull(strComparableSet90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        boolean boolean8 = strComparableMap1.isEmpty();
        java.lang.CharSequence charSequence11 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.lang.String str12 = strComparableMap1.toString();
        java.lang.CharSequence charSequence15 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, {null=, =}={null=}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{null=, {null=, =}={null=}}" + "'", str12, "{null=, {null=, =}={null=}}");
        org.junit.Assert.assertNull(charSequence15);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean31 = strComparableMap8.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet32 = strComparableMap8.entrySet();
        java.lang.Object obj33 = strComparableMap8.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable36 = null;
        java.lang.CharSequence charSequence38 = strComparableMap35.putIfAbsent(strComparable36, (java.lang.CharSequence) "");
        boolean boolean40 = strComparableMap35.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean51 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence54 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        java.lang.CharSequence charSequence61 = strComparableMap58.putIfAbsent(strComparable59, (java.lang.CharSequence) "");
        boolean boolean63 = strComparableMap58.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence66 = strComparableMap58.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean69 = strComparableMap68.isEmpty();
        java.lang.Object obj70 = strComparableMap68.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection71 = strComparableMap68.values();
        strComparableMap58.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap68);
        java.lang.String str73 = strComparableMap58.toString();
        boolean boolean74 = strComparableMap47.remove((java.lang.Object) strComparableMap56, (java.lang.Object) str73);
        boolean boolean75 = strComparableMap44.equals((java.lang.Object) strComparableMap56);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap77 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable78 = null;
        java.lang.CharSequence charSequence80 = strComparableMap77.putIfAbsent(strComparable78, (java.lang.CharSequence) "");
        boolean boolean82 = strComparableMap77.containsValue((java.lang.Object) (short) 100);
        int int83 = strComparableMap77.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap84 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence86 = strComparableMap77.getOrDefault((java.lang.Object) strComparableMap84, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap88 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean89 = strComparableMap88.isEmpty();
        java.lang.Object obj90 = strComparableMap88.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection91 = strComparableMap88.values();
        boolean boolean92 = strComparableMap56.remove((java.lang.Object) strComparableMap84, (java.lang.Object) strComparableMap88);
        strComparableMap56.clear();
        boolean boolean94 = strComparableMap35.equals((java.lang.Object) strComparableMap56);
        boolean boolean95 = strComparableMap8.equals((java.lang.Object) strComparableMap35);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap96 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet97 = strComparableMap8.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(charSequence66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "{null=, =}" + "'", str73, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertEquals("'" + charSequence86 + "' != '" + "" + "'", charSequence86, "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet97);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        java.util.LinkedHashMap<java.lang.Object, java.lang.constant.Constable> objMap0 = new java.util.LinkedHashMap<java.lang.Object, java.lang.constant.Constable>();
        java.lang.Class<?> wildcardClass1 = objMap0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet10 = strComparableMap2.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10, (float) 1L, false);
        strComparableMap2.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap14);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet16 = strComparableMap2.entrySet();
        java.lang.CharSequence charSequence19 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{null=, hi!=hi!}", (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet20 = strComparableMap2.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        java.lang.Object obj24 = strComparableMap22.clone();
        java.lang.CharSequence charSequence26 = strComparableMap22.remove((java.lang.Object) true);
        strComparableMap22.clear();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection28 = strComparableMap22.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable31 = null;
        java.lang.CharSequence charSequence33 = strComparableMap30.putIfAbsent(strComparable31, (java.lang.CharSequence) "");
        boolean boolean35 = strComparableMap30.containsValue((java.lang.Object) (short) 100);
        int int36 = strComparableMap30.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        boolean boolean43 = strComparableMap38.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence46 = strComparableMap38.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap48 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean49 = strComparableMap48.isEmpty();
        java.lang.Object obj50 = strComparableMap48.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection51 = strComparableMap48.values();
        strComparableMap38.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap48);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean59 = strComparableMap55.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence62 = strComparableMap55.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int63 = strComparableMap55.size();
        strComparableMap38.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap55);
        java.lang.CharSequence charSequence65 = strComparableMap30.get((java.lang.Object) strComparableMap55);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet66 = strComparableMap55.entrySet();
        boolean boolean67 = strComparableMap22.containsKey((java.lang.Object) strComparableEntrySet66);
        boolean boolean68 = strComparableMap2.containsValue((java.lang.Object) strComparableMap22);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(strComparableSet10);
        org.junit.Assert.assertNotNull(strComparableEntrySet16);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNotNull(strComparableEntrySet20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNotNull(charSequenceCollection28);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNotNull(strComparableEntrySet66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>> typeDescriptorMap2 = new java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>>((int) (byte) -1, (float) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = strComparableMap21.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean28 = strComparableMap9.remove((java.lang.Object) strComparableMap19, (java.lang.Object) "hi!");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap37.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence58 = strComparableMap53.get((java.lang.Object) true);
        int int59 = strComparableMap53.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet60 = strComparableMap53.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean65 = strComparableMap53.equals((java.lang.Object) 0);
        strComparableMap46.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap53);
        java.lang.CharSequence charSequence68 = strComparableMap37.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "{null=}");
        boolean boolean69 = strComparableMap37.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet70 = strComparableMap37.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap73 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean77 = strComparableMap73.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = strComparableMap73.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet81 = strComparableMap73.keySet();
        java.lang.CharSequence charSequence84 = strComparableMap73.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence87 = strComparableMap73.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.lang.Object obj88 = null;
        boolean boolean89 = strComparableMap73.containsValue(obj88);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet90 = strComparableMap73.keySet();
        boolean boolean91 = strComparableMap37.containsKey((java.lang.Object) strComparableMap73);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(strComparableSet60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "{null=}" + "'", charSequence68, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet70);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(charSequence80);
        org.junit.Assert.assertNotNull(strComparableSet81);
        org.junit.Assert.assertNull(charSequence84);
        org.junit.Assert.assertNull(charSequence87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strComparableSet90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean22 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence25 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int26 = strComparableMap18.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        boolean boolean28 = strComparableMap1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet29 = strComparableMap1.entrySet();
        java.util.LinkedHashMap<java.lang.constant.Constable, java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> constableMap30 = new java.util.LinkedHashMap<java.lang.constant.Constable, java.util.HashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>();
        java.lang.CharSequence charSequence31 = strComparableMap1.remove((java.lang.Object) constableMap30);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet29);
        org.junit.Assert.assertNull(charSequence31);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet19 = strComparableMap16.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap16.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet21 = strComparableMap16.keySet();
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        boolean boolean29 = strComparableMap24.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence32 = strComparableMap24.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap24.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = strComparableMap24.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence41 = strComparableMap24.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable44 = null;
        java.lang.CharSequence charSequence46 = strComparableMap43.putIfAbsent(strComparable44, (java.lang.CharSequence) "");
        boolean boolean48 = strComparableMap43.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence51 = strComparableMap43.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence54 = strComparableMap43.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable57 = null;
        java.lang.CharSequence charSequence59 = strComparableMap56.putIfAbsent(strComparable57, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence62 = strComparableMap56.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean64 = strComparableMap56.containsValue((java.lang.Object) 10);
        boolean boolean66 = strComparableMap43.remove((java.lang.Object) 10, (java.lang.Object) (-1L));
        boolean boolean67 = strComparableMap24.equals((java.lang.Object) boolean66);
        java.lang.CharSequence charSequence69 = strComparableMap1.getOrDefault((java.lang.Object) boolean66, (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) (short) 10);
        java.lang.CharSequence charSequence74 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap72, (java.lang.CharSequence) "{{null=, =}={}}");
        java.lang.CharSequence charSequence77 = strComparableMap72.replace((java.lang.Comparable<java.lang.String>) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=, =}");
        java.lang.Object obj78 = strComparableMap72.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet19);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertNotNull(strComparableSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertEquals("'" + charSequence35 + "' != '" + "hi!" + "'", charSequence35, "hi!");
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "hi!" + "'", charSequence54, "hi!");
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "{null=}" + "'", charSequence69, "{null=}");
        org.junit.Assert.assertEquals("'" + charSequence74 + "' != '" + "{{null=, =}={}}" + "'", charSequence74, "{{null=, =}={}}");
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "{}");
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean7 = strComparableMap6.isEmpty();
        java.lang.Object obj8 = strComparableMap6.clone();
        java.lang.CharSequence charSequence10 = strComparableMap6.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence12 = strComparableMap6.get((java.lang.Object) 100L);
        java.lang.CharSequence charSequence14 = strComparableMap1.getOrDefault((java.lang.Object) 100L, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet18 = strComparableMap1.entrySet();
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap1.putIfAbsent(strComparable19, (java.lang.CharSequence) "{null=, =}");
        int int22 = strComparableMap1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNotNull(strComparableEntrySet18);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) -1, (float) ' ', true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap1.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "hi!");
        boolean boolean17 = strComparableMap1.isEmpty();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection18 = strComparableMap1.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection18);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean20 = strComparableMap19.isEmpty();
        java.lang.Object obj21 = strComparableMap19.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap19.values();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean30 = strComparableMap26.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = strComparableMap26.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int34 = strComparableMap26.size();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.lang.CharSequence charSequence36 = strComparableMap1.get((java.lang.Object) strComparableMap26);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet37 = strComparableMap26.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.lang.CharSequence charSequence41 = strComparableMap26.put((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{{null=}={null=, =}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNotNull(strComparableEntrySet37);
        org.junit.Assert.assertNull(charSequence41);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean4 = strComparableMap3.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap3);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        int int13 = strComparableMap7.size();
        java.lang.CharSequence charSequence15 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap7, (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet16 = strComparableMap1.entrySet();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet17 = strComparableMap1.keySet();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet18 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        boolean boolean25 = strComparableMap20.containsValue((java.lang.Object) (short) 100);
        int int26 = strComparableMap20.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence29 = strComparableMap20.getOrDefault((java.lang.Object) strComparableMap27, (java.lang.CharSequence) "");
        java.lang.Object obj31 = null;
        boolean boolean32 = strComparableMap20.remove((java.lang.Object) 0L, obj31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet33 = strComparableMap20.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        int int38 = strComparableMap37.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean49 = strComparableMap45.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = strComparableMap45.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable57 = null;
        java.lang.CharSequence charSequence59 = strComparableMap56.putIfAbsent(strComparable57, (java.lang.CharSequence) "");
        boolean boolean61 = strComparableMap56.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence64 = strComparableMap56.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean67 = strComparableMap66.isEmpty();
        java.lang.Object obj68 = strComparableMap66.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection69 = strComparableMap66.values();
        strComparableMap56.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap66);
        java.lang.String str71 = strComparableMap56.toString();
        boolean boolean72 = strComparableMap45.remove((java.lang.Object) strComparableMap54, (java.lang.Object) str71);
        boolean boolean73 = strComparableMap42.equals((java.lang.Object) strComparableMap54);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap75 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable76 = null;
        java.lang.CharSequence charSequence78 = strComparableMap75.putIfAbsent(strComparable76, (java.lang.CharSequence) "");
        boolean boolean80 = strComparableMap75.containsValue((java.lang.Object) (short) 100);
        int int81 = strComparableMap75.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap82 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence84 = strComparableMap75.getOrDefault((java.lang.Object) strComparableMap82, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap86 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean87 = strComparableMap86.isEmpty();
        java.lang.Object obj88 = strComparableMap86.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection89 = strComparableMap86.values();
        boolean boolean90 = strComparableMap54.remove((java.lang.Object) strComparableMap82, (java.lang.Object) strComparableMap86);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet91 = strComparableMap86.entrySet();
        strComparableMap37.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap86);
        java.lang.CharSequence charSequence95 = strComparableMap37.put((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        boolean boolean96 = strComparableMap1.remove((java.lang.Object) strComparableMap20, (java.lang.Object) charSequence95);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNotNull(strComparableEntrySet16);
        org.junit.Assert.assertNotNull(strComparableSet17);
        org.junit.Assert.assertNotNull(strComparableSet18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "" + "'", charSequence29, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{null=, =}" + "'", str71, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(charSequence78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertEquals("'" + charSequence84 + "' != '" + "" + "'", charSequence84, "");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet91);
        org.junit.Assert.assertNull(charSequence95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence26 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap18.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence41 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap39, (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable44 = null;
        java.lang.CharSequence charSequence46 = strComparableMap43.putIfAbsent(strComparable44, (java.lang.CharSequence) "");
        boolean boolean48 = strComparableMap43.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence51 = strComparableMap43.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence54 = strComparableMap43.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection55 = strComparableMap43.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable58 = null;
        java.lang.CharSequence charSequence60 = strComparableMap57.putIfAbsent(strComparable58, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence62 = strComparableMap57.get((java.lang.Object) true);
        int int63 = strComparableMap57.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection64 = strComparableMap57.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable67 = null;
        java.lang.CharSequence charSequence69 = strComparableMap66.putIfAbsent(strComparable67, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence72 = strComparableMap66.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap74 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable75 = null;
        java.lang.CharSequence charSequence77 = strComparableMap74.putIfAbsent(strComparable75, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence79 = strComparableMap74.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet80 = strComparableMap74.entrySet();
        strComparableMap66.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap74);
        java.lang.CharSequence charSequence83 = strComparableMap57.getOrDefault((java.lang.Object) strComparableMap74, (java.lang.CharSequence) "{null=, =}");
        strComparableMap43.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap57);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection85 = strComparableMap43.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap43);
        java.lang.String str87 = strComparableMap43.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=}" + "'", charSequence41, "{null=}");
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "hi!" + "'", charSequence54, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection55);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection64);
        org.junit.Assert.assertNull(charSequence69);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertNotNull(strComparableEntrySet80);
        org.junit.Assert.assertEquals("'" + charSequence83 + "' != '" + "{null=, =}" + "'", charSequence83, "{null=, =}");
        org.junit.Assert.assertNotNull(charSequenceCollection85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "{null=, =}" + "'", str87, "{null=, =}");
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(1, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence8 = strComparableMap5.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap5);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) ' ', false);
        java.lang.CharSequence charSequence16 = strComparableMap13.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet17 = strComparableMap13.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = strComparableMap19.get((java.lang.Object) true);
        java.lang.Object obj25 = strComparableMap19.clone();
        java.lang.CharSequence charSequence28 = strComparableMap19.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj29 = null;
        java.lang.CharSequence charSequence30 = strComparableMap19.get(obj29);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean35 = strComparableMap34.isEmpty();
        strComparableMap32.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap34);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet37 = strComparableMap34.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection38 = strComparableMap34.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet39 = strComparableMap34.keySet();
        boolean boolean40 = strComparableMap19.equals((java.lang.Object) strComparableMap34);
        java.lang.String str41 = strComparableMap19.toString();
        java.lang.CharSequence charSequence44 = strComparableMap19.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        java.lang.Object obj52 = strComparableMap46.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap54 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        java.lang.CharSequence charSequence57 = strComparableMap54.putIfAbsent(strComparable55, (java.lang.CharSequence) "");
        boolean boolean59 = strComparableMap54.containsValue((java.lang.Object) (short) 100);
        int int60 = strComparableMap54.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence63 = strComparableMap54.getOrDefault((java.lang.Object) strComparableMap61, (java.lang.CharSequence) "");
        java.lang.String str64 = strComparableMap54.toString();
        boolean boolean65 = strComparableMap19.remove(obj52, (java.lang.Object) str64);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap66 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable69 = null;
        java.lang.CharSequence charSequence71 = strComparableMap68.putIfAbsent(strComparable69, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence73 = strComparableMap68.get((java.lang.Object) true);
        int int74 = strComparableMap68.size();
        java.lang.CharSequence charSequence76 = strComparableMap68.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence79 = strComparableMap68.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj80 = strComparableMap68.clone();
        boolean boolean81 = strComparableMap13.remove((java.lang.Object) strComparableMap66, (java.lang.Object) strComparableMap68);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet82 = strComparableMap66.keySet();
        boolean boolean83 = strComparableMap5.containsValue((java.lang.Object) strComparableMap66);
        boolean boolean84 = strComparableMap5.isEmpty();
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNotNull(strComparableEntrySet17);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{null=}");
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "" + "'", charSequence30, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet37);
        org.junit.Assert.assertNotNull(charSequenceCollection38);
        org.junit.Assert.assertNotNull(strComparableSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{null=, =}" + "'", str41, "{null=, =}");
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{null=}");
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "" + "'", charSequence63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "{null=}" + "'", str64, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNull(charSequence76);
        org.junit.Assert.assertNull(charSequence79);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strComparableSet82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.CharSequence charSequence18 = strComparableMap11.put((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "");
        java.lang.Object obj19 = null;
        java.lang.CharSequence charSequence20 = strComparableMap11.remove(obj19);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence20);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) -1, (float) 1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean6 = strComparableMap5.isEmpty();
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet8 = strComparableMap5.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection9 = strComparableMap5.values();
        boolean boolean10 = strComparableMap1.containsKey((java.lang.Object) strComparableMap5);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap13.get((java.lang.Object) true);
        int int19 = strComparableMap13.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap13.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        java.lang.CharSequence charSequence25 = strComparableMap22.putIfAbsent(strComparable23, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence28 = strComparableMap22.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable31 = null;
        java.lang.CharSequence charSequence33 = strComparableMap30.putIfAbsent(strComparable31, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap30.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet36 = strComparableMap30.entrySet();
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap30);
        java.lang.CharSequence charSequence39 = strComparableMap13.getOrDefault((java.lang.Object) strComparableMap30, (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap41 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int42 = strComparableMap41.size();
        boolean boolean43 = strComparableMap41.isEmpty();
        int int44 = strComparableMap41.size();
        java.lang.CharSequence charSequence47 = strComparableMap41.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.lang.CharSequence charSequence50 = strComparableMap41.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable53 = null;
        java.lang.CharSequence charSequence55 = strComparableMap52.putIfAbsent(strComparable53, (java.lang.CharSequence) "");
        boolean boolean57 = strComparableMap52.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence60 = strComparableMap52.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean62 = strComparableMap52.containsKey((java.lang.Object) 1);
        strComparableMap41.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap52);
        boolean boolean65 = strComparableMap5.remove((java.lang.Object) "{null=}", (java.lang.Object) strComparableMap52);
        int int66 = strComparableMap5.size();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet8);
        org.junit.Assert.assertNotNull(charSequenceCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNotNull(strComparableEntrySet36);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "{null=, =}" + "'", charSequence39, "{null=, =}");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        boolean boolean25 = strComparableMap20.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence28 = strComparableMap20.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence31 = strComparableMap20.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable34 = null;
        java.lang.CharSequence charSequence36 = strComparableMap33.putIfAbsent(strComparable34, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence39 = strComparableMap33.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean41 = strComparableMap33.containsValue((java.lang.Object) 10);
        boolean boolean43 = strComparableMap20.remove((java.lang.Object) 10, (java.lang.Object) (-1L));
        boolean boolean44 = strComparableMap1.equals((java.lang.Object) boolean43);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean51 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence54 = strComparableMap47.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet55 = strComparableMap47.keySet();
        java.lang.CharSequence charSequence57 = strComparableMap1.getOrDefault((java.lang.Object) strComparableSet55, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass58 = strComparableMap1.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "hi!" + "'", charSequence31, "hi!");
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertNotNull(strComparableSet55);
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "hi!" + "'", charSequence57, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.lang.CharSequence charSequence18 = strComparableMap1.get((java.lang.Object) 'a');
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        java.lang.CharSequence charSequence24 = strComparableMap21.putIfAbsent(strComparable22, (java.lang.CharSequence) "");
        boolean boolean26 = strComparableMap21.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = strComparableMap28.get((java.lang.Object) true);
        int int34 = strComparableMap28.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap28.values();
        boolean boolean36 = strComparableMap21.containsValue((java.lang.Object) strComparableMap28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        boolean boolean43 = strComparableMap38.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence46 = strComparableMap38.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence49 = strComparableMap38.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = strComparableMap38.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence55 = strComparableMap38.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean56 = strComparableMap21.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence61 = strComparableMap21.getOrDefault((java.lang.Object) strComparableMap59, (java.lang.CharSequence) "{null=}");
        strComparableMap59.clear();
        java.lang.CharSequence charSequence63 = null;
        java.lang.CharSequence charSequence64 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap59, charSequence63);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap68 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence70 = null;
        java.lang.CharSequence charSequence71 = strComparableMap68.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence70);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap68);
        boolean boolean73 = strComparableMap1.equals((java.lang.Object) strComparableMap72);
        int int74 = strComparableMap72.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "{null=}" + "'", charSequence61, "{null=}");
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNull(charSequence71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence5 = null;
        java.lang.CharSequence charSequence6 = strComparableMap3.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence5);
        java.lang.CharSequence charSequence9 = strComparableMap3.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable12 = null;
        java.lang.CharSequence charSequence14 = strComparableMap11.putIfAbsent(strComparable12, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap11.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet17 = strComparableMap11.entrySet();
        java.lang.String str18 = strComparableMap11.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean21 = strComparableMap20.isEmpty();
        java.lang.Object obj22 = strComparableMap20.clone();
        java.lang.CharSequence charSequence24 = strComparableMap20.remove((java.lang.Object) true);
        boolean boolean28 = strComparableMap20.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "", (java.lang.CharSequence) "");
        boolean boolean29 = strComparableMap11.equals((java.lang.Object) "");
        boolean boolean30 = strComparableMap3.containsKey((java.lang.Object) strComparableMap11);
        java.lang.CharSequence charSequence33 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "{null=, {null=, =}={null=}}", (java.lang.CharSequence) "hi!");
        java.lang.String str34 = strComparableMap3.toString();
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNotNull(strComparableEntrySet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{null=}" + "'", str18, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{={null=, =, hi!=hi!}}" + "'", str34, "{={null=, =, hi!=hi!}}");
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap1.keySet();
        int int9 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence14 = strComparableMap11.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap11.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean30 = strComparableMap26.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = strComparableMap26.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        boolean boolean42 = strComparableMap37.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence45 = strComparableMap37.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap47 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean48 = strComparableMap47.isEmpty();
        java.lang.Object obj49 = strComparableMap47.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection50 = strComparableMap47.values();
        strComparableMap37.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap47);
        java.lang.String str52 = strComparableMap37.toString();
        boolean boolean53 = strComparableMap26.remove((java.lang.Object) strComparableMap35, (java.lang.Object) str52);
        boolean boolean54 = strComparableMap23.equals((java.lang.Object) strComparableMap35);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable57 = null;
        java.lang.CharSequence charSequence59 = strComparableMap56.putIfAbsent(strComparable57, (java.lang.CharSequence) "");
        boolean boolean61 = strComparableMap56.containsValue((java.lang.Object) (short) 100);
        int int62 = strComparableMap56.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap63 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence65 = strComparableMap56.getOrDefault((java.lang.Object) strComparableMap63, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean68 = strComparableMap67.isEmpty();
        java.lang.Object obj69 = strComparableMap67.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection70 = strComparableMap67.values();
        boolean boolean71 = strComparableMap35.remove((java.lang.Object) strComparableMap63, (java.lang.Object) strComparableMap67);
        boolean boolean72 = strComparableMap11.equals((java.lang.Object) strComparableMap67);
        java.lang.CharSequence charSequence74 = strComparableMap67.get((java.lang.Object) (byte) 0);
        java.lang.CharSequence charSequence76 = strComparableMap1.getOrDefault((java.lang.Object) charSequence74, (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        strComparableMap1.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{null=, =}" + "'", str52, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "" + "'", charSequence65, "");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(charSequence74);
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "" + "'", charSequence76, "");
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet10 = strComparableMap2.keySet();
        java.lang.CharSequence charSequence13 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap2.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.lang.Object obj17 = null;
        boolean boolean18 = strComparableMap2.containsValue(obj17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        boolean boolean25 = strComparableMap20.containsValue((java.lang.Object) (short) 100);
        int int26 = strComparableMap20.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable29 = null;
        java.lang.CharSequence charSequence31 = strComparableMap28.putIfAbsent(strComparable29, (java.lang.CharSequence) "");
        boolean boolean33 = strComparableMap28.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence36 = strComparableMap28.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean39 = strComparableMap38.isEmpty();
        java.lang.Object obj40 = strComparableMap38.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection41 = strComparableMap38.values();
        strComparableMap28.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap38);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean49 = strComparableMap45.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = strComparableMap45.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int53 = strComparableMap45.size();
        strComparableMap28.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap45);
        java.lang.CharSequence charSequence55 = strComparableMap20.get((java.lang.Object) strComparableMap45);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet56 = strComparableMap45.entrySet();
        java.lang.CharSequence charSequence57 = strComparableMap2.remove((java.lang.Object) strComparableMap45);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable60 = null;
        java.lang.CharSequence charSequence62 = strComparableMap59.putIfAbsent(strComparable60, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence65 = strComparableMap59.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap67 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable68 = null;
        java.lang.CharSequence charSequence70 = strComparableMap67.putIfAbsent(strComparable68, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence72 = strComparableMap67.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet73 = strComparableMap67.entrySet();
        strComparableMap59.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap67);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap76 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection77 = strComparableMap76.values();
        strComparableMap76.clear();
        boolean boolean79 = strComparableMap59.containsKey((java.lang.Object) strComparableMap76);
        strComparableMap76.clear();
        strComparableMap2.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap76);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(strComparableSet10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection41);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertNotNull(strComparableEntrySet56);
        org.junit.Assert.assertNull(charSequence57);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNull(charSequence70);
        org.junit.Assert.assertNull(charSequence72);
        org.junit.Assert.assertNotNull(strComparableEntrySet73);
        org.junit.Assert.assertNotNull(charSequenceCollection77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = strComparableMap9.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = strComparableMap17.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet23 = strComparableMap17.entrySet();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap17);
        java.lang.Class<?> wildcardClass25 = strComparableMap17.getClass();
        boolean boolean26 = strComparableMap1.containsKey((java.lang.Object) wildcardClass25);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean32 = strComparableMap31.isEmpty();
        strComparableMap29.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet34 = strComparableMap31.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection35 = strComparableMap31.values();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet36 = strComparableMap31.entrySet();
        boolean boolean37 = strComparableMap1.remove((java.lang.Object) 100.0d, (java.lang.Object) strComparableEntrySet36);
        boolean boolean38 = strComparableMap1.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNotNull(strComparableEntrySet23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet34);
        org.junit.Assert.assertNotNull(charSequenceCollection35);
        org.junit.Assert.assertNotNull(strComparableEntrySet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean31 = strComparableMap8.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet32 = strComparableMap8.entrySet();
        java.lang.Object obj33 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection34 = strComparableMap8.values();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection34);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection19 = strComparableMap18.values();
        strComparableMap18.clear();
        boolean boolean21 = strComparableMap1.containsKey((java.lang.Object) strComparableMap18);
        strComparableMap18.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap24.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet30 = strComparableMap24.entrySet();
        java.lang.Object obj31 = strComparableMap24.clone();
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.Class<?>> cloneableMap35 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.Class<?>>((int) (byte) 10, (float) 1, true);
        boolean boolean36 = strComparableMap24.containsValue((java.lang.Object) 1);
        java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>, java.lang.reflect.AnnotatedElement> wildcardClassOfFieldMap39 = new java.util.LinkedHashMap<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>, java.lang.reflect.AnnotatedElement>(0, 10.0f);
        boolean boolean40 = strComparableMap18.remove((java.lang.Object) 1, (java.lang.Object) 0);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNotNull(charSequenceCollection19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNotNull(strComparableEntrySet30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{null=}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        boolean boolean14 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        java.lang.Object obj18 = strComparableMap16.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        strComparableMap16.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.lang.CharSequence charSequence26 = strComparableMap2.get((java.lang.Object) strComparableMap22);
        boolean boolean27 = strComparableMap22.isEmpty();
        strComparableMap22.clear();
        boolean boolean29 = strComparableMap22.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap33 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(1, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence38 = strComparableMap35.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        strComparableMap33.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap35);
        java.lang.CharSequence charSequence40 = strComparableMap22.get((java.lang.Object) strComparableMap33);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNull(charSequence40);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        boolean boolean17 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent(strComparable20, (java.lang.CharSequence) "");
        boolean boolean24 = strComparableMap19.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence27 = strComparableMap19.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean30 = strComparableMap29.isEmpty();
        java.lang.Object obj31 = strComparableMap29.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection32 = strComparableMap29.values();
        strComparableMap19.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap29);
        java.lang.String str34 = strComparableMap19.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean37 = strComparableMap36.isEmpty();
        java.lang.Object obj38 = strComparableMap36.clone();
        java.lang.CharSequence charSequence40 = strComparableMap36.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence42 = strComparableMap36.get((java.lang.Object) 100L);
        boolean boolean43 = strComparableMap19.containsValue((java.lang.Object) strComparableMap36);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        java.lang.CharSequence charSequence47 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{{null=}={null=, =}}", (java.lang.CharSequence) "{{null=}={null=, =}}");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{null=, =}" + "'", str34, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(charSequence47);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean20 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection40 = strComparableMap37.values();
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.lang.String str42 = strComparableMap27.toString();
        boolean boolean43 = strComparableMap16.remove((java.lang.Object) strComparableMap25, (java.lang.Object) str42);
        boolean boolean44 = strComparableMap13.equals((java.lang.Object) strComparableMap25);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        boolean boolean51 = strComparableMap46.containsValue((java.lang.Object) (short) 100);
        int int52 = strComparableMap46.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence55 = strComparableMap46.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        java.lang.Object obj59 = strComparableMap57.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection60 = strComparableMap57.values();
        boolean boolean61 = strComparableMap25.remove((java.lang.Object) strComparableMap53, (java.lang.Object) strComparableMap57);
        boolean boolean62 = strComparableMap1.equals((java.lang.Object) strComparableMap57);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet63 = strComparableMap1.keySet();
        boolean boolean67 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, {null=}={}}", (java.lang.CharSequence) "");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{null=, =}" + "'", str42, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "" + "'", charSequence55, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strComparableSet63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        int int24 = strComparableMap18.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap26.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        boolean boolean31 = strComparableMap26.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence34 = strComparableMap26.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap38.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean45 = strComparableMap26.remove((java.lang.Object) strComparableMap36, (java.lang.Object) "hi!");
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        boolean boolean47 = strComparableMap36.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet49 = strComparableMap36.entrySet();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet50 = strComparableMap36.keySet();
        int int51 = strComparableMap36.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet49);
        org.junit.Assert.assertNotNull(strComparableSet50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap37.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.lang.Comparable<java.lang.String> strComparable45 = null;
        java.lang.CharSequence charSequence47 = strComparableMap37.put(strComparable45, (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence50 = strComparableMap37.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, {null=, =}={null=}}", (java.lang.CharSequence) "{}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "" + "'", charSequence47, "");
        org.junit.Assert.assertNull(charSequence50);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable13 = null;
        java.lang.CharSequence charSequence15 = strComparableMap12.putIfAbsent(strComparable13, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = strComparableMap12.get((java.lang.Object) true);
        java.lang.Object obj18 = strComparableMap12.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        boolean boolean25 = strComparableMap20.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence28 = strComparableMap20.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap30 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean31 = strComparableMap30.isEmpty();
        java.lang.Object obj32 = strComparableMap30.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection33 = strComparableMap30.values();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap30);
        boolean boolean35 = strComparableMap1.remove((java.lang.Object) strComparableMap12, (java.lang.Object) strComparableMap30);
        strComparableMap1.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{null=}");
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '#', (float) 100, true);
        int int4 = strComparableMap3.size();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap13.get((java.lang.Object) true);
        int int19 = strComparableMap13.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap13.values();
        boolean boolean21 = strComparableMap6.containsValue((java.lang.Object) strComparableMap13);
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap13);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap24.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        java.lang.CharSequence charSequence34 = strComparableMap31.putIfAbsent(strComparable32, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence36 = strComparableMap31.get((java.lang.Object) true);
        int int37 = strComparableMap31.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet38 = strComparableMap31.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean43 = strComparableMap31.equals((java.lang.Object) 0);
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap31);
        boolean boolean45 = strComparableMap1.containsValue((java.lang.Object) strComparableMap24);
        java.lang.Object obj46 = null;
        boolean boolean47 = strComparableMap24.equals(obj46);
        java.lang.Object obj48 = strComparableMap24.clone();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(strComparableSet38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{null=}");
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence21 = strComparableMap13.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean24 = strComparableMap23.isEmpty();
        java.lang.Object obj25 = strComparableMap23.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap23.values();
        strComparableMap13.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap23);
        java.lang.String str28 = strComparableMap13.toString();
        boolean boolean29 = strComparableMap2.remove((java.lang.Object) strComparableMap11, (java.lang.Object) str28);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap31 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int32 = strComparableMap31.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap31.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        java.lang.CharSequence charSequence40 = strComparableMap31.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence43 = strComparableMap31.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        boolean boolean47 = strComparableMap31.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection48 = strComparableMap31.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap52 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 0, (float) (short) 10, false);
        boolean boolean53 = strComparableMap11.remove((java.lang.Object) strComparableMap31, (java.lang.Object) (byte) 0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap55 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        java.lang.CharSequence charSequence58 = strComparableMap55.putIfAbsent(strComparable56, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = strComparableMap55.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap62 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable63 = null;
        java.lang.CharSequence charSequence65 = strComparableMap62.putIfAbsent(strComparable63, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence67 = strComparableMap62.get((java.lang.Object) true);
        int int68 = strComparableMap62.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet69 = strComparableMap62.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap73 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean74 = strComparableMap62.equals((java.lang.Object) 0);
        strComparableMap55.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap62);
        boolean boolean76 = strComparableMap31.equals((java.lang.Object) strComparableMap62);
        java.lang.Comparable<java.lang.String> strComparable77 = null;
        java.lang.CharSequence charSequence79 = strComparableMap62.replace(strComparable77, (java.lang.CharSequence) "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{null=, =}" + "'", str28, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertNull(charSequence65);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(strComparableSet69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + charSequence79 + "' != '" + "" + "'", charSequence79, "");
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean19 = strComparableMap1.isEmpty();
        boolean boolean23 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{{null=}={null=, =}}", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, {null=, =}={null=}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap1.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection13 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = strComparableMap15.get((java.lang.Object) true);
        int int21 = strComparableMap15.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap15.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = strComparableMap24.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        java.lang.CharSequence charSequence35 = strComparableMap32.putIfAbsent(strComparable33, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = strComparableMap32.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet38 = strComparableMap32.entrySet();
        strComparableMap24.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap32);
        java.lang.CharSequence charSequence41 = strComparableMap15.getOrDefault((java.lang.Object) strComparableMap32, (java.lang.CharSequence) "{null=, =}");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap15);
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.Class<?>> cloneableMap46 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.Class<?>>((int) (byte) 10, (float) 1, true);
        java.lang.CharSequence charSequence48 = strComparableMap15.getOrDefault((java.lang.Object) true, (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet49 = strComparableMap15.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertNotNull(strComparableEntrySet38);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=, =}" + "'", charSequence41, "{null=, =}");
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "" + "'", charSequence48, "");
        org.junit.Assert.assertNotNull(strComparableEntrySet49);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence7 = strComparableMap1.get((java.lang.Object) 100L);
        boolean boolean11 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}", (java.lang.CharSequence) "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet12 = strComparableMap1.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet12);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean27 = strComparableMap23.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = strComparableMap23.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable35 = null;
        java.lang.CharSequence charSequence37 = strComparableMap34.putIfAbsent(strComparable35, (java.lang.CharSequence) "");
        boolean boolean39 = strComparableMap34.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence42 = strComparableMap34.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap44 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean45 = strComparableMap44.isEmpty();
        java.lang.Object obj46 = strComparableMap44.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection47 = strComparableMap44.values();
        strComparableMap34.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap44);
        java.lang.String str49 = strComparableMap34.toString();
        boolean boolean50 = strComparableMap23.remove((java.lang.Object) strComparableMap32, (java.lang.Object) str49);
        boolean boolean51 = strComparableMap20.equals((java.lang.Object) strComparableMap32);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        boolean boolean58 = strComparableMap53.containsValue((java.lang.Object) (short) 100);
        int int59 = strComparableMap53.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap60 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence62 = strComparableMap53.getOrDefault((java.lang.Object) strComparableMap60, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean65 = strComparableMap64.isEmpty();
        java.lang.Object obj66 = strComparableMap64.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection67 = strComparableMap64.values();
        boolean boolean68 = strComparableMap32.remove((java.lang.Object) strComparableMap60, (java.lang.Object) strComparableMap64);
        strComparableMap32.clear();
        boolean boolean70 = strComparableMap9.containsValue((java.lang.Object) strComparableMap32);
        int int71 = strComparableMap32.size();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{null=, =}" + "'", str49, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "" + "'", charSequence62, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection19 = strComparableMap18.values();
        strComparableMap18.clear();
        boolean boolean21 = strComparableMap1.containsKey((java.lang.Object) strComparableMap18);
        strComparableMap18.clear();
        java.lang.Object obj23 = strComparableMap18.clone();
        boolean boolean27 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, hi!=hi!}", (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet28 = strComparableMap18.entrySet();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNotNull(charSequenceCollection19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet28);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection13 = strComparableMap1.values();
        java.lang.Object obj14 = strComparableMap1.clone();
        boolean boolean15 = strComparableMap1.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(charSequenceCollection13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.lang.CharSequence charSequence5 = strComparableMap1.remove((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = strComparableMap7.get((java.lang.Object) true);
        java.lang.Object obj13 = strComparableMap7.clone();
        java.lang.CharSequence charSequence16 = strComparableMap7.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj17 = null;
        java.lang.CharSequence charSequence18 = strComparableMap7.get(obj17);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean23 = strComparableMap22.isEmpty();
        strComparableMap20.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap22);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet25 = strComparableMap22.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection26 = strComparableMap22.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet27 = strComparableMap22.keySet();
        boolean boolean28 = strComparableMap7.equals((java.lang.Object) strComparableMap22);
        java.lang.String str29 = strComparableMap7.toString();
        boolean boolean30 = strComparableMap1.equals((java.lang.Object) strComparableMap7);
        boolean boolean34 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap35 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.lang.Object obj36 = strComparableMap1.clone();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=}");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet25);
        org.junit.Assert.assertNotNull(charSequenceCollection26);
        org.junit.Assert.assertNotNull(strComparableSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{null=, =}" + "'", str29, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        strComparableMap1.clear();
        java.lang.CharSequence charSequence16 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection17 = strComparableMap1.values();
        boolean boolean18 = strComparableMap1.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNotNull(charSequenceCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection19 = strComparableMap18.values();
        strComparableMap18.clear();
        boolean boolean21 = strComparableMap1.containsKey((java.lang.Object) strComparableMap18);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet22 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet24 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNotNull(charSequenceCollection19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strComparableSet22);
        org.junit.Assert.assertNotNull(strComparableSet24);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 1, (float) (-1), true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4', (-1.0f), false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "{null=, {null=}={}}", (java.lang.CharSequence) "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.CharSequence, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>> charSequenceMap3 = new java.util.LinkedHashMap<java.lang.CharSequence, java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>>>(0, (float) 0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) 'a', 10.0f, false);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        int int16 = strComparableMap11.size();
        java.lang.CharSequence charSequence19 = strComparableMap11.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =, hi!=hi!}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet20 = strComparableMap11.entrySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap22 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int23 = strComparableMap22.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap22.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.CharSequence charSequence31 = strComparableMap22.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence34 = strComparableMap22.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.lang.CharSequence charSequence39 = strComparableMap22.get((java.lang.Object) 'a');
        strComparableMap22.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap42 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable43 = null;
        java.lang.CharSequence charSequence45 = strComparableMap42.putIfAbsent(strComparable43, (java.lang.CharSequence) "");
        boolean boolean47 = strComparableMap42.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable50 = null;
        java.lang.CharSequence charSequence52 = strComparableMap49.putIfAbsent(strComparable50, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence54 = strComparableMap49.get((java.lang.Object) true);
        int int55 = strComparableMap49.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection56 = strComparableMap49.values();
        boolean boolean57 = strComparableMap42.containsValue((java.lang.Object) strComparableMap49);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable60 = null;
        java.lang.CharSequence charSequence62 = strComparableMap59.putIfAbsent(strComparable60, (java.lang.CharSequence) "");
        boolean boolean64 = strComparableMap59.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence67 = strComparableMap59.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence70 = strComparableMap59.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence73 = strComparableMap59.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence76 = strComparableMap59.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean77 = strComparableMap42.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap80 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence82 = strComparableMap42.getOrDefault((java.lang.Object) strComparableMap80, (java.lang.CharSequence) "{null=}");
        strComparableMap80.clear();
        java.lang.CharSequence charSequence84 = null;
        java.lang.CharSequence charSequence85 = strComparableMap22.getOrDefault((java.lang.Object) strComparableMap80, charSequence84);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap89 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence91 = null;
        java.lang.CharSequence charSequence92 = strComparableMap89.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence91);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap93 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap89);
        boolean boolean94 = strComparableMap22.equals((java.lang.Object) strComparableMap93);
        boolean boolean95 = strComparableMap11.containsValue((java.lang.Object) strComparableMap22);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNotNull(strComparableEntrySet20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(charSequence31);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertNull(charSequence45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(charSequence52);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(charSequence67);
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "hi!" + "'", charSequence70, "hi!");
        org.junit.Assert.assertNull(charSequence73);
        org.junit.Assert.assertNull(charSequence76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "{null=}" + "'", charSequence82, "{null=}");
        org.junit.Assert.assertNull(charSequence85);
        org.junit.Assert.assertNull(charSequence92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable12 = null;
        java.lang.CharSequence charSequence14 = strComparableMap11.putIfAbsent(strComparable12, (java.lang.CharSequence) "");
        boolean boolean16 = strComparableMap11.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence19 = strComparableMap11.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap21 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean22 = strComparableMap21.isEmpty();
        java.lang.Object obj23 = strComparableMap21.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection24 = strComparableMap21.values();
        strComparableMap11.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap21);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.CharSequence charSequence32 = strComparableMap21.getOrDefault((java.lang.Object) wildcardClass30, (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet33 = strComparableMap21.keySet();
        java.lang.CharSequence charSequence34 = strComparableMap2.remove((java.lang.Object) strComparableSet33);
        java.lang.String str35 = strComparableMap2.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertNotNull(strComparableSet33);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean8 = strComparableMap7.isEmpty();
        strComparableMap5.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap7);
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap1.putIfAbsent(strComparable11, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection17 = strComparableMap1.values();
        java.lang.String str18 = strComparableMap1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNotNull(charSequenceCollection17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{null=, {}={null=, =}}" + "'", str18, "{null=, {}={null=, =}}");
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection9 = strComparableMap1.values();
        java.lang.Object obj10 = strComparableMap1.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertNotNull(charSequenceCollection9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{null=}");
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence26 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap18.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence41 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap39, (java.lang.CharSequence) "{null=}");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet42 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence45 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=}" + "'", charSequence41, "{null=}");
        org.junit.Assert.assertNotNull(strComparableEntrySet42);
        org.junit.Assert.assertNull(charSequence45);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (byte) 0, (float) (-1L), true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean20 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = strComparableMap16.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap25 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence35 = strComparableMap27.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean38 = strComparableMap37.isEmpty();
        java.lang.Object obj39 = strComparableMap37.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection40 = strComparableMap37.values();
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.lang.String str42 = strComparableMap27.toString();
        boolean boolean43 = strComparableMap16.remove((java.lang.Object) strComparableMap25, (java.lang.Object) str42);
        boolean boolean44 = strComparableMap13.equals((java.lang.Object) strComparableMap25);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        boolean boolean51 = strComparableMap46.containsValue((java.lang.Object) (short) 100);
        int int52 = strComparableMap46.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>();
        java.lang.CharSequence charSequence55 = strComparableMap46.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap57 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean58 = strComparableMap57.isEmpty();
        java.lang.Object obj59 = strComparableMap57.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection60 = strComparableMap57.values();
        boolean boolean61 = strComparableMap25.remove((java.lang.Object) strComparableMap53, (java.lang.Object) strComparableMap57);
        boolean boolean62 = strComparableMap1.equals((java.lang.Object) strComparableMap57);
        java.lang.CharSequence charSequence64 = strComparableMap57.get((java.lang.Object) (byte) 0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection65 = strComparableMap57.values();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{null=, =}" + "'", str42, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "" + "'", charSequence55, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(charSequence64);
        org.junit.Assert.assertNotNull(charSequenceCollection65);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.lang.String str16 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean19 = strComparableMap18.isEmpty();
        java.lang.Object obj20 = strComparableMap18.clone();
        java.lang.CharSequence charSequence22 = strComparableMap18.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence24 = strComparableMap18.get((java.lang.Object) 100L);
        boolean boolean25 = strComparableMap1.containsValue((java.lang.Object) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence32 = strComparableMap27.get((java.lang.Object) true);
        int int33 = strComparableMap27.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet34 = strComparableMap27.keySet();
        boolean boolean35 = strComparableMap1.equals((java.lang.Object) strComparableMap27);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable38 = null;
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent(strComparable38, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = strComparableMap37.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet43 = strComparableMap37.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap37);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        java.lang.CharSequence charSequence56 = strComparableMap53.putIfAbsent(strComparable54, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence58 = strComparableMap53.get((java.lang.Object) true);
        int int59 = strComparableMap53.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet60 = strComparableMap53.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap64 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        boolean boolean65 = strComparableMap53.equals((java.lang.Object) 0);
        strComparableMap46.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap53);
        java.lang.CharSequence charSequence68 = strComparableMap37.getOrDefault((java.lang.Object) strComparableMap53, (java.lang.CharSequence) "{null=}");
        int int69 = strComparableMap53.size();
        java.lang.String str70 = strComparableMap53.toString();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{null=, =}" + "'", str16, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strComparableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertNotNull(strComparableEntrySet43);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertNull(charSequence56);
        org.junit.Assert.assertNull(charSequence58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(strComparableSet60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "{null=}" + "'", charSequence68, "{null=}");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{null=}" + "'", str70, "{null=}");
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Cloneable, java.lang.constant.Constable> cloneableMap10 = new java.util.LinkedHashMap<java.lang.Cloneable, java.lang.constant.Constable>(1);
        boolean boolean11 = strComparableMap1.remove((java.lang.Object) (-1L), (java.lang.Object) 1);
        boolean boolean15 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{={null=, =, hi!=hi!}}", (java.lang.CharSequence) "{null=, =, {null=, =}={null=}}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet8 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean11 = strComparableMap10.isEmpty();
        java.lang.Object obj12 = strComparableMap10.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        boolean boolean20 = strComparableMap10.isEmpty();
        java.lang.CharSequence charSequence21 = strComparableMap1.remove((java.lang.Object) boolean20);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strComparableSet8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(charSequence21);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap1.isEmpty();
        java.lang.String str12 = strComparableMap1.toString();
        boolean boolean13 = strComparableMap1.isEmpty();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{null=, =}" + "'", str12, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.constant.Constable> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.constant.Constable>(100, (float) 3);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        // The following exception was thrown during execution in test generation
        try {
            java.util.LinkedHashMap<java.lang.Class<?>, java.lang.Class<?>> wildcardClassMap3 = new java.util.LinkedHashMap<java.lang.Class<?>, java.lang.Class<?>>(1, (float) (short) -1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal load factor: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =, hi!=hi!}", (java.lang.CharSequence) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        java.lang.CharSequence charSequence18 = strComparableMap15.putIfAbsent(strComparable16, (java.lang.CharSequence) "");
        boolean boolean20 = strComparableMap15.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence23 = strComparableMap15.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence26 = strComparableMap15.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap15.values();
        java.lang.CharSequence charSequence30 = strComparableMap15.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =}");
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap15);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "" + "'", charSequence30, "");
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence9 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap11 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean12 = strComparableMap11.isEmpty();
        java.lang.Object obj13 = strComparableMap11.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection14 = strComparableMap11.values();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean22 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence25 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int26 = strComparableMap18.size();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap18);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap29 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence32 = strComparableMap29.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean33 = strComparableMap18.equals((java.lang.Object) charSequence32);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection34 = strComparableMap18.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean41 = strComparableMap37.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence44 = strComparableMap37.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet45 = strComparableMap37.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap49 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 10, (float) 1L, false);
        strComparableMap37.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap49);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap53 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean57 = strComparableMap53.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap58 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap53);
        strComparableMap37.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap58);
        java.lang.CharSequence charSequence61 = strComparableMap18.getOrDefault((java.lang.Object) strComparableMap58, (java.lang.CharSequence) "{{}={null=, =, hi!=hi!}}");
        strComparableMap18.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertNotNull(strComparableSet45);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "{{}={null=, =, hi!=hi!}}" + "'", charSequence61, "{{}={null=, =, hi!=hi!}}");
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.Object obj5 = strComparableMap1.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        java.lang.CharSequence charSequence10 = strComparableMap7.putIfAbsent(strComparable8, (java.lang.CharSequence) "");
        boolean boolean12 = strComparableMap7.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence15 = strComparableMap7.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean18 = strComparableMap17.isEmpty();
        java.lang.Object obj19 = strComparableMap17.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap17.values();
        strComparableMap7.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap17);
        java.lang.String str22 = strComparableMap7.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean25 = strComparableMap24.isEmpty();
        java.lang.Object obj26 = strComparableMap24.clone();
        java.lang.CharSequence charSequence28 = strComparableMap24.remove((java.lang.Object) true);
        java.lang.CharSequence charSequence30 = strComparableMap24.get((java.lang.Object) 100L);
        boolean boolean31 = strComparableMap7.containsValue((java.lang.Object) strComparableMap24);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet32 = strComparableMap24.keySet();
        java.lang.CharSequence charSequence33 = strComparableMap1.get((java.lang.Object) strComparableSet32);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection34 = strComparableMap1.values();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{null=, =}" + "'", str22, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{}");
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strComparableSet32);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNotNull(charSequenceCollection34);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        boolean boolean21 = strComparableMap16.containsValue((java.lang.Object) (short) 100);
        int int22 = strComparableMap16.size();
        java.lang.CharSequence charSequence24 = strComparableMap10.getOrDefault((java.lang.Object) strComparableMap16, (java.lang.CharSequence) "hi!");
        boolean boolean25 = strComparableMap1.equals((java.lang.Object) charSequence24);
        java.lang.CharSequence charSequence28 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet29 = strComparableMap1.entrySet();
        java.lang.Object obj30 = strComparableMap1.clone();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertNotNull(strComparableEntrySet29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{null=, hi!=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{null=, hi!=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{null=, hi!=}");
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean2 = strComparableMap1.isEmpty();
        java.lang.Object obj3 = strComparableMap1.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection4 = strComparableMap1.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable7 = null;
        java.lang.CharSequence charSequence9 = strComparableMap6.putIfAbsent(strComparable7, (java.lang.CharSequence) "");
        boolean boolean11 = strComparableMap6.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = strComparableMap13.get((java.lang.Object) true);
        int int19 = strComparableMap13.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap13.values();
        boolean boolean21 = strComparableMap6.containsValue((java.lang.Object) strComparableMap13);
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap13);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet23 = strComparableMap13.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection4);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strComparableEntrySet23);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        java.lang.CharSequence charSequence11 = strComparableMap8.putIfAbsent(strComparable9, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = strComparableMap8.get((java.lang.Object) true);
        int int14 = strComparableMap8.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection15 = strComparableMap8.values();
        boolean boolean16 = strComparableMap1.containsValue((java.lang.Object) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        boolean boolean23 = strComparableMap18.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence26 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = strComparableMap18.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = strComparableMap18.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap18.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        boolean boolean36 = strComparableMap1.containsValue((java.lang.Object) "{null=, =}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        java.lang.CharSequence charSequence41 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap39, (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence44 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =, {null=, =}={null=}}", (java.lang.CharSequence) "");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "{null=}" + "'", charSequence41, "{null=}");
        org.junit.Assert.assertNull(charSequence44);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.String str8 = strComparableMap1.toString();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap10 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap12 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean13 = strComparableMap12.isEmpty();
        strComparableMap10.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap12);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable17 = null;
        java.lang.CharSequence charSequence19 = strComparableMap16.putIfAbsent(strComparable17, (java.lang.CharSequence) "");
        boolean boolean21 = strComparableMap16.containsValue((java.lang.Object) (short) 100);
        int int22 = strComparableMap16.size();
        java.lang.CharSequence charSequence24 = strComparableMap10.getOrDefault((java.lang.Object) strComparableMap16, (java.lang.CharSequence) "hi!");
        boolean boolean25 = strComparableMap1.equals((java.lang.Object) charSequence24);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        int int27 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap28 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap8 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean9 = strComparableMap8.isEmpty();
        java.lang.Object obj10 = strComparableMap8.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection11 = strComparableMap8.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap13 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        java.lang.CharSequence charSequence16 = strComparableMap13.putIfAbsent(strComparable14, (java.lang.CharSequence) "");
        boolean boolean18 = strComparableMap13.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        java.lang.CharSequence charSequence23 = strComparableMap20.putIfAbsent(strComparable21, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = strComparableMap20.get((java.lang.Object) true);
        int int26 = strComparableMap20.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = strComparableMap20.values();
        boolean boolean28 = strComparableMap13.containsValue((java.lang.Object) strComparableMap20);
        boolean boolean29 = strComparableMap8.equals((java.lang.Object) strComparableMap20);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        boolean boolean31 = strComparableMap8.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap32 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap8);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean37 = strComparableMap36.isEmpty();
        strComparableMap34.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        boolean boolean42 = strComparableMap36.replace((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "hi!");
        java.lang.Object obj43 = strComparableMap36.clone();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap45 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable46 = null;
        java.lang.CharSequence charSequence48 = strComparableMap45.putIfAbsent(strComparable46, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence50 = strComparableMap45.get((java.lang.Object) true);
        int int51 = strComparableMap45.size();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet52 = strComparableMap45.entrySet();
        boolean boolean56 = strComparableMap45.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{}", (java.lang.CharSequence) "{null=}");
        strComparableMap36.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap45);
        strComparableMap32.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap45);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection59 = strComparableMap32.values();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection11);
        org.junit.Assert.assertNull(charSequence16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{}");
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(strComparableEntrySet52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection59);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap7 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap2);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        boolean boolean14 = strComparableMap9.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence17 = strComparableMap9.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean20 = strComparableMap19.isEmpty();
        java.lang.Object obj21 = strComparableMap19.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = strComparableMap19.values();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean30 = strComparableMap26.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = strComparableMap26.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int34 = strComparableMap26.size();
        strComparableMap9.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap26);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap37 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence40 = strComparableMap37.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean41 = strComparableMap26.equals((java.lang.Object) charSequence40);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection42 = strComparableMap26.values();
        java.lang.CharSequence charSequence44 = strComparableMap7.getOrDefault((java.lang.Object) charSequenceCollection42, (java.lang.CharSequence) "{}");
        java.lang.CharSequence charSequence47 = strComparableMap7.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "hi!");
        boolean boolean48 = strComparableMap7.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(charSequence40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceCollection42);
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "{}" + "'", charSequence44, "{}");
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean10 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence13 = strComparableMap6.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap15 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap17 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        java.lang.CharSequence charSequence20 = strComparableMap17.putIfAbsent(strComparable18, (java.lang.CharSequence) "");
        boolean boolean22 = strComparableMap17.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence25 = strComparableMap17.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean28 = strComparableMap27.isEmpty();
        java.lang.Object obj29 = strComparableMap27.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection30 = strComparableMap27.values();
        strComparableMap17.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap27);
        java.lang.String str32 = strComparableMap17.toString();
        boolean boolean33 = strComparableMap6.remove((java.lang.Object) strComparableMap15, (java.lang.Object) str32);
        boolean boolean34 = strComparableMap3.equals((java.lang.Object) strComparableMap15);
        boolean boolean35 = strComparableMap3.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{null=, =}" + "'", str32, "{null=, =}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        int int7 = strComparableMap1.size();
        java.lang.CharSequence charSequence9 = strComparableMap1.get((java.lang.Object) (-1.0f));
        java.lang.CharSequence charSequence12 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj13 = strComparableMap1.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet14 = strComparableMap1.entrySet();
        strComparableMap1.clear();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap19 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        java.lang.CharSequence charSequence21 = null;
        java.lang.CharSequence charSequence22 = strComparableMap19.putIfAbsent((java.lang.Comparable<java.lang.String>) "", charSequence21);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap19);
        java.lang.Object obj24 = null;
        java.lang.CharSequence charSequence25 = strComparableMap23.remove(obj24);
        java.lang.CharSequence charSequence26 = strComparableMap1.remove(obj24);
        java.lang.Class<?> wildcardClass27 = strComparableMap1.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{null=, =}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{null=, =}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{null=, =}");
        org.junit.Assert.assertNotNull(strComparableEntrySet14);
        org.junit.Assert.assertNull(charSequence22);
        org.junit.Assert.assertNull(charSequence25);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(1, (float) 'a', true);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap5 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.CharSequence charSequence8 = strComparableMap5.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        strComparableMap3.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap5);
        strComparableMap3.clear();
        org.junit.Assert.assertNull(charSequence8);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        int int8 = strComparableMap6.size();
        java.lang.String str9 = strComparableMap6.toString();
        strComparableMap6.clear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        java.lang.CharSequence charSequence21 = strComparableMap18.putIfAbsent(strComparable19, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = strComparableMap18.get((java.lang.Object) true);
        int int24 = strComparableMap18.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap26 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        java.lang.CharSequence charSequence29 = strComparableMap26.putIfAbsent(strComparable27, (java.lang.CharSequence) "");
        boolean boolean31 = strComparableMap26.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence34 = strComparableMap26.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap36 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap38 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable39 = null;
        java.lang.CharSequence charSequence41 = strComparableMap38.putIfAbsent(strComparable39, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = strComparableMap38.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean45 = strComparableMap26.remove((java.lang.Object) strComparableMap36, (java.lang.Object) "hi!");
        strComparableMap18.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        boolean boolean47 = strComparableMap36.isEmpty();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap36);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet49 = strComparableMap36.entrySet();
        strComparableMap36.clear();
        java.lang.CharSequence charSequence53 = strComparableMap36.putIfAbsent((java.lang.Comparable<java.lang.String>) "{{null=}={null=, =}}", (java.lang.CharSequence) "{{null=}={null=, =}}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(charSequence34);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNull(charSequence44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet49);
        org.junit.Assert.assertNull(charSequence53);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        boolean boolean6 = strComparableMap1.containsValue((java.lang.Object) (short) 100);
        int int7 = strComparableMap1.size();
        int int8 = strComparableMap1.size();
        java.lang.Class<?> wildcardClass9 = strComparableMap1.getClass();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap3 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) 'a', (float) 10L, true);
        java.lang.CharSequence charSequence5 = null;
        java.lang.CharSequence charSequence6 = strComparableMap3.replace((java.lang.Comparable<java.lang.String>) "hi!", charSequence5);
        boolean boolean7 = strComparableMap3.isEmpty();
        boolean boolean8 = strComparableMap3.isEmpty();
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap9 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        java.lang.CharSequence charSequence12 = strComparableMap9.putIfAbsent(strComparable10, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = strComparableMap9.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet15 = strComparableMap9.entrySet();
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap9);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap18 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection19 = strComparableMap18.values();
        strComparableMap18.clear();
        boolean boolean21 = strComparableMap1.containsKey((java.lang.Object) strComparableMap18);
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet22 = strComparableMap1.keySet();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap23 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap1);
        java.lang.Object obj24 = strComparableMap23.clone();
        boolean boolean25 = strComparableMap23.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap27 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        java.lang.CharSequence charSequence30 = strComparableMap27.putIfAbsent(strComparable28, (java.lang.CharSequence) "");
        boolean boolean32 = strComparableMap27.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap34 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean35 = strComparableMap34.isEmpty();
        java.lang.Object obj36 = strComparableMap34.clone();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection37 = strComparableMap34.values();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap39 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        java.lang.CharSequence charSequence42 = strComparableMap39.putIfAbsent(strComparable40, (java.lang.CharSequence) "");
        boolean boolean44 = strComparableMap39.containsValue((java.lang.Object) (short) 100);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap46 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable47 = null;
        java.lang.CharSequence charSequence49 = strComparableMap46.putIfAbsent(strComparable47, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence51 = strComparableMap46.get((java.lang.Object) true);
        int int52 = strComparableMap46.size();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection53 = strComparableMap46.values();
        boolean boolean54 = strComparableMap39.containsValue((java.lang.Object) strComparableMap46);
        boolean boolean55 = strComparableMap34.equals((java.lang.Object) strComparableMap46);
        strComparableMap27.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap34);
        boolean boolean57 = strComparableMap34.isEmpty();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap59 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap61 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean62 = strComparableMap61.isEmpty();
        strComparableMap59.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap61);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet64 = strComparableMap61.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection65 = strComparableMap61.values();
        boolean boolean66 = strComparableMap34.containsValue((java.lang.Object) charSequenceCollection65);
        boolean boolean67 = strComparableMap23.containsKey((java.lang.Object) strComparableMap34);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(strComparableEntrySet15);
        org.junit.Assert.assertNotNull(charSequenceCollection19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strComparableSet22);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{null=, hi!=hi!}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{null=, hi!=hi!}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{null=, hi!=hi!}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(charSequence30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertNotNull(charSequenceCollection37);
        org.junit.Assert.assertNull(charSequence42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(charSequence49);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(charSequenceCollection53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet64);
        org.junit.Assert.assertNotNull(charSequenceCollection65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 0, (float) 3);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet7 = strComparableMap1.entrySet();
        java.lang.String str8 = strComparableMap1.toString();
        boolean boolean12 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.lang.CharSequence charSequence15 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=}");
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(strComparableEntrySet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{null=}" + "'", str8, "{null=}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charSequence15);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap2 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean6 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = strComparableMap2.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int10 = strComparableMap2.size();
        int int11 = strComparableMap2.size();
        java.lang.Object obj12 = null;
        boolean boolean13 = strComparableMap2.equals(obj12);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence13 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{null=}", (java.lang.CharSequence) "{null=}");
        boolean boolean17 = strComparableMap1.replace((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap20 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 1, (float) '#');
        boolean boolean24 = strComparableMap20.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence27 = strComparableMap20.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        int int28 = strComparableMap20.size();
        boolean boolean32 = strComparableMap20.replace((java.lang.Comparable<java.lang.String>) "{}", (java.lang.CharSequence) "{null=, =}", (java.lang.CharSequence) "{null=, =}");
        java.lang.CharSequence charSequence35 = strComparableMap20.replace((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "{null=, =}");
        java.lang.Object obj36 = null;
        boolean boolean37 = strComparableMap1.remove((java.lang.Object) "{null=, =}", obj36);
        java.lang.String str38 = strComparableMap1.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{hi!={null=, =}, {null=}={null=}}" + "'", str38, "{hi!={null=, =}, {null=}={null=}}");
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        java.lang.CharSequence charSequence4 = strComparableMap1.putIfAbsent(strComparable2, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = strComparableMap1.get((java.lang.Object) true);
        java.lang.Object obj7 = strComparableMap1.clone();
        java.lang.CharSequence charSequence10 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.Object obj11 = null;
        java.lang.CharSequence charSequence12 = strComparableMap1.get(obj11);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap14 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap16 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        boolean boolean17 = strComparableMap16.isEmpty();
        strComparableMap14.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap16);
        java.util.Set<java.util.Map.Entry<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>> strComparableEntrySet19 = strComparableMap16.entrySet();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection20 = strComparableMap16.values();
        java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet21 = strComparableMap16.keySet();
        boolean boolean22 = strComparableMap1.equals((java.lang.Object) strComparableMap16);
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap24 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable25 = null;
        java.lang.CharSequence charSequence27 = strComparableMap24.putIfAbsent(strComparable25, (java.lang.CharSequence) "");
        boolean boolean29 = strComparableMap24.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence32 = strComparableMap24.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence35 = strComparableMap24.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = strComparableMap24.replace((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence41 = strComparableMap24.putIfAbsent((java.lang.Comparable<java.lang.String>) "{null=, =}", (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap43 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable44 = null;
        java.lang.CharSequence charSequence46 = strComparableMap43.putIfAbsent(strComparable44, (java.lang.CharSequence) "");
        boolean boolean48 = strComparableMap43.containsValue((java.lang.Object) (short) 100);
        java.lang.CharSequence charSequence51 = strComparableMap43.putIfAbsent((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence54 = strComparableMap43.getOrDefault((java.lang.Object) (-1.0f), (java.lang.CharSequence) "hi!");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap56 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) '4');
        java.lang.Comparable<java.lang.String> strComparable57 = null;
        java.lang.CharSequence charSequence59 = strComparableMap56.putIfAbsent(strComparable57, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence62 = strComparableMap56.put((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "hi!");
        boolean boolean64 = strComparableMap56.containsValue((java.lang.Object) 10);
        boolean boolean66 = strComparableMap43.remove((java.lang.Object) 10, (java.lang.Object) (-1L));
        boolean boolean67 = strComparableMap24.equals((java.lang.Object) boolean66);
        java.lang.CharSequence charSequence69 = strComparableMap1.getOrDefault((java.lang.Object) boolean66, (java.lang.CharSequence) "{null=}");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap72 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((int) (short) 100, (float) (short) 10);
        java.lang.CharSequence charSequence74 = strComparableMap1.getOrDefault((java.lang.Object) strComparableMap72, (java.lang.CharSequence) "{{null=, =}={}}");
        strComparableMap1.clear();
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{null=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{null=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{null=}");
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableEntrySet19);
        org.junit.Assert.assertNotNull(charSequenceCollection20);
        org.junit.Assert.assertNotNull(strComparableSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertEquals("'" + charSequence35 + "' != '" + "hi!" + "'", charSequence35, "hi!");
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "hi!" + "'", charSequence54, "hi!");
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertNull(charSequence62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "{null=}" + "'", charSequence69, "{null=}");
        org.junit.Assert.assertEquals("'" + charSequence74 + "' != '" + "{{null=, =}={}}" + "'", charSequence74, "{{null=, =}={}}");
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap1 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0);
        int int2 = strComparableMap1.size();
        java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableMap6 = new java.util.LinkedHashMap<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>(0, (float) '4', false);
        strComparableMap1.putAll((java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>) strComparableMap6);
        java.lang.CharSequence charSequence10 = strComparableMap1.putIfAbsent((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.CharSequence) "{null=, =}");
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        java.lang.CharSequence charSequence13 = strComparableMap1.putIfAbsent(strComparable11, (java.lang.CharSequence) "{null=, hi!=hi!}");
        java.lang.CharSequence charSequence16 = strComparableMap1.put((java.lang.Comparable<java.lang.String>) "{hi!={null=, =}, {null=}={null=}}", (java.lang.CharSequence) "{null=, hi!=hi!}");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNull(charSequence13);
        org.junit.Assert.assertNull(charSequence16);
    }
}

